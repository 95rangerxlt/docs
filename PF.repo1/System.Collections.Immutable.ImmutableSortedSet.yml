### YamlMime:ManagedReference
items:
- uid: System.Collections.Immutable.ImmutableSortedSet
  commentId: T:System.Collections.Immutable.ImmutableSortedSet
  id: ImmutableSortedSet
  children:
  - System.Collections.Immutable.ImmutableSortedSet.Create``1
  - System.Collections.Immutable.ImmutableSortedSet.Create``1(System.Collections.Generic.IComparer{``0})
  - System.Collections.Immutable.ImmutableSortedSet.Create``1(``0)
  - System.Collections.Immutable.ImmutableSortedSet.Create``1(``0[])
  - System.Collections.Immutable.ImmutableSortedSet.Create``1(System.Collections.Generic.IComparer{``0},``0)
  - System.Collections.Immutable.ImmutableSortedSet.Create``1(System.Collections.Generic.IComparer{``0},``0[])
  - System.Collections.Immutable.ImmutableSortedSet.CreateBuilder``1
  - System.Collections.Immutable.ImmutableSortedSet.CreateBuilder``1(System.Collections.Generic.IComparer{``0})
  - System.Collections.Immutable.ImmutableSortedSet.CreateRange``1(System.Collections.Generic.IEnumerable{``0})
  - System.Collections.Immutable.ImmutableSortedSet.CreateRange``1(System.Collections.Generic.IComparer{``0},System.Collections.Generic.IEnumerable{``0})
  - System.Collections.Immutable.ImmutableSortedSet.ToImmutableSortedSet``1(System.Collections.Generic.IEnumerable{``0})
  - System.Collections.Immutable.ImmutableSortedSet.ToImmutableSortedSet``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IComparer{``0})
  langs:
  - csharp
  name: ImmutableSortedSet
  nameWithType: ImmutableSortedSet
  fullName: System.Collections.Immutable.ImmutableSortedSet
  type: Class
  assemblies:
  - System.Collections.Immutable
  namespace: System.Collections.Immutable
  summary: "Provides a set of initialization methods for instances of the <xref href=\"System.Collections.Immutable.ImmutableSortedSet`1\"></xref> class.  \n  \n [!INCLUDE[immutable_nuget_short](~/includes/immutable-nuget-short-md.md)]"
  syntax:
    content: public static class ImmutableSortedSet
  inheritance:
  - System.Object
  implements: []
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Immutable/ImmutableSortedSet.xml
  author: mairaw
  ms.author: mairaw
  manager: wpickett
- uid: System.Collections.Immutable.ImmutableSortedSet.Create``1
  commentId: M:System.Collections.Immutable.ImmutableSortedSet.Create``1
  id: Create``1
  parent: System.Collections.Immutable.ImmutableSortedSet
  langs:
  - csharp
  name: Create<T>()
  nameWithType: ImmutableSortedSet.Create<T>()
  fullName: ImmutableSortedSet.Create<T>()
  type: Method
  assemblies:
  - System.Collections.Immutable
  namespace: System.Collections.Immutable
  summary: Creates an empty immutable sorted set.
  syntax:
    content: public static System.Collections.Immutable.ImmutableSortedSet<T> Create<T> ();
    parameters: []
    typeParameters:
    - id: T
      description: The type of items to be stored in the immutable set.
    return:
      type: System.Collections.Immutable.ImmutableSortedSet`1
      description: An empty immutable sorted set.
  overload: System.Collections.Immutable.ImmutableSortedSet.Create``1*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Immutable/ImmutableSortedSet.xml
  author: mairaw
  ms.author: mairaw
  manager: wpickett
- uid: System.Collections.Immutable.ImmutableSortedSet.Create``1(System.Collections.Generic.IComparer{``0})
  commentId: M:System.Collections.Immutable.ImmutableSortedSet.Create``1(System.Collections.Generic.IComparer{``0})
  id: Create``1(System.Collections.Generic.IComparer{``0})
  parent: System.Collections.Immutable.ImmutableSortedSet
  langs:
  - csharp
  name: Create<T>(IComparer<T>)
  nameWithType: ImmutableSortedSet.Create<T>(IComparer<T>)
  fullName: ImmutableSortedSet.Create<T>(IComparer<T>)
  type: Method
  assemblies:
  - System.Collections.Immutable
  namespace: System.Collections.Immutable
  summary: Creates an empty immutable sorted set that uses the specified comparer.
  syntax:
    content: public static System.Collections.Immutable.ImmutableSortedSet<T> Create<T> (System.Collections.Generic.IComparer<T> comparer);
    parameters:
    - id: comparer
      type: System.Collections.Generic.IComparer`1
      description: The implementation to use when comparing items in the set.
    typeParameters:
    - id: T
      description: The type of items in the immutable set.
    return:
      type: System.Collections.Immutable.ImmutableSortedSet`1
      description: An empty immutable set.
  overload: System.Collections.Immutable.ImmutableSortedSet.Create``1*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Immutable/ImmutableSortedSet.xml
  author: mairaw
  ms.author: mairaw
  manager: wpickett
- uid: System.Collections.Immutable.ImmutableSortedSet.Create``1(``0)
  commentId: M:System.Collections.Immutable.ImmutableSortedSet.Create``1(``0)
  id: Create``1(``0)
  parent: System.Collections.Immutable.ImmutableSortedSet
  langs:
  - csharp
  name: Create<T>(T)
  nameWithType: ImmutableSortedSet.Create<T>(T)
  fullName: ImmutableSortedSet.Create<T>(T)
  type: Method
  assemblies:
  - System.Collections.Immutable
  namespace: System.Collections.Immutable
  summary: Creates a new immutable sorted set that contains the specified item.
  syntax:
    content: public static System.Collections.Immutable.ImmutableSortedSet<T> Create<T> (T item);
    parameters:
    - id: item
      type: T
      description: The item to prepopulate the set with.
    typeParameters:
    - id: T
      description: The type of items in the immutable set.
    return:
      type: System.Collections.Immutable.ImmutableSortedSet`1
      description: A new immutable set that contains the specified item.
  overload: System.Collections.Immutable.ImmutableSortedSet.Create``1*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Immutable/ImmutableSortedSet.xml
  author: mairaw
  ms.author: mairaw
  manager: wpickett
- uid: System.Collections.Immutable.ImmutableSortedSet.Create``1(``0[])
  commentId: M:System.Collections.Immutable.ImmutableSortedSet.Create``1(``0[])
  id: Create``1(``0[])
  parent: System.Collections.Immutable.ImmutableSortedSet
  langs:
  - csharp
  name: Create<T>(T[])
  nameWithType: ImmutableSortedSet.Create<T>(T[])
  fullName: ImmutableSortedSet.Create<T>(T[])
  type: Method
  assemblies:
  - System.Collections.Immutable
  namespace: System.Collections.Immutable
  summary: Creates a new immutable sorted set that contains the specified array of items.
  syntax:
    content: public static System.Collections.Immutable.ImmutableSortedSet<T> Create<T> (T[] items);
    parameters:
    - id: items
      type: T[]
      description: An array that contains the items to prepopulate the set with.
    typeParameters:
    - id: T
      description: The type of items in the immutable set.
    return:
      type: System.Collections.Immutable.ImmutableSortedSet`1
      description: A new immutable set that contains the specified items.
  overload: System.Collections.Immutable.ImmutableSortedSet.Create``1*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Immutable/ImmutableSortedSet.xml
  author: mairaw
  ms.author: mairaw
  manager: wpickett
- uid: System.Collections.Immutable.ImmutableSortedSet.Create``1(System.Collections.Generic.IComparer{``0},``0)
  commentId: M:System.Collections.Immutable.ImmutableSortedSet.Create``1(System.Collections.Generic.IComparer{``0},``0)
  id: Create``1(System.Collections.Generic.IComparer{``0},``0)
  parent: System.Collections.Immutable.ImmutableSortedSet
  langs:
  - csharp
  name: Create<T>(IComparer<T>, T)
  nameWithType: ImmutableSortedSet.Create<T>(IComparer<T>, T)
  fullName: ImmutableSortedSet.Create<T>(IComparer<T>, T)
  type: Method
  assemblies:
  - System.Collections.Immutable
  namespace: System.Collections.Immutable
  summary: Creates a new immutable sorted set that contains the specified item and uses the specified comparer.
  syntax:
    content: public static System.Collections.Immutable.ImmutableSortedSet<T> Create<T> (System.Collections.Generic.IComparer<T> comparer, T item);
    parameters:
    - id: comparer
      type: System.Collections.Generic.IComparer`1
      description: The implementation to use when comparing items in the set.
    - id: item
      type: T
      description: The item to prepopulate the set with.
    typeParameters:
    - id: T
      description: The type of items stored in the immutable set.
    return:
      type: System.Collections.Immutable.ImmutableSortedSet`1
      description: A new immutable set that contains the specified item.
  overload: System.Collections.Immutable.ImmutableSortedSet.Create``1*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Immutable/ImmutableSortedSet.xml
  author: mairaw
  ms.author: mairaw
  manager: wpickett
- uid: System.Collections.Immutable.ImmutableSortedSet.Create``1(System.Collections.Generic.IComparer{``0},``0[])
  commentId: M:System.Collections.Immutable.ImmutableSortedSet.Create``1(System.Collections.Generic.IComparer{``0},``0[])
  id: Create``1(System.Collections.Generic.IComparer{``0},``0[])
  parent: System.Collections.Immutable.ImmutableSortedSet
  langs:
  - csharp
  name: Create<T>(IComparer<T>, T[])
  nameWithType: ImmutableSortedSet.Create<T>(IComparer<T>, T[])
  fullName: ImmutableSortedSet.Create<T>(IComparer<T>, T[])
  type: Method
  assemblies:
  - System.Collections.Immutable
  namespace: System.Collections.Immutable
  summary: Creates a new immutable sorted set that contains the specified array of items and uses the specified comparer.
  syntax:
    content: public static System.Collections.Immutable.ImmutableSortedSet<T> Create<T> (System.Collections.Generic.IComparer<T> comparer, T[] items);
    parameters:
    - id: comparer
      type: System.Collections.Generic.IComparer`1
      description: The implementation to use when comparing items in the set.
    - id: items
      type: T[]
      description: An array that contains the items to prepopulate the set with.
    typeParameters:
    - id: T
      description: The type of items in the immutable set.
    return:
      type: System.Collections.Immutable.ImmutableSortedSet`1
      description: A new immutable set that contains the specified items.
  overload: System.Collections.Immutable.ImmutableSortedSet.Create``1*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Immutable/ImmutableSortedSet.xml
  author: mairaw
  ms.author: mairaw
  manager: wpickett
- uid: System.Collections.Immutable.ImmutableSortedSet.CreateBuilder``1
  commentId: M:System.Collections.Immutable.ImmutableSortedSet.CreateBuilder``1
  id: CreateBuilder``1
  parent: System.Collections.Immutable.ImmutableSortedSet
  langs:
  - csharp
  name: CreateBuilder<T>()
  nameWithType: ImmutableSortedSet.CreateBuilder<T>()
  fullName: ImmutableSortedSet.CreateBuilder<T>()
  type: Method
  assemblies:
  - System.Collections.Immutable
  namespace: System.Collections.Immutable
  summary: Returns a collection that can be used to build an immutable sorted set.
  syntax:
    content: public static System.Collections.Immutable.ImmutableSortedSet<T>.Builder CreateBuilder<T> ();
    parameters: []
    typeParameters:
    - id: T
      description: The type of items stored by the collection.
    return:
      type: System.Collections.Immutable.ImmutableSortedSet{T}
      description: The immutable collection builder.
  overload: System.Collections.Immutable.ImmutableSortedSet.CreateBuilder``1*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Immutable/ImmutableSortedSet.xml
  author: mairaw
  ms.author: mairaw
  manager: wpickett
- uid: System.Collections.Immutable.ImmutableSortedSet.CreateBuilder``1(System.Collections.Generic.IComparer{``0})
  commentId: M:System.Collections.Immutable.ImmutableSortedSet.CreateBuilder``1(System.Collections.Generic.IComparer{``0})
  id: CreateBuilder``1(System.Collections.Generic.IComparer{``0})
  parent: System.Collections.Immutable.ImmutableSortedSet
  langs:
  - csharp
  name: CreateBuilder<T>(IComparer<T>)
  nameWithType: ImmutableSortedSet.CreateBuilder<T>(IComparer<T>)
  fullName: ImmutableSortedSet.CreateBuilder<T>(IComparer<T>)
  type: Method
  assemblies:
  - System.Collections.Immutable
  namespace: System.Collections.Immutable
  summary: Returns a collection that can be used to build an immutable sorted set.
  syntax:
    content: public static System.Collections.Immutable.ImmutableSortedSet<T>.Builder CreateBuilder<T> (System.Collections.Generic.IComparer<T> comparer);
    parameters:
    - id: comparer
      type: System.Collections.Generic.IComparer`1
      description: The comparer used to compare items in the set for equality.
    typeParameters:
    - id: T
      description: The type of items stored by the collection.
    return:
      type: System.Collections.Immutable.ImmutableSortedSet{T}
      description: The immutable collection.
  overload: System.Collections.Immutable.ImmutableSortedSet.CreateBuilder``1*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Immutable/ImmutableSortedSet.xml
  author: mairaw
  ms.author: mairaw
  manager: wpickett
- uid: System.Collections.Immutable.ImmutableSortedSet.CreateRange``1(System.Collections.Generic.IEnumerable{``0})
  commentId: M:System.Collections.Immutable.ImmutableSortedSet.CreateRange``1(System.Collections.Generic.IEnumerable{``0})
  id: CreateRange``1(System.Collections.Generic.IEnumerable{``0})
  parent: System.Collections.Immutable.ImmutableSortedSet
  langs:
  - csharp
  name: CreateRange<T>(IEnumerable<T>)
  nameWithType: ImmutableSortedSet.CreateRange<T>(IEnumerable<T>)
  fullName: ImmutableSortedSet.CreateRange<T>(IEnumerable<T>)
  type: Method
  assemblies:
  - System.Collections.Immutable
  namespace: System.Collections.Immutable
  summary: Creates a new immutable collection that contains the specified items.
  syntax:
    content: public static System.Collections.Immutable.ImmutableSortedSet<T> CreateRange<T> (System.Collections.Generic.IEnumerable<T> items);
    parameters:
    - id: items
      type: System.Collections.Generic.IEnumerable`1
      description: The items to add to the set with before it’s immutable.
    typeParameters:
    - id: T
      description: The type of items stored by the collection.
    return:
      type: System.Collections.Immutable.ImmutableSortedSet`1
      description: The new immutable set that contains the specified items.
  overload: System.Collections.Immutable.ImmutableSortedSet.CreateRange``1*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Immutable/ImmutableSortedSet.xml
  author: mairaw
  ms.author: mairaw
  manager: wpickett
- uid: System.Collections.Immutable.ImmutableSortedSet.CreateRange``1(System.Collections.Generic.IComparer{``0},System.Collections.Generic.IEnumerable{``0})
  commentId: M:System.Collections.Immutable.ImmutableSortedSet.CreateRange``1(System.Collections.Generic.IComparer{``0},System.Collections.Generic.IEnumerable{``0})
  id: CreateRange``1(System.Collections.Generic.IComparer{``0},System.Collections.Generic.IEnumerable{``0})
  parent: System.Collections.Immutable.ImmutableSortedSet
  langs:
  - csharp
  name: CreateRange<T>(IComparer<T>, IEnumerable<T>)
  nameWithType: ImmutableSortedSet.CreateRange<T>(IComparer<T>, IEnumerable<T>)
  fullName: ImmutableSortedSet.CreateRange<T>(IComparer<T>, IEnumerable<T>)
  type: Method
  assemblies:
  - System.Collections.Immutable
  namespace: System.Collections.Immutable
  summary: Creates a new immutable collection that contains the specified items.
  syntax:
    content: public static System.Collections.Immutable.ImmutableSortedSet<T> CreateRange<T> (System.Collections.Generic.IComparer<T> comparer, System.Collections.Generic.IEnumerable<T> items);
    parameters:
    - id: comparer
      type: System.Collections.Generic.IComparer`1
      description: The comparer to use to compare elements in this set.
    - id: items
      type: System.Collections.Generic.IEnumerable`1
      description: The items to add to the set before it’s immutable.
    typeParameters:
    - id: T
      description: The type of items stored by the collection.
    return:
      type: System.Collections.Immutable.ImmutableSortedSet`1
      description: The new immutable set that contains the specified items.
  overload: System.Collections.Immutable.ImmutableSortedSet.CreateRange``1*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Immutable/ImmutableSortedSet.xml
  author: mairaw
  ms.author: mairaw
  manager: wpickett
- uid: System.Collections.Immutable.ImmutableSortedSet.ToImmutableSortedSet``1(System.Collections.Generic.IEnumerable{``0})
  commentId: M:System.Collections.Immutable.ImmutableSortedSet.ToImmutableSortedSet``1(System.Collections.Generic.IEnumerable{``0})
  id: ToImmutableSortedSet``1(System.Collections.Generic.IEnumerable{``0})
  parent: System.Collections.Immutable.ImmutableSortedSet
  langs:
  - csharp
  name: ToImmutableSortedSet<TSource>(IEnumerable<TSource>)
  nameWithType: ImmutableSortedSet.ToImmutableSortedSet<TSource>(IEnumerable<TSource>)
  fullName: ImmutableSortedSet.ToImmutableSortedSet<TSource>(IEnumerable<TSource>)
  type: Method
  assemblies:
  - System.Collections.Immutable
  namespace: System.Collections.Immutable
  summary: Enumerates a sequence and produces an immutable sorted set of its contents.
  syntax:
    content: public static System.Collections.Immutable.ImmutableSortedSet<TSource> ToImmutableSortedSet<TSource> (this System.Collections.Generic.IEnumerable<TSource> source);
    parameters:
    - id: source
      type: System.Collections.Generic.IEnumerable{TSource}
      description: The sequence to enumerate.
    typeParameters:
    - id: TSource
      description: The type of the elements in the sequence.
    return:
      type: System.Collections.Immutable.ImmutableSortedSet{TSource}
      description: An immutable sorted set that contains the items in the specified sequence.
  overload: System.Collections.Immutable.ImmutableSortedSet.ToImmutableSortedSet``1*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Immutable/ImmutableSortedSet.xml
  author: mairaw
  ms.author: mairaw
  manager: wpickett
- uid: System.Collections.Immutable.ImmutableSortedSet.ToImmutableSortedSet``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IComparer{``0})
  commentId: M:System.Collections.Immutable.ImmutableSortedSet.ToImmutableSortedSet``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IComparer{``0})
  id: ToImmutableSortedSet``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IComparer{``0})
  parent: System.Collections.Immutable.ImmutableSortedSet
  langs:
  - csharp
  name: ToImmutableSortedSet<TSource>(IEnumerable<TSource>, IComparer<TSource>)
  nameWithType: ImmutableSortedSet.ToImmutableSortedSet<TSource>(IEnumerable<TSource>, IComparer<TSource>)
  fullName: ImmutableSortedSet.ToImmutableSortedSet<TSource>(IEnumerable<TSource>, IComparer<TSource>)
  type: Method
  assemblies:
  - System.Collections.Immutable
  namespace: System.Collections.Immutable
  summary: Enumerates a sequence, produces an immutable sorted set of its contents, and uses the specified comparer.
  syntax:
    content: public static System.Collections.Immutable.ImmutableSortedSet<TSource> ToImmutableSortedSet<TSource> (this System.Collections.Generic.IEnumerable<TSource> source, System.Collections.Generic.IComparer<TSource> comparer);
    parameters:
    - id: source
      type: System.Collections.Generic.IEnumerable{TSource}
      description: The sequence to enumerate.
    - id: comparer
      type: System.Collections.Generic.IComparer{TSource}
      description: The comparer to use for initializing and adding members to the sorted set.
    typeParameters:
    - id: TSource
      description: The type of the elements in the sequence.
    return:
      type: System.Collections.Immutable.ImmutableSortedSet{TSource}
      description: An immutable sorted set that contains the items in the specified sequence.
  overload: System.Collections.Immutable.ImmutableSortedSet.ToImmutableSortedSet``1*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Immutable/ImmutableSortedSet.xml
  author: mairaw
  ms.author: mairaw
  manager: wpickett
references:
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Collections.Immutable.ImmutableSortedSet.Create``1
  parent: System.Collections.Immutable.ImmutableSortedSet
  isExternal: false
  name: Create<T>()
  nameWithType: ImmutableSortedSet.Create<T>()
  fullName: ImmutableSortedSet.Create<T>()
- uid: System.Collections.Immutable.ImmutableSortedSet`1
  parent: System.Collections.Immutable
  isExternal: false
  name: ImmutableSortedSet<T>
  nameWithType: ImmutableSortedSet<T>
  fullName: System.Collections.Immutable.ImmutableSortedSet<T>
- uid: System.Collections.Immutable.ImmutableSortedSet.Create``1(System.Collections.Generic.IComparer{``0})
  parent: System.Collections.Immutable.ImmutableSortedSet
  isExternal: false
  name: Create<T>(IComparer<T>)
  nameWithType: ImmutableSortedSet.Create<T>(IComparer<T>)
  fullName: ImmutableSortedSet.Create<T>(IComparer<T>)
- uid: System.Collections.Generic.IComparer`1
  parent: System.Collections.Generic
  isExternal: false
  name: IComparer<T>
  nameWithType: IComparer<T>
  fullName: System.Collections.Generic.IComparer<T>
- uid: System.Collections.Immutable.ImmutableSortedSet.Create``1(``0)
  parent: System.Collections.Immutable.ImmutableSortedSet
  isExternal: false
  name: Create<T>(T)
  nameWithType: ImmutableSortedSet.Create<T>(T)
  fullName: ImmutableSortedSet.Create<T>(T)
- uid: T
  isExternal: true
  name: T
  nameWithType: T
  fullName: T
- uid: System.Collections.Immutable.ImmutableSortedSet.Create``1(``0[])
  parent: System.Collections.Immutable.ImmutableSortedSet
  isExternal: false
  name: Create<T>(T[])
  nameWithType: ImmutableSortedSet.Create<T>(T[])
  fullName: ImmutableSortedSet.Create<T>(T[])
- uid: T[]
  isExternal: true
  name: T[]
  nameWithType: T[]
  fullName: T[]
  spec.csharp:
  - uid: T
    name: T
    nameWithType: T
    fullName: T
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Collections.Immutable.ImmutableSortedSet.Create``1(System.Collections.Generic.IComparer{``0},``0)
  parent: System.Collections.Immutable.ImmutableSortedSet
  isExternal: false
  name: Create<T>(IComparer<T>, T)
  nameWithType: ImmutableSortedSet.Create<T>(IComparer<T>, T)
  fullName: ImmutableSortedSet.Create<T>(IComparer<T>, T)
- uid: System.Collections.Immutable.ImmutableSortedSet.Create``1(System.Collections.Generic.IComparer{``0},``0[])
  parent: System.Collections.Immutable.ImmutableSortedSet
  isExternal: false
  name: Create<T>(IComparer<T>, T[])
  nameWithType: ImmutableSortedSet.Create<T>(IComparer<T>, T[])
  fullName: ImmutableSortedSet.Create<T>(IComparer<T>, T[])
- uid: System.Collections.Immutable.ImmutableSortedSet.CreateBuilder``1
  parent: System.Collections.Immutable.ImmutableSortedSet
  isExternal: false
  name: CreateBuilder<T>()
  nameWithType: ImmutableSortedSet.CreateBuilder<T>()
  fullName: ImmutableSortedSet.CreateBuilder<T>()
- uid: System.Collections.Immutable.ImmutableSortedSet{T}
  parent: System.Collections.Immutable
  isExternal: false
  name: ImmutableSortedSet<T>
  nameWithType: ImmutableSortedSet<T>
  fullName: System.Collections.Immutable.ImmutableSortedSet<T>+Builder
  spec.csharp:
  - uid: System.Collections.Immutable.ImmutableSortedSet`1
    name: ImmutableSortedSet
    nameWithType: ImmutableSortedSet
    fullName: System.Collections.Immutable.ImmutableSortedSet
  - name: <
    nameWithType: <
    fullName: <
  - uid: T
    name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Collections.Immutable.ImmutableSortedSet.CreateBuilder``1(System.Collections.Generic.IComparer{``0})
  parent: System.Collections.Immutable.ImmutableSortedSet
  isExternal: false
  name: CreateBuilder<T>(IComparer<T>)
  nameWithType: ImmutableSortedSet.CreateBuilder<T>(IComparer<T>)
  fullName: ImmutableSortedSet.CreateBuilder<T>(IComparer<T>)
- uid: System.Collections.Immutable.ImmutableSortedSet.CreateRange``1(System.Collections.Generic.IEnumerable{``0})
  parent: System.Collections.Immutable.ImmutableSortedSet
  isExternal: false
  name: CreateRange<T>(IEnumerable<T>)
  nameWithType: ImmutableSortedSet.CreateRange<T>(IEnumerable<T>)
  fullName: ImmutableSortedSet.CreateRange<T>(IEnumerable<T>)
- uid: System.Collections.Generic.IEnumerable`1
  parent: System.Collections.Generic
  isExternal: false
  name: IEnumerable<T>
  nameWithType: IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
- uid: System.Collections.Immutable.ImmutableSortedSet.CreateRange``1(System.Collections.Generic.IComparer{``0},System.Collections.Generic.IEnumerable{``0})
  parent: System.Collections.Immutable.ImmutableSortedSet
  isExternal: false
  name: CreateRange<T>(IComparer<T>, IEnumerable<T>)
  nameWithType: ImmutableSortedSet.CreateRange<T>(IComparer<T>, IEnumerable<T>)
  fullName: ImmutableSortedSet.CreateRange<T>(IComparer<T>, IEnumerable<T>)
- uid: System.Collections.Immutable.ImmutableSortedSet.ToImmutableSortedSet``1(System.Collections.Generic.IEnumerable{``0})
  parent: System.Collections.Immutable.ImmutableSortedSet
  isExternal: false
  name: ToImmutableSortedSet<TSource>(IEnumerable<TSource>)
  nameWithType: ImmutableSortedSet.ToImmutableSortedSet<TSource>(IEnumerable<TSource>)
  fullName: ImmutableSortedSet.ToImmutableSortedSet<TSource>(IEnumerable<TSource>)
- uid: TSource
  name: TSource
  nameWithType: TSource
  fullName: TSource
- uid: System.Collections.Immutable.ImmutableSortedSet{TSource}
  parent: System.Collections.Immutable
  isExternal: false
  name: ImmutableSortedSet<TSource>
  nameWithType: ImmutableSortedSet<TSource>
  fullName: System.Collections.Immutable.ImmutableSortedSet<TSource>
  spec.csharp:
  - uid: System.Collections.Immutable.ImmutableSortedSet`1
    name: ImmutableSortedSet
    nameWithType: ImmutableSortedSet
    fullName: System.Collections.Immutable.ImmutableSortedSet
  - name: <
    nameWithType: <
    fullName: <
  - uid: TSource
    name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Collections.Generic.IEnumerable{TSource}
  parent: System.Collections.Generic
  isExternal: false
  name: IEnumerable<TSource>
  nameWithType: IEnumerable<TSource>
  fullName: System.Collections.Generic.IEnumerable<TSource>
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
  - name: <
    nameWithType: <
    fullName: <
  - uid: TSource
    name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Collections.Immutable.ImmutableSortedSet.ToImmutableSortedSet``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IComparer{``0})
  parent: System.Collections.Immutable.ImmutableSortedSet
  isExternal: false
  name: ToImmutableSortedSet<TSource>(IEnumerable<TSource>, IComparer<TSource>)
  nameWithType: ImmutableSortedSet.ToImmutableSortedSet<TSource>(IEnumerable<TSource>, IComparer<TSource>)
  fullName: ImmutableSortedSet.ToImmutableSortedSet<TSource>(IEnumerable<TSource>, IComparer<TSource>)
- uid: System.Collections.Generic.IComparer{TSource}
  parent: System.Collections.Generic
  isExternal: false
  name: IComparer<TSource>
  nameWithType: IComparer<TSource>
  fullName: System.Collections.Generic.IComparer<TSource>
  spec.csharp:
  - uid: System.Collections.Generic.IComparer`1
    name: IComparer
    nameWithType: IComparer
    fullName: System.Collections.Generic.IComparer
  - name: <
    nameWithType: <
    fullName: <
  - uid: TSource
    name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Collections.Immutable.ImmutableSortedSet.Create``1*
  parent: System.Collections.Immutable.ImmutableSortedSet
  isExternal: false
  name: Create<T>
  nameWithType: ImmutableSortedSet.Create<T>
  fullName: ImmutableSortedSet.Create<T>
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Immutable/ImmutableSortedSet.xml
- uid: System.Collections.Immutable.ImmutableSortedSet.CreateBuilder``1*
  parent: System.Collections.Immutable.ImmutableSortedSet
  isExternal: false
  name: CreateBuilder<T>
  nameWithType: ImmutableSortedSet.CreateBuilder<T>
  fullName: ImmutableSortedSet.CreateBuilder<T>
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Immutable/ImmutableSortedSet.xml
- uid: System.Collections.Immutable.ImmutableSortedSet.CreateRange``1*
  parent: System.Collections.Immutable.ImmutableSortedSet
  isExternal: false
  name: CreateRange<T>
  nameWithType: ImmutableSortedSet.CreateRange<T>
  fullName: ImmutableSortedSet.CreateRange<T>
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Immutable/ImmutableSortedSet.xml
- uid: System.Collections.Immutable.ImmutableSortedSet.ToImmutableSortedSet``1*
  parent: System.Collections.Immutable.ImmutableSortedSet
  isExternal: false
  name: ToImmutableSortedSet<TSource>
  nameWithType: ImmutableSortedSet.ToImmutableSortedSet<TSource>
  fullName: ImmutableSortedSet.ToImmutableSortedSet<TSource>
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Immutable/ImmutableSortedSet.xml
- uid: System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: false
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: Object.Equals(Object)
- uid: System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: false
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: Object.Equals(Object, Object)
- uid: System.Object.GetHashCode
  parent: System.Object
  isExternal: false
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: Object.GetHashCode()
- uid: System.Object.GetType
  parent: System.Object
  isExternal: false
  name: GetType()
  nameWithType: Object.GetType()
  fullName: Object.GetType()
- uid: System.Object.MemberwiseClone
  parent: System.Object
  isExternal: false
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: Object.MemberwiseClone()
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: false
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: Object.ReferenceEquals(Object, Object)
- uid: System.Object.ToString
  parent: System.Object
  isExternal: false
  name: ToString()
  nameWithType: Object.ToString()
  fullName: Object.ToString()

### YamlMime:ManagedReference
items:
- uid: System.Threading.Tasks.Dataflow.ActionBlock`1
  commentId: T:System.Threading.Tasks.Dataflow.ActionBlock`1
  id: ActionBlock`1
  children:
  - System.Threading.Tasks.Dataflow.ActionBlock`1.#ctor(System.Action{`0})
  - System.Threading.Tasks.Dataflow.ActionBlock`1.#ctor(System.Func{`0,System.Threading.Tasks.Task})
  - System.Threading.Tasks.Dataflow.ActionBlock`1.#ctor(System.Action{`0},System.Threading.Tasks.Dataflow.ExecutionDataflowBlockOptions)
  - System.Threading.Tasks.Dataflow.ActionBlock`1.#ctor(System.Func{`0,System.Threading.Tasks.Task},System.Threading.Tasks.Dataflow.ExecutionDataflowBlockOptions)
  - System.Threading.Tasks.Dataflow.ActionBlock`1.Complete
  - System.Threading.Tasks.Dataflow.ActionBlock`1.Completion
  - System.Threading.Tasks.Dataflow.ActionBlock`1.InputCount
  - System.Threading.Tasks.Dataflow.ActionBlock`1.Post(`0)
  - System.Threading.Tasks.Dataflow.ActionBlock`1.ToString
  - System.Threading.Tasks.Dataflow.ActionBlock`1.System#Threading#Tasks#Dataflow#IDataflowBlock#Fault(System.Exception)
  - System.Threading.Tasks.Dataflow.ActionBlock`1.System#Threading#Tasks#Dataflow#ITargetBlock{TInput}#OfferMessage(System.Threading.Tasks.Dataflow.DataflowMessageHeader,`0,System.Threading.Tasks.Dataflow.ISourceBlock{`0},System.Boolean)
  langs:
  - csharp
  name: ActionBlock<TInput>
  nameWithType: ActionBlock<TInput>
  fullName: System.Threading.Tasks.Dataflow.ActionBlock<TInput>
  type: Class
  assemblies:
  - System.Threading.Tasks.Dataflow
  namespace: System.Threading.Tasks.Dataflow
  summary: Provides a dataflow block that invokes a provided <xref href="System.Action`1"></xref> delegate for every data element received.
  remarks: >-
    > [!NOTE]

    >  The TPL Dataflow Library (<xref:System.Threading.Tasks.Dataflow> namespace) is not distributed with the net_v45. To install the <xref:System.Threading.Tasks.Dataflow> namespace, open your project in [!INCLUDE[vs_dev11_long](~/includes/vs-dev11-long-md.md)], choose **Manage NuGet Packages** from the Project menu, and search online for the `Microsoft.Tpl.Dataflow` package.
  example:
  - "The following example shows the use of the <xref:System.Threading.Tasks.Dataflow.ActionBlock%601> class to perform several computations using dataflow blocks, and returns the elapsed time required to perform the computations. This code example is part of a larger example provided for the [How to: Specify the Degree of Parallelism in a Dataflow Block](~/docs/standard/parallel-programming/how-to-specify-the-degree-of-parallelism-in-a-dataflow-block.md) topic.  \n  \n [!code-csharp[TPLDataflow_DegreeOfParallelism#2](~/snippets/csharp/VS_Snippets_Misc/tpldataflow_degreeofparallelism/cs/dataflowdegreeofparallelism.cs#2)]\n [!code-vb[TPLDataflow_DegreeOfParallelism#2](~/snippets/visualbasic/VS_Snippets_Misc/tpldataflow_degreeofparallelism/vb/dataflowdegreeofparallelism.vb#2)]"
  syntax:
    content: 'public sealed class ActionBlock<TInput> : System.Threading.Tasks.Dataflow.ITargetBlock<TInput>'
    typeParameters:
    - id: TInput
      description: The type of data that this <xref href="System.Threading.Tasks.Dataflow.ActionBlock`1"></xref> operates on.
  inheritance:
  - System.Object
  implements:
  - System.Threading.Tasks.Dataflow.ITargetBlock{TInput}
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  extensionMethods:
  - System.Threading.Tasks.Dataflow.DataflowBlock.AsObserver``1(System.Threading.Tasks.Dataflow.ITargetBlock{``0})
  - System.Threading.Tasks.Dataflow.DataflowBlock.Post``1(System.Threading.Tasks.Dataflow.ITargetBlock{``0},``0)
  - System.Threading.Tasks.Dataflow.DataflowBlock.SendAsync``1(System.Threading.Tasks.Dataflow.ITargetBlock{``0},``0)
  - System.Threading.Tasks.Dataflow.DataflowBlock.SendAsync``1(System.Threading.Tasks.Dataflow.ITargetBlock{``0},``0,System.Threading.CancellationToken)
  attributes: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading.Tasks.Dataflow/ActionBlock`1.xml
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Threading.Tasks.Dataflow.ActionBlock`1.#ctor(System.Action{`0})
  commentId: M:System.Threading.Tasks.Dataflow.ActionBlock`1.#ctor(System.Action{`0})
  id: '#ctor(System.Action{`0})'
  parent: System.Threading.Tasks.Dataflow.ActionBlock`1
  langs:
  - csharp
  name: ActionBlock<TInput>(Action<TInput>)
  nameWithType: ActionBlock<TInput>.ActionBlock<TInput>(Action<TInput>)
  fullName: ActionBlock<TInput>.ActionBlock<TInput>(Action<TInput>)
  type: Constructor
  assemblies:
  - System.Threading.Tasks.Dataflow
  namespace: System.Threading.Tasks.Dataflow
  summary: Initializes a new instance of the <xref href="System.Threading.Tasks.Dataflow.ActionBlock`1"></xref> class with the specified action.
  syntax:
    content: public ActionBlock (Action<TInput> action);
    parameters:
    - id: action
      type: System.Action{TInput}
      description: The action to invoke with each data element received.
  overload: System.Threading.Tasks.Dataflow.ActionBlock`1.#ctor*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>action</code> is `null`.
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading.Tasks.Dataflow/ActionBlock`1.xml
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Threading.Tasks.Dataflow.ActionBlock`1.#ctor(System.Func{`0,System.Threading.Tasks.Task})
  commentId: M:System.Threading.Tasks.Dataflow.ActionBlock`1.#ctor(System.Func{`0,System.Threading.Tasks.Task})
  id: '#ctor(System.Func{`0,System.Threading.Tasks.Task})'
  parent: System.Threading.Tasks.Dataflow.ActionBlock`1
  langs:
  - csharp
  name: ActionBlock<TInput>(Func<TInput,Task>)
  nameWithType: ActionBlock<TInput>.ActionBlock<TInput>(Func<TInput,Task>)
  fullName: ActionBlock<TInput>.ActionBlock<TInput>(Func<TInput,Task>)
  type: Constructor
  assemblies:
  - System.Threading.Tasks.Dataflow
  namespace: System.Threading.Tasks.Dataflow
  summary: Initializes a new instance of the <xref href="System.Threading.Tasks.Dataflow.ActionBlock`1"></xref> class with the specified action.
  syntax:
    content: public ActionBlock (Func<TInput,System.Threading.Tasks.Task> action);
    parameters:
    - id: action
      type: System.Func{TInput,System.Threading.Tasks.Task}
      description: The action to invoke with each data element received.
  overload: System.Threading.Tasks.Dataflow.ActionBlock`1.#ctor*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>action</code> is `null`.
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading.Tasks.Dataflow/ActionBlock`1.xml
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Threading.Tasks.Dataflow.ActionBlock`1.#ctor(System.Action{`0},System.Threading.Tasks.Dataflow.ExecutionDataflowBlockOptions)
  commentId: M:System.Threading.Tasks.Dataflow.ActionBlock`1.#ctor(System.Action{`0},System.Threading.Tasks.Dataflow.ExecutionDataflowBlockOptions)
  id: '#ctor(System.Action{`0},System.Threading.Tasks.Dataflow.ExecutionDataflowBlockOptions)'
  parent: System.Threading.Tasks.Dataflow.ActionBlock`1
  langs:
  - csharp
  name: ActionBlock<TInput>(Action<TInput>, ExecutionDataflowBlockOptions)
  nameWithType: ActionBlock<TInput>.ActionBlock<TInput>(Action<TInput>, ExecutionDataflowBlockOptions)
  fullName: ActionBlock<TInput>.ActionBlock<TInput>(Action<TInput>, ExecutionDataflowBlockOptions)
  type: Constructor
  assemblies:
  - System.Threading.Tasks.Dataflow
  namespace: System.Threading.Tasks.Dataflow
  summary: Initializes a new instance of the <xref href="System.Threading.Tasks.Dataflow.ActionBlock`1"></xref> class with the specified action and configuration options.
  remarks: ''
  example:
  - "The following example shows how to use the <xref:System.Threading.Tasks.Dataflow.ActionBlock%601.%23ctor%28System.Action%7B%600%7D%2CSystem.Threading.Tasks.Dataflow.ExecutionDataflowBlockOptions%29> constructor to create a new <xref:System.Threading.Tasks.Dataflow.ActionBlock%601> object. This code example is part of a larger example provided for the [How to: Specify the Degree of Parallelism in a Dataflow Block](~/docs/standard/parallel-programming/how-to-specify-the-degree-of-parallelism-in-a-dataflow-block.md) topic.  \n  \n [!code-csharp[TPLDataflow_DegreeOfParallelism#2](~/snippets/csharp/VS_Snippets_Misc/tpldataflow_degreeofparallelism/cs/dataflowdegreeofparallelism.cs#2)]\n [!code-vb[TPLDataflow_DegreeOfParallelism#2](~/snippets/visualbasic/VS_Snippets_Misc/tpldataflow_degreeofparallelism/vb/dataflowdegreeofparallelism.vb#2)]"
  syntax:
    content: public ActionBlock (Action<TInput> action, System.Threading.Tasks.Dataflow.ExecutionDataflowBlockOptions dataflowBlockOptions);
    parameters:
    - id: action
      type: System.Action{TInput}
      description: The action to invoke with each data element received.
    - id: dataflowBlockOptions
      type: System.Threading.Tasks.Dataflow.ExecutionDataflowBlockOptions
      description: The options with which to configure this <xref href="System.Threading.Tasks.Dataflow.ActionBlock`1"></xref>.
  overload: System.Threading.Tasks.Dataflow.ActionBlock`1.#ctor*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>action</code> is `null`.  \n  \n -or-  \n  \n <code>dataflowBlockOptions</code> is `null`."
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading.Tasks.Dataflow/ActionBlock`1.xml
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Threading.Tasks.Dataflow.ActionBlock`1.#ctor(System.Func{`0,System.Threading.Tasks.Task},System.Threading.Tasks.Dataflow.ExecutionDataflowBlockOptions)
  commentId: M:System.Threading.Tasks.Dataflow.ActionBlock`1.#ctor(System.Func{`0,System.Threading.Tasks.Task},System.Threading.Tasks.Dataflow.ExecutionDataflowBlockOptions)
  id: '#ctor(System.Func{`0,System.Threading.Tasks.Task},System.Threading.Tasks.Dataflow.ExecutionDataflowBlockOptions)'
  parent: System.Threading.Tasks.Dataflow.ActionBlock`1
  langs:
  - csharp
  name: ActionBlock<TInput>(Func<TInput,Task>, ExecutionDataflowBlockOptions)
  nameWithType: ActionBlock<TInput>.ActionBlock<TInput>(Func<TInput,Task>, ExecutionDataflowBlockOptions)
  fullName: ActionBlock<TInput>.ActionBlock<TInput>(Func<TInput,Task>, ExecutionDataflowBlockOptions)
  type: Constructor
  assemblies:
  - System.Threading.Tasks.Dataflow
  namespace: System.Threading.Tasks.Dataflow
  summary: Initializes a new instance of the <xref href="System.Threading.Tasks.Dataflow.ActionBlock`1"></xref> class with the specified action and configuration options.
  syntax:
    content: public ActionBlock (Func<TInput,System.Threading.Tasks.Task> action, System.Threading.Tasks.Dataflow.ExecutionDataflowBlockOptions dataflowBlockOptions);
    parameters:
    - id: action
      type: System.Func{TInput,System.Threading.Tasks.Task}
      description: The action to invoke with each data element received.
    - id: dataflowBlockOptions
      type: System.Threading.Tasks.Dataflow.ExecutionDataflowBlockOptions
      description: The options with which to configure this <xref href="System.Threading.Tasks.Dataflow.ActionBlock`1"></xref>.
  overload: System.Threading.Tasks.Dataflow.ActionBlock`1.#ctor*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "<code>action</code> is `null`.  \n  \n -or-  \n  \n <code>dataflowBlockOptions</code> is `null`."
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading.Tasks.Dataflow/ActionBlock`1.xml
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Threading.Tasks.Dataflow.ActionBlock`1.Complete
  commentId: M:System.Threading.Tasks.Dataflow.ActionBlock`1.Complete
  id: Complete
  parent: System.Threading.Tasks.Dataflow.ActionBlock`1
  langs:
  - csharp
  name: Complete()
  nameWithType: ActionBlock<TInput>.Complete()
  fullName: ActionBlock<TInput>.Complete()
  type: Method
  assemblies:
  - System.Threading.Tasks.Dataflow
  namespace: System.Threading.Tasks.Dataflow
  summary: Signals to the dataflow block  that it shouldn't accept or produce any more messages and shouldn't consume any more postponed messages.
  remarks: After <xref:System.Threading.Tasks.Dataflow.ActionBlock%601.Complete%2A> has been called on a dataflow block, that block will complete (so that its  <xref:System.Threading.Tasks.Dataflow.ActionBlock%601.Completion%2A> task will enter a final state) after it has processed all previously available data. This method will not block waiting for completion to occur, but will initiate the request. To wait for completion to occur, use the <xref:System.Threading.Tasks.Dataflow.ActionBlock%601.Completion%2A> property.
  example:
  - "The following example shows the use of the <xref:System.Threading.Tasks.Dataflow.ActionBlock%601.Complete%2A> method to signal to the dataflow block  that it shouldn't accept or produce any more messages nor consume any more postponed messages . This code example is part of a larger example provided for the [How to: Specify the Degree of Parallelism in a Dataflow Block](~/docs/standard/parallel-programming/how-to-specify-the-degree-of-parallelism-in-a-dataflow-block.md) topic.  \n  \n [!code-csharp[TPLDataflow_DegreeOfParallelism#2](~/snippets/csharp/VS_Snippets_Misc/tpldataflow_degreeofparallelism/cs/dataflowdegreeofparallelism.cs#2)]\n [!code-vb[TPLDataflow_DegreeOfParallelism#2](~/snippets/visualbasic/VS_Snippets_Misc/tpldataflow_degreeofparallelism/vb/dataflowdegreeofparallelism.vb#2)]"
  syntax:
    content: public void Complete ();
    parameters: []
  overload: System.Threading.Tasks.Dataflow.ActionBlock`1.Complete*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading.Tasks.Dataflow/ActionBlock`1.xml
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Threading.Tasks.Dataflow.ActionBlock`1.Completion
  commentId: P:System.Threading.Tasks.Dataflow.ActionBlock`1.Completion
  id: Completion
  parent: System.Threading.Tasks.Dataflow.ActionBlock`1
  langs:
  - csharp
  name: Completion
  nameWithType: ActionBlock<TInput>.Completion
  fullName: ActionBlock<TInput>.Completion
  type: Property
  assemblies:
  - System.Threading.Tasks.Dataflow
  namespace: System.Threading.Tasks.Dataflow
  summary: Gets a  <xref href="System.Threading.Tasks.Task"></xref> object that represents the asynchronous operation and completion of the dataflow block.
  remarks: A dataflow block is considered completed when it is not currently processing a message and when it has guaranteed that it will not process any more messages. The returned <xref:System.Threading.Tasks.Task> will transition to a completed state  when the associated block has completed. It will transition to the <xref:System.Threading.Tasks.TaskStatus.RanToCompletion> state when the block completes its processing successfully according to the dataflow block’s defined semantics. It will transition to the <xref:System.Threading.Tasks.TaskStatus.Faulted> state when the dataflow block has completed processing prematurely due to an unhandled exception, and it will transition to the  <xref:System.Threading.Tasks.TaskStatus.Canceled> state when the dataflow block has completed processing prematurely after receiving a cancellation request. If the task completes in the <xref:System.Threading.Tasks.TaskStatus.Faulted> state, its `Exception` property returns an <xref:System.AggregateException> exception that contains one or more exceptions that caused the block to fail.
  example:
  - "The following example shows how to use the <xref:System.Threading.Tasks.Dataflow.ActionBlock%601.Completion%2A> property to wait for all messages to propagate through the network. This code example is part of a larger example provided for the [How to: Specify the Degree of Parallelism in a Dataflow Block](~/docs/standard/parallel-programming/how-to-specify-the-degree-of-parallelism-in-a-dataflow-block.md) topic.  \n  \n [!code-csharp[TPLDataflow_DegreeOfParallelism#2](~/snippets/csharp/VS_Snippets_Misc/tpldataflow_degreeofparallelism/cs/dataflowdegreeofparallelism.cs#2)]\n [!code-vb[TPLDataflow_DegreeOfParallelism#2](~/snippets/visualbasic/VS_Snippets_Misc/tpldataflow_degreeofparallelism/vb/dataflowdegreeofparallelism.vb#2)]"
  syntax:
    content: public System.Threading.Tasks.Task Completion { get; }
    return:
      type: System.Threading.Tasks.Task
      description: The completed task.
  overload: System.Threading.Tasks.Dataflow.ActionBlock`1.Completion*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading.Tasks.Dataflow/ActionBlock`1.xml
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Threading.Tasks.Dataflow.ActionBlock`1.InputCount
  commentId: P:System.Threading.Tasks.Dataflow.ActionBlock`1.InputCount
  id: InputCount
  parent: System.Threading.Tasks.Dataflow.ActionBlock`1
  langs:
  - csharp
  name: InputCount
  nameWithType: ActionBlock<TInput>.InputCount
  fullName: ActionBlock<TInput>.InputCount
  type: Property
  assemblies:
  - System.Threading.Tasks.Dataflow
  namespace: System.Threading.Tasks.Dataflow
  summary: Gets the number of input items waiting to be processed by this block.
  remarks: The <xref:System.Threading.Tasks.Dataflow.ActionBlock%601.InputCount%2A> does not include any items that are currently being processed by the block or any items that have already been processed by the block.
  syntax:
    content: public int InputCount { get; }
    return:
      type: System.Int32
      description: The number of input items waiting to be processed by this block.
  overload: System.Threading.Tasks.Dataflow.ActionBlock`1.InputCount*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading.Tasks.Dataflow/ActionBlock`1.xml
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Threading.Tasks.Dataflow.ActionBlock`1.Post(`0)
  commentId: M:System.Threading.Tasks.Dataflow.ActionBlock`1.Post(`0)
  id: Post(`0)
  parent: System.Threading.Tasks.Dataflow.ActionBlock`1
  langs:
  - csharp
  name: Post(TInput)
  nameWithType: ActionBlock<TInput>.Post(TInput)
  fullName: ActionBlock<TInput>.Post(TInput)
  type: Method
  assemblies:
  - System.Threading.Tasks.Dataflow
  namespace: System.Threading.Tasks.Dataflow
  summary: Posts an item to the target dataflow block.
  remarks: ''
  example:
  - "The following example shows how to use the <xref:System.Threading.Tasks.Dataflow.ActionBlock%601.Post%2A> method to post an item to the target dataflow block. This code example is part of a larger example provided for the [How to: Specify the Degree of Parallelism in a Dataflow Block](~/docs/standard/parallel-programming/how-to-specify-the-degree-of-parallelism-in-a-dataflow-block.md) topic.  \n  \n [!code-csharp[TPLDataflow_DegreeOfParallelism#2](~/snippets/csharp/VS_Snippets_Misc/tpldataflow_degreeofparallelism/cs/dataflowdegreeofparallelism.cs#2)]\n [!code-vb[TPLDataflow_DegreeOfParallelism#2](~/snippets/visualbasic/VS_Snippets_Misc/tpldataflow_degreeofparallelism/vb/dataflowdegreeofparallelism.vb#2)]"
  syntax:
    content: public bool Post (TInput item);
    parameters:
    - id: item
      type: TInput
      description: The item being offered to the target.
    return:
      type: System.Boolean
      description: '`true` if the item is posted to the dataflow block; otherwise, `false`.'
  overload: System.Threading.Tasks.Dataflow.ActionBlock`1.Post*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading.Tasks.Dataflow/ActionBlock`1.xml
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Threading.Tasks.Dataflow.ActionBlock`1.ToString
  commentId: M:System.Threading.Tasks.Dataflow.ActionBlock`1.ToString
  id: ToString
  parent: System.Threading.Tasks.Dataflow.ActionBlock`1
  langs:
  - csharp
  name: ToString()
  nameWithType: ActionBlock<TInput>.ToString()
  fullName: ActionBlock<TInput>.ToString()
  type: Method
  assemblies:
  - System.Threading.Tasks.Dataflow
  namespace: System.Threading.Tasks.Dataflow
  summary: Returns a string that represents the formatted name of this <xref href="System.Threading.Tasks.Dataflow.IDataflowBlock"></xref> instance.
  remarks: Inherited from <xref:System.Object>. Uses the  <xref:System.Threading.Tasks.Dataflow.DataflowBlockOptions.NameFormat%2A> option.
  syntax:
    content: public override string ToString ();
    parameters: []
    return:
      type: System.String
      description: A string that represents the formatted name of this <xref href="System.Threading.Tasks.Dataflow.IDataflowBlock"></xref> instance.
  overload: System.Threading.Tasks.Dataflow.ActionBlock`1.ToString*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading.Tasks.Dataflow/ActionBlock`1.xml
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Threading.Tasks.Dataflow.ActionBlock`1.System#Threading#Tasks#Dataflow#IDataflowBlock#Fault(System.Exception)
  commentId: M:System.Threading.Tasks.Dataflow.ActionBlock`1.System#Threading#Tasks#Dataflow#IDataflowBlock#Fault(System.Exception)
  id: System#Threading#Tasks#Dataflow#IDataflowBlock#Fault(System.Exception)
  isEii: true
  parent: System.Threading.Tasks.Dataflow.ActionBlock`1
  langs:
  - csharp
  name: IDataflowBlock.Fault(Exception)
  nameWithType: ActionBlock<TInput>.IDataflowBlock.Fault(Exception)
  fullName: ActionBlock<TInput>.IDataflowBlock.Fault(Exception)
  type: Method
  assemblies:
  - System.Threading.Tasks.Dataflow
  namespace: System.Threading.Tasks.Dataflow
  summary: Causes the dataflow block to complete in a faulted state.
  remarks: After <xref:System.Threading.Tasks.Dataflow.IDataflowBlock.Fault%2A> has been called on a dataflow block, that block will complete and its  <xref:System.Threading.Tasks.Dataflow.ActionBlock%601.Completion%2A> task will enter a final state. Faulting a block, as with canceling a block, causes buffered messages (unprocessed input messages as well as unoffered output messages) to be lost.
  syntax:
    content: void IDataflowBlock.Fault (Exception exception);
    parameters:
    - id: exception
      type: System.Exception
      description: The exception that caused the faulting.
  overload: System.Threading.Tasks.Dataflow.ActionBlock`1.System#Threading#Tasks#Dataflow#IDataflowBlock#Fault*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>exception</code> is `null`.
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading.Tasks.Dataflow/ActionBlock`1.xml
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Threading.Tasks.Dataflow.ActionBlock`1.System#Threading#Tasks#Dataflow#ITargetBlock{TInput}#OfferMessage(System.Threading.Tasks.Dataflow.DataflowMessageHeader,`0,System.Threading.Tasks.Dataflow.ISourceBlock{`0},System.Boolean)
  commentId: M:System.Threading.Tasks.Dataflow.ActionBlock`1.System#Threading#Tasks#Dataflow#ITargetBlock<TInput>#OfferMessage(System.Threading.Tasks.Dataflow.DataflowMessageHeader,`0,System.Threading.Tasks.Dataflow.ISourceBlock{`0},System.Boolean)
  id: System#Threading#Tasks#Dataflow#ITargetBlock{TInput}#OfferMessage(System.Threading.Tasks.Dataflow.DataflowMessageHeader,`0,System.Threading.Tasks.Dataflow.ISourceBlock{`0},System.Boolean)
  isEii: true
  parent: System.Threading.Tasks.Dataflow.ActionBlock`1
  langs:
  - csharp
  name: ITargetBlock<TInput>.OfferMessage(DataflowMessageHeader, TInput, ISourceBlock<TInput>, Boolean)
  nameWithType: ActionBlock<TInput>.ITargetBlock<TInput>.OfferMessage(DataflowMessageHeader, TInput, ISourceBlock<TInput>, Boolean)
  fullName: ActionBlock<TInput>.ITargetBlock<TInput>.OfferMessage(DataflowMessageHeader, TInput, ISourceBlock<TInput>, Boolean)
  type: Method
  assemblies:
  - System.Threading.Tasks.Dataflow
  namespace: System.Threading.Tasks.Dataflow
  summary: Offers a message to the dataflow block, and gives it the opportunity to consume or postpone the message.
  syntax:
    content: System.Threading.Tasks.Dataflow.DataflowMessageStatus ITargetBlock<TInput>.OfferMessage (System.Threading.Tasks.Dataflow.DataflowMessageHeader messageHeader, TInput messageValue, System.Threading.Tasks.Dataflow.ISourceBlock<TInput> source, bool consumeToAccept);
    parameters:
    - id: messageHeader
      type: System.Threading.Tasks.Dataflow.DataflowMessageHeader
      description: The header of the message being offered.
    - id: messageValue
      type: TInput
      description: The value of the message being offered.
    - id: source
      type: System.Threading.Tasks.Dataflow.ISourceBlock{TInput}
      description: The dataflow block that is offering the message. This may be `null`.
    - id: consumeToAccept
      type: System.Boolean
      description: '`true` to instruct the target to call <xref href="System.Threading.Tasks.Dataflow.ISourceBlock`1.ConsumeMessage(System.Threading.Tasks.Dataflow.DataflowMessageHeader,System.Threading.Tasks.Dataflow.ITargetBlock{`0},System.Boolean@)"></xref> synchronously during the call to <xref href="System.Threading.Tasks.Dataflow.ITargetBlock`1.OfferMessage(System.Threading.Tasks.Dataflow.DataflowMessageHeader,`0,System.Threading.Tasks.Dataflow.ISourceBlock{`0},System.Boolean)"></xref>, prior to returning <xref href="System.Threading.Tasks.Dataflow.DataflowMessageStatus.Accepted"></xref>, in order to consume the message; otherwise, `false`.'
    return:
      type: System.Threading.Tasks.Dataflow.DataflowMessageStatus
      description: "The status of the offered message.  If the message was accepted by the target, <xref href=\"System.Threading.Tasks.Dataflow.DataflowMessageStatus.Accepted\"></xref> is returned, and the source should no longer use the offered message, because it is now owned by the target. If the message was postponed by the target, <xref href=\"System.Threading.Tasks.Dataflow.DataflowMessageStatus.Postponed\"></xref> is returned as a notification that the target may later attempt to consume or reserve the message; in the meantime, the source still owns the message and may offer it to other blocks.  \n  \n If the target would have otherwise postponed message, but source was `null`, <xref href=\"System.Threading.Tasks.Dataflow.DataflowMessageStatus.Declined\"></xref> is returned.  \n  \n If the target tried to accept the message but missed it due to the source delivering the message to another target or simply discarding it, <xref href=\"System.Threading.Tasks.Dataflow.DataflowMessageStatus.NotAvailable\"></xref> is returned.  \n  \n If the target chose not to accept the message, <xref href=\"System.Threading.Tasks.Dataflow.DataflowMessageStatus.Declined\"></xref> is returned. If the target chose not to accept the message and will never accept another message from this source, <xref href=\"System.Threading.Tasks.Dataflow.DataflowMessageStatus.DecliningPermanently\"></xref> is returned."
  overload: System.Threading.Tasks.Dataflow.ActionBlock`1.System#Threading#Tasks#Dataflow#ITargetBlock{TInput}#OfferMessage*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: "<code>messageHeader</code> is not valid.  \n  \n -or- <code>consumeToAccept</code> may be `true` only if provided with a non-null <code>source</code>."
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading.Tasks.Dataflow/ActionBlock`1.xml
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
references:
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.ArgumentNullException
  parent: System
  isExternal: false
  name: ArgumentNullException
  nameWithType: ArgumentNullException
  fullName: System.ArgumentNullException
- uid: System.ArgumentException
  parent: System
  isExternal: false
  name: ArgumentException
  nameWithType: ArgumentException
  fullName: System.ArgumentException
- uid: System.Threading.Tasks.Dataflow.ActionBlock`1.#ctor(System.Action{`0})
  parent: System.Threading.Tasks.Dataflow.ActionBlock`1
  isExternal: false
  name: ActionBlock<TInput>(Action<TInput>)
  nameWithType: ActionBlock<TInput>.ActionBlock<TInput>(Action<TInput>)
  fullName: ActionBlock<TInput>.ActionBlock<TInput>(Action<TInput>)
- uid: System.Action`1
  name: Action<T>
  nameWithType: Action<T>
  fullName: System.Action<T>
- uid: TInput
  name: TInput
  nameWithType: TInput
  fullName: TInput
- uid: System.Action{TInput}
  parent: System
  isExternal: false
  name: Action<TInput>
  nameWithType: Action<TInput>
  fullName: System.Action<TInput>
  spec.csharp:
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
  - name: <
    nameWithType: <
    fullName: <
  - uid: TInput
    name: TInput
    nameWithType: TInput
    fullName: TInput
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Threading.Tasks.Dataflow.ActionBlock`1.#ctor(System.Func{`0,System.Threading.Tasks.Task})
  parent: System.Threading.Tasks.Dataflow.ActionBlock`1
  isExternal: false
  name: ActionBlock<TInput>(Func<TInput,Task>)
  nameWithType: ActionBlock<TInput>.ActionBlock<TInput>(Func<TInput,Task>)
  fullName: ActionBlock<TInput>.ActionBlock<TInput>(Func<TInput,Task>)
- uid: System.Func`2
  name: Func<T,TResult>
  nameWithType: Func<T,TResult>
  fullName: System.Func<T,TResult>
- uid: System.Threading.Tasks.Task
  name: Task
  nameWithType: Task
  fullName: System.Threading.Tasks.Task
- uid: System.Func{TInput,System.Threading.Tasks.Task}
  parent: System
  isExternal: false
  name: Func<TInput,Task>
  nameWithType: Func<TInput,Task>
  fullName: System.Func<TInput,System.Threading.Tasks.Task>
  spec.csharp:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
  - name: <
    nameWithType: <
    fullName: <
  - uid: TInput
    name: TInput
    nameWithType: TInput
    fullName: TInput
  - name: ','
    nameWithType: ','
    fullName: ','
  - uid: System.Threading.Tasks.Task
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Threading.Tasks.Dataflow.ActionBlock`1.#ctor(System.Action{`0},System.Threading.Tasks.Dataflow.ExecutionDataflowBlockOptions)
  parent: System.Threading.Tasks.Dataflow.ActionBlock`1
  isExternal: false
  name: ActionBlock<TInput>(Action<TInput>, ExecutionDataflowBlockOptions)
  nameWithType: ActionBlock<TInput>.ActionBlock<TInput>(Action<TInput>, ExecutionDataflowBlockOptions)
  fullName: ActionBlock<TInput>.ActionBlock<TInput>(Action<TInput>, ExecutionDataflowBlockOptions)
- uid: System.Threading.Tasks.Dataflow.ExecutionDataflowBlockOptions
  parent: System.Threading.Tasks.Dataflow
  isExternal: false
  name: ExecutionDataflowBlockOptions
  nameWithType: ExecutionDataflowBlockOptions
  fullName: System.Threading.Tasks.Dataflow.ExecutionDataflowBlockOptions
- uid: System.Threading.Tasks.Dataflow.ActionBlock`1.#ctor(System.Func{`0,System.Threading.Tasks.Task},System.Threading.Tasks.Dataflow.ExecutionDataflowBlockOptions)
  parent: System.Threading.Tasks.Dataflow.ActionBlock`1
  isExternal: false
  name: ActionBlock<TInput>(Func<TInput,Task>, ExecutionDataflowBlockOptions)
  nameWithType: ActionBlock<TInput>.ActionBlock<TInput>(Func<TInput,Task>, ExecutionDataflowBlockOptions)
  fullName: ActionBlock<TInput>.ActionBlock<TInput>(Func<TInput,Task>, ExecutionDataflowBlockOptions)
- uid: System.Threading.Tasks.Dataflow.ActionBlock`1.Complete
  parent: System.Threading.Tasks.Dataflow.ActionBlock`1
  isExternal: false
  name: Complete()
  nameWithType: ActionBlock<TInput>.Complete()
  fullName: ActionBlock<TInput>.Complete()
- uid: System.Threading.Tasks.Dataflow.ActionBlock`1.Completion
  parent: System.Threading.Tasks.Dataflow.ActionBlock`1
  isExternal: false
  name: Completion
  nameWithType: ActionBlock<TInput>.Completion
  fullName: ActionBlock<TInput>.Completion
- uid: System.Threading.Tasks.Dataflow.ActionBlock`1.InputCount
  parent: System.Threading.Tasks.Dataflow.ActionBlock`1
  isExternal: false
  name: InputCount
  nameWithType: ActionBlock<TInput>.InputCount
  fullName: ActionBlock<TInput>.InputCount
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Threading.Tasks.Dataflow.ActionBlock`1.Post(`0)
  parent: System.Threading.Tasks.Dataflow.ActionBlock`1
  isExternal: false
  name: Post(TInput)
  nameWithType: ActionBlock<TInput>.Post(TInput)
  fullName: ActionBlock<TInput>.Post(TInput)
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Threading.Tasks.Dataflow.ActionBlock`1.ToString
  parent: System.Threading.Tasks.Dataflow.ActionBlock`1
  isExternal: false
  name: ToString()
  nameWithType: ActionBlock<TInput>.ToString()
  fullName: ActionBlock<TInput>.ToString()
- uid: System.String
  parent: System
  isExternal: false
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Threading.Tasks.Dataflow.ActionBlock`1.System#Threading#Tasks#Dataflow#IDataflowBlock#Fault(System.Exception)
  parent: System.Threading.Tasks.Dataflow.ActionBlock`1
  isExternal: false
  name: IDataflowBlock.Fault(Exception)
  nameWithType: ActionBlock<TInput>.IDataflowBlock.Fault(Exception)
  fullName: ActionBlock<TInput>.IDataflowBlock.Fault(Exception)
- uid: System.Exception
  parent: System
  isExternal: false
  name: Exception
  nameWithType: Exception
  fullName: System.Exception
- uid: System.Threading.Tasks.Dataflow.ActionBlock`1.System#Threading#Tasks#Dataflow#ITargetBlock{TInput}#OfferMessage(System.Threading.Tasks.Dataflow.DataflowMessageHeader,`0,System.Threading.Tasks.Dataflow.ISourceBlock{`0},System.Boolean)
  parent: System.Threading.Tasks.Dataflow.ActionBlock`1
  isExternal: false
  name: ITargetBlock<TInput>.OfferMessage(DataflowMessageHeader, TInput, ISourceBlock<TInput>, Boolean)
  nameWithType: ActionBlock<TInput>.ITargetBlock<TInput>.OfferMessage(DataflowMessageHeader, TInput, ISourceBlock<TInput>, Boolean)
  fullName: ActionBlock<TInput>.ITargetBlock<TInput>.OfferMessage(DataflowMessageHeader, TInput, ISourceBlock<TInput>, Boolean)
- uid: System.Threading.Tasks.Dataflow.DataflowMessageStatus
  parent: System.Threading.Tasks.Dataflow
  isExternal: false
  name: DataflowMessageStatus
  nameWithType: DataflowMessageStatus
  fullName: System.Threading.Tasks.Dataflow.DataflowMessageStatus
- uid: System.Threading.Tasks.Dataflow.DataflowMessageHeader
  parent: System.Threading.Tasks.Dataflow
  isExternal: false
  name: DataflowMessageHeader
  nameWithType: DataflowMessageHeader
  fullName: System.Threading.Tasks.Dataflow.DataflowMessageHeader
- uid: System.Threading.Tasks.Dataflow.ISourceBlock`1
  name: ISourceBlock<TOutput>
  nameWithType: ISourceBlock<TOutput>
  fullName: System.Threading.Tasks.Dataflow.ISourceBlock<TOutput>
- uid: System.Threading.Tasks.Dataflow.ISourceBlock{TInput}
  parent: System.Threading.Tasks.Dataflow
  isExternal: false
  name: ISourceBlock<TInput>
  nameWithType: ISourceBlock<TInput>
  fullName: System.Threading.Tasks.Dataflow.ISourceBlock<TInput>
  spec.csharp:
  - uid: System.Threading.Tasks.Dataflow.ISourceBlock`1
    name: ISourceBlock
    nameWithType: ISourceBlock
    fullName: System.Threading.Tasks.Dataflow.ISourceBlock
  - name: <
    nameWithType: <
    fullName: <
  - uid: TInput
    name: TInput
    nameWithType: TInput
    fullName: TInput
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Threading.Tasks.Dataflow.ActionBlock`1.#ctor*
  parent: System.Threading.Tasks.Dataflow.ActionBlock`1
  isExternal: false
  name: ActionBlock<TInput>
  nameWithType: ActionBlock<TInput>.ActionBlock<TInput>
  fullName: ActionBlock<TInput>.ActionBlock<TInput>
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading.Tasks.Dataflow/ActionBlock`1.xml
- uid: System.Threading.Tasks.Dataflow.ActionBlock`1.Complete*
  parent: System.Threading.Tasks.Dataflow.ActionBlock`1
  isExternal: false
  name: Complete
  nameWithType: ActionBlock<TInput>.Complete
  fullName: ActionBlock<TInput>.Complete
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading.Tasks.Dataflow/ActionBlock`1.xml
- uid: System.Threading.Tasks.Dataflow.ActionBlock`1.Completion*
  parent: System.Threading.Tasks.Dataflow.ActionBlock`1
  isExternal: false
  name: Completion
  nameWithType: ActionBlock<TInput>.Completion
  fullName: ActionBlock<TInput>.Completion
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading.Tasks.Dataflow/ActionBlock`1.xml
- uid: System.Threading.Tasks.Dataflow.ActionBlock`1.InputCount*
  parent: System.Threading.Tasks.Dataflow.ActionBlock`1
  isExternal: false
  name: InputCount
  nameWithType: ActionBlock<TInput>.InputCount
  fullName: ActionBlock<TInput>.InputCount
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading.Tasks.Dataflow/ActionBlock`1.xml
- uid: System.Threading.Tasks.Dataflow.ActionBlock`1.Post*
  parent: System.Threading.Tasks.Dataflow.ActionBlock`1
  isExternal: false
  name: Post
  nameWithType: ActionBlock<TInput>.Post
  fullName: ActionBlock<TInput>.Post
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading.Tasks.Dataflow/ActionBlock`1.xml
- uid: System.Threading.Tasks.Dataflow.ActionBlock`1.ToString*
  parent: System.Threading.Tasks.Dataflow.ActionBlock`1
  isExternal: false
  name: ToString
  nameWithType: ActionBlock<TInput>.ToString
  fullName: ActionBlock<TInput>.ToString
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading.Tasks.Dataflow/ActionBlock`1.xml
- uid: System.Threading.Tasks.Dataflow.ActionBlock`1.System#Threading#Tasks#Dataflow#IDataflowBlock#Fault*
  parent: System.Threading.Tasks.Dataflow.ActionBlock`1
  isExternal: false
  name: System.Threading.Tasks.Dataflow.IDataflowBlock.Fault
  nameWithType: ActionBlock<TInput>.System.Threading.Tasks.Dataflow.IDataflowBlock.Fault
  fullName: ActionBlock<TInput>.System.Threading.Tasks.Dataflow.IDataflowBlock.Fault
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading.Tasks.Dataflow/ActionBlock`1.xml
- uid: System.Threading.Tasks.Dataflow.ActionBlock`1.System#Threading#Tasks#Dataflow#ITargetBlock{TInput}#OfferMessage*
  parent: System.Threading.Tasks.Dataflow.ActionBlock`1
  isExternal: false
  name: System.Threading.Tasks.Dataflow.ITargetBlock<TInput>.OfferMessage
  nameWithType: ActionBlock<TInput>.System.Threading.Tasks.Dataflow.ITargetBlock<TInput>.OfferMessage
  fullName: ActionBlock<TInput>.System.Threading.Tasks.Dataflow.ITargetBlock<TInput>.OfferMessage
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading.Tasks.Dataflow/ActionBlock`1.xml
- uid: System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: false
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: Object.Equals(Object)
- uid: System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: false
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: Object.Equals(Object, Object)
- uid: System.Object.GetHashCode
  parent: System.Object
  isExternal: false
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: Object.GetHashCode()
- uid: System.Object.GetType
  parent: System.Object
  isExternal: false
  name: GetType()
  nameWithType: Object.GetType()
  fullName: Object.GetType()
- uid: System.Object.MemberwiseClone
  parent: System.Object
  isExternal: false
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: Object.MemberwiseClone()
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: false
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: Object.ReferenceEquals(Object, Object)
- uid: System.Threading.Tasks.Dataflow.DataflowBlock.AsObserver``1(System.Threading.Tasks.Dataflow.ITargetBlock{``0})
  parent: System.Threading.Tasks.Dataflow.DataflowBlock
  isExternal: false
  name: AsObserver<TInput>(ITargetBlock<TInput>)
  nameWithType: DataflowBlock.AsObserver<TInput>(ITargetBlock<TInput>)
  fullName: DataflowBlock.AsObserver<TInput>(ITargetBlock<TInput>)
- uid: System.Threading.Tasks.Dataflow.DataflowBlock.Post``1(System.Threading.Tasks.Dataflow.ITargetBlock{``0},``0)
  parent: System.Threading.Tasks.Dataflow.DataflowBlock
  isExternal: false
  name: Post<TInput>(ITargetBlock<TInput>, TInput)
  nameWithType: DataflowBlock.Post<TInput>(ITargetBlock<TInput>, TInput)
  fullName: DataflowBlock.Post<TInput>(ITargetBlock<TInput>, TInput)
- uid: System.Threading.Tasks.Dataflow.DataflowBlock.SendAsync``1(System.Threading.Tasks.Dataflow.ITargetBlock{``0},``0)
  parent: System.Threading.Tasks.Dataflow.DataflowBlock
  isExternal: false
  name: SendAsync<TInput>(ITargetBlock<TInput>, TInput)
  nameWithType: DataflowBlock.SendAsync<TInput>(ITargetBlock<TInput>, TInput)
  fullName: DataflowBlock.SendAsync<TInput>(ITargetBlock<TInput>, TInput)
- uid: System.Threading.Tasks.Dataflow.DataflowBlock.SendAsync``1(System.Threading.Tasks.Dataflow.ITargetBlock{``0},``0,System.Threading.CancellationToken)
  parent: System.Threading.Tasks.Dataflow.DataflowBlock
  isExternal: false
  name: SendAsync<TInput>(ITargetBlock<TInput>, TInput, CancellationToken)
  nameWithType: DataflowBlock.SendAsync<TInput>(ITargetBlock<TInput>, TInput, CancellationToken)
  fullName: DataflowBlock.SendAsync<TInput>(ITargetBlock<TInput>, TInput, CancellationToken)
- uid: System.Threading.Tasks.Dataflow.ITargetBlock`1
  parent: System.Threading.Tasks.Dataflow
  isExternal: false
  name: ITargetBlock<TInput>
  nameWithType: ITargetBlock<TInput>
  fullName: System.Threading.Tasks.Dataflow.ITargetBlock<TInput>

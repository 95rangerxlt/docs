### YamlMime:ManagedReference
items:
- uid: System.Threading.Tasks.Dataflow.DataflowBlock
  commentId: T:System.Threading.Tasks.Dataflow.DataflowBlock
  id: DataflowBlock
  children:
  - System.Threading.Tasks.Dataflow.DataflowBlock.AsObservable``1(System.Threading.Tasks.Dataflow.ISourceBlock{``0})
  - System.Threading.Tasks.Dataflow.DataflowBlock.AsObserver``1(System.Threading.Tasks.Dataflow.ITargetBlock{``0})
  - System.Threading.Tasks.Dataflow.DataflowBlock.Choose``3(System.Threading.Tasks.Dataflow.ISourceBlock{``0},System.Action{``0},System.Threading.Tasks.Dataflow.ISourceBlock{``1},System.Action{``1},System.Threading.Tasks.Dataflow.ISourceBlock{``2},System.Action{``2})
  - System.Threading.Tasks.Dataflow.DataflowBlock.Choose``3(System.Threading.Tasks.Dataflow.ISourceBlock{``0},System.Action{``0},System.Threading.Tasks.Dataflow.ISourceBlock{``1},System.Action{``1},System.Threading.Tasks.Dataflow.ISourceBlock{``2},System.Action{``2},System.Threading.Tasks.Dataflow.DataflowBlockOptions)
  - System.Threading.Tasks.Dataflow.DataflowBlock.Choose``2(System.Threading.Tasks.Dataflow.ISourceBlock{``0},System.Action{``0},System.Threading.Tasks.Dataflow.ISourceBlock{``1},System.Action{``1})
  - System.Threading.Tasks.Dataflow.DataflowBlock.Choose``2(System.Threading.Tasks.Dataflow.ISourceBlock{``0},System.Action{``0},System.Threading.Tasks.Dataflow.ISourceBlock{``1},System.Action{``1},System.Threading.Tasks.Dataflow.DataflowBlockOptions)
  - System.Threading.Tasks.Dataflow.DataflowBlock.Encapsulate``2(System.Threading.Tasks.Dataflow.ITargetBlock{``0},System.Threading.Tasks.Dataflow.ISourceBlock{``1})
  - System.Threading.Tasks.Dataflow.DataflowBlock.LinkTo``1(System.Threading.Tasks.Dataflow.ISourceBlock{``0},System.Threading.Tasks.Dataflow.ITargetBlock{``0})
  - System.Threading.Tasks.Dataflow.DataflowBlock.LinkTo``1(System.Threading.Tasks.Dataflow.ISourceBlock{``0},System.Threading.Tasks.Dataflow.ITargetBlock{``0},System.Predicate{``0})
  - System.Threading.Tasks.Dataflow.DataflowBlock.LinkTo``1(System.Threading.Tasks.Dataflow.ISourceBlock{``0},System.Threading.Tasks.Dataflow.ITargetBlock{``0},System.Threading.Tasks.Dataflow.DataflowLinkOptions,System.Predicate{``0})
  - System.Threading.Tasks.Dataflow.DataflowBlock.NullTarget``1
  - System.Threading.Tasks.Dataflow.DataflowBlock.OutputAvailableAsync``1(System.Threading.Tasks.Dataflow.ISourceBlock{``0},System.Threading.CancellationToken)
  - System.Threading.Tasks.Dataflow.DataflowBlock.OutputAvailableAsync``1(System.Threading.Tasks.Dataflow.ISourceBlock{``0})
  - System.Threading.Tasks.Dataflow.DataflowBlock.Post``1(System.Threading.Tasks.Dataflow.ITargetBlock{``0},``0)
  - System.Threading.Tasks.Dataflow.DataflowBlock.Receive``1(System.Threading.Tasks.Dataflow.ISourceBlock{``0})
  - System.Threading.Tasks.Dataflow.DataflowBlock.Receive``1(System.Threading.Tasks.Dataflow.ISourceBlock{``0},System.Threading.CancellationToken)
  - System.Threading.Tasks.Dataflow.DataflowBlock.Receive``1(System.Threading.Tasks.Dataflow.ISourceBlock{``0},System.TimeSpan)
  - System.Threading.Tasks.Dataflow.DataflowBlock.Receive``1(System.Threading.Tasks.Dataflow.ISourceBlock{``0},System.TimeSpan,System.Threading.CancellationToken)
  - System.Threading.Tasks.Dataflow.DataflowBlock.ReceiveAsync``1(System.Threading.Tasks.Dataflow.ISourceBlock{``0})
  - System.Threading.Tasks.Dataflow.DataflowBlock.ReceiveAsync``1(System.Threading.Tasks.Dataflow.ISourceBlock{``0},System.Threading.CancellationToken)
  - System.Threading.Tasks.Dataflow.DataflowBlock.ReceiveAsync``1(System.Threading.Tasks.Dataflow.ISourceBlock{``0},System.TimeSpan)
  - System.Threading.Tasks.Dataflow.DataflowBlock.ReceiveAsync``1(System.Threading.Tasks.Dataflow.ISourceBlock{``0},System.TimeSpan,System.Threading.CancellationToken)
  - System.Threading.Tasks.Dataflow.DataflowBlock.SendAsync``1(System.Threading.Tasks.Dataflow.ITargetBlock{``0},``0,System.Threading.CancellationToken)
  - System.Threading.Tasks.Dataflow.DataflowBlock.SendAsync``1(System.Threading.Tasks.Dataflow.ITargetBlock{``0},``0)
  - System.Threading.Tasks.Dataflow.DataflowBlock.TryReceive``1(System.Threading.Tasks.Dataflow.IReceivableSourceBlock{``0},``0@)
  langs:
  - csharp
  name: DataflowBlock
  nameWithType: DataflowBlock
  fullName: System.Threading.Tasks.Dataflow.DataflowBlock
  type: Class
  assemblies:
  - System.Threading.Tasks.Dataflow
  namespace: System.Threading.Tasks.Dataflow
  summary: Provides a set of static (Shared in Visual Basic) methods for working with dataflow blocks.
  remarks: The TPL Dataflow Library (<xref:System.Threading.Tasks.Dataflow> namespace) is not distributed with the [!INCLUDE[net_v45](~/includes/net-v45-md.md)]. To install the <xref:System.Threading.Tasks.Dataflow> namespace, open your project in [!INCLUDE[vs_dev11_long](~/includes/vs-dev11-long-md.md)], choose **Manage NuGet Packages** from the Project menu, and search online for the `Microsoft.Tpl.Dataflow` package.
  syntax:
    content: public static class DataflowBlock
  inheritance:
  - System.Object
  implements: []
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading.Tasks.Dataflow/DataflowBlock.xml
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Threading.Tasks.Dataflow.DataflowBlock.AsObservable``1(System.Threading.Tasks.Dataflow.ISourceBlock{``0})
  commentId: M:System.Threading.Tasks.Dataflow.DataflowBlock.AsObservable``1(System.Threading.Tasks.Dataflow.ISourceBlock{``0})
  id: AsObservable``1(System.Threading.Tasks.Dataflow.ISourceBlock{``0})
  parent: System.Threading.Tasks.Dataflow.DataflowBlock
  langs:
  - csharp
  name: AsObservable<TOutput>(ISourceBlock<TOutput>)
  nameWithType: DataflowBlock.AsObservable<TOutput>(ISourceBlock<TOutput>)
  fullName: DataflowBlock.AsObservable<TOutput>(ISourceBlock<TOutput>)
  type: Method
  assemblies:
  - System.Threading.Tasks.Dataflow
  namespace: System.Threading.Tasks.Dataflow
  summary: Creates a new <xref href="System.IObservable`1"></xref> abstraction over the <xref href="System.Threading.Tasks.Dataflow.ISourceBlock`1"></xref>.
  syntax:
    content: public static IObservable<TOutput> AsObservable<TOutput> (this System.Threading.Tasks.Dataflow.ISourceBlock<TOutput> source);
    parameters:
    - id: source
      type: System.Threading.Tasks.Dataflow.ISourceBlock`1
      description: The source to wrap.
    typeParameters:
    - id: TOutput
      description: Specifies the type of data contained in the source.
    return:
      type: System.IObservable{TOutput}
      description: An <xref href="System.IObservable`1"></xref> that enables observers to be subscribed to the source.
  overload: System.Threading.Tasks.Dataflow.DataflowBlock.AsObservable``1*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: The <code>source</code> is `null`.
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading.Tasks.Dataflow/DataflowBlock.xml
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Threading.Tasks.Dataflow.DataflowBlock.AsObserver``1(System.Threading.Tasks.Dataflow.ITargetBlock{``0})
  commentId: M:System.Threading.Tasks.Dataflow.DataflowBlock.AsObserver``1(System.Threading.Tasks.Dataflow.ITargetBlock{``0})
  id: AsObserver``1(System.Threading.Tasks.Dataflow.ITargetBlock{``0})
  parent: System.Threading.Tasks.Dataflow.DataflowBlock
  langs:
  - csharp
  name: AsObserver<TInput>(ITargetBlock<TInput>)
  nameWithType: DataflowBlock.AsObserver<TInput>(ITargetBlock<TInput>)
  fullName: DataflowBlock.AsObserver<TInput>(ITargetBlock<TInput>)
  type: Method
  assemblies:
  - System.Threading.Tasks.Dataflow
  namespace: System.Threading.Tasks.Dataflow
  summary: Creates a new <xref href="System.IObserver`1"></xref> abstraction over the  <xref href="System.Threading.Tasks.Dataflow.ITargetBlock`1"></xref>.
  syntax:
    content: public static IObserver<TInput> AsObserver<TInput> (this System.Threading.Tasks.Dataflow.ITargetBlock<TInput> target);
    parameters:
    - id: target
      type: System.Threading.Tasks.Dataflow.ITargetBlock`1
      description: The target to wrap.
    typeParameters:
    - id: TInput
      description: Specifies the type of input accepted by the target block.
    return:
      type: System.IObserver{TInput}
      description: An observer that wraps the target block.
  overload: System.Threading.Tasks.Dataflow.DataflowBlock.AsObserver``1*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading.Tasks.Dataflow/DataflowBlock.xml
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Threading.Tasks.Dataflow.DataflowBlock.Choose``3(System.Threading.Tasks.Dataflow.ISourceBlock{``0},System.Action{``0},System.Threading.Tasks.Dataflow.ISourceBlock{``1},System.Action{``1},System.Threading.Tasks.Dataflow.ISourceBlock{``2},System.Action{``2})
  commentId: M:System.Threading.Tasks.Dataflow.DataflowBlock.Choose``3(System.Threading.Tasks.Dataflow.ISourceBlock{``0},System.Action{``0},System.Threading.Tasks.Dataflow.ISourceBlock{``1},System.Action{``1},System.Threading.Tasks.Dataflow.ISourceBlock{``2},System.Action{``2})
  id: Choose``3(System.Threading.Tasks.Dataflow.ISourceBlock{``0},System.Action{``0},System.Threading.Tasks.Dataflow.ISourceBlock{``1},System.Action{``1},System.Threading.Tasks.Dataflow.ISourceBlock{``2},System.Action{``2})
  parent: System.Threading.Tasks.Dataflow.DataflowBlock
  langs:
  - csharp
  name: Choose<T1,T2,T3>(ISourceBlock<T1>, Action<T1>, ISourceBlock<T2>, Action<T2>, ISourceBlock<T3>, Action<T3>)
  nameWithType: DataflowBlock.Choose<T1,T2,T3>(ISourceBlock<T1>, Action<T1>, ISourceBlock<T2>, Action<T2>, ISourceBlock<T3>, Action<T3>)
  fullName: DataflowBlock.Choose<T1,T2,T3>(ISourceBlock<T1>, Action<T1>, ISourceBlock<T2>, Action<T2>, ISourceBlock<T3>, Action<T3>)
  type: Method
  assemblies:
  - System.Threading.Tasks.Dataflow
  namespace: System.Threading.Tasks.Dataflow
  summary: Monitors three dataflow sources, invoking the provided handler for whichever source makes data available first.
  syntax:
    content: public static System.Threading.Tasks.Task<int> Choose<T1,T2,T3> (System.Threading.Tasks.Dataflow.ISourceBlock<T1> source1, Action<T1> action1, System.Threading.Tasks.Dataflow.ISourceBlock<T2> source2, Action<T2> action2, System.Threading.Tasks.Dataflow.ISourceBlock<T3> source3, Action<T3> action3);
    parameters:
    - id: source1
      type: System.Threading.Tasks.Dataflow.ISourceBlock{T1}
      description: The first source.
    - id: action1
      type: System.Action{T1}
      description: The handler to execute on data from the first source.
    - id: source2
      type: System.Threading.Tasks.Dataflow.ISourceBlock{T2}
      description: The second source.
    - id: action2
      type: System.Action{T2}
      description: The handler to execute on data from the second source.
    - id: source3
      type: System.Threading.Tasks.Dataflow.ISourceBlock{T3}
      description: The third source.
    - id: action3
      type: System.Action{T3}
      description: The handler to execute on data from the third source.
    typeParameters:
    - id: T1
      description: Specifies type of data contained in the first source.
    - id: T2
      description: Specifies type of data contained in the second source.
    - id: T3
      description: Specifies type of data contained in the third source.
    return:
      type: System.Threading.Tasks.Task{System.Int32}
      description: "A  <xref href=\"System.Threading.Tasks.Task`1\"></xref> that represents the asynchronous choice. If all sources are completed prior to the choice completing, the resulting task will be canceled. When one of the sources has data available and successfully propagates it to the choice, the resulting task will complete when the handler completes; if the handler throws an exception, the task will end in the <xref href=\"System.Threading.Tasks.TaskStatus.Faulted\"></xref> state and will contain the unhandled exception. Otherwise, the task will end with its <xref href=\"System.Threading.Tasks.Task`1.Result\"></xref> set to the 0-based index of the source.  \n  \n This method will only consume an element from one of the data sources, never more than one."
  overload: System.Threading.Tasks.Dataflow.DataflowBlock.Choose``3*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The <code>source1</code> is `null`.  \n  \n -or-  \n  \n The <code>action1</code> is `null`.  \n  \n -or-  \n  \n The <code>source2</code> is `null`.  \n  \n -or-  \n  \n The <code>action2</code> is `null`.  \n  \n -or-  \n  \n The <code>source3</code> is `null`.  \n  \n -or-  \n  \n The <code>action3</code> is `null`."
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading.Tasks.Dataflow/DataflowBlock.xml
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Threading.Tasks.Dataflow.DataflowBlock.Choose``3(System.Threading.Tasks.Dataflow.ISourceBlock{``0},System.Action{``0},System.Threading.Tasks.Dataflow.ISourceBlock{``1},System.Action{``1},System.Threading.Tasks.Dataflow.ISourceBlock{``2},System.Action{``2},System.Threading.Tasks.Dataflow.DataflowBlockOptions)
  commentId: M:System.Threading.Tasks.Dataflow.DataflowBlock.Choose``3(System.Threading.Tasks.Dataflow.ISourceBlock{``0},System.Action{``0},System.Threading.Tasks.Dataflow.ISourceBlock{``1},System.Action{``1},System.Threading.Tasks.Dataflow.ISourceBlock{``2},System.Action{``2},System.Threading.Tasks.Dataflow.DataflowBlockOptions)
  id: Choose``3(System.Threading.Tasks.Dataflow.ISourceBlock{``0},System.Action{``0},System.Threading.Tasks.Dataflow.ISourceBlock{``1},System.Action{``1},System.Threading.Tasks.Dataflow.ISourceBlock{``2},System.Action{``2},System.Threading.Tasks.Dataflow.DataflowBlockOptions)
  parent: System.Threading.Tasks.Dataflow.DataflowBlock
  langs:
  - csharp
  name: Choose<T1,T2,T3>(ISourceBlock<T1>, Action<T1>, ISourceBlock<T2>, Action<T2>, ISourceBlock<T3>, Action<T3>, DataflowBlockOptions)
  nameWithType: DataflowBlock.Choose<T1,T2,T3>(ISourceBlock<T1>, Action<T1>, ISourceBlock<T2>, Action<T2>, ISourceBlock<T3>, Action<T3>, DataflowBlockOptions)
  fullName: DataflowBlock.Choose<T1,T2,T3>(ISourceBlock<T1>, Action<T1>, ISourceBlock<T2>, Action<T2>, ISourceBlock<T3>, Action<T3>, DataflowBlockOptions)
  type: Method
  assemblies:
  - System.Threading.Tasks.Dataflow
  namespace: System.Threading.Tasks.Dataflow
  summary: Monitors three dataflow sources, invoking the provided handler for whichever source makes data available first.
  syntax:
    content: public static System.Threading.Tasks.Task<int> Choose<T1,T2,T3> (System.Threading.Tasks.Dataflow.ISourceBlock<T1> source1, Action<T1> action1, System.Threading.Tasks.Dataflow.ISourceBlock<T2> source2, Action<T2> action2, System.Threading.Tasks.Dataflow.ISourceBlock<T3> source3, Action<T3> action3, System.Threading.Tasks.Dataflow.DataflowBlockOptions dataflowBlockOptions);
    parameters:
    - id: source1
      type: System.Threading.Tasks.Dataflow.ISourceBlock{T1}
      description: The first source.
    - id: action1
      type: System.Action{T1}
      description: The handler to execute on data from the first source.
    - id: source2
      type: System.Threading.Tasks.Dataflow.ISourceBlock{T2}
      description: The second source.
    - id: action2
      type: System.Action{T2}
      description: The handler to execute on data from the second source.
    - id: source3
      type: System.Threading.Tasks.Dataflow.ISourceBlock{T3}
      description: The third source.
    - id: action3
      type: System.Action{T3}
      description: The handler to execute on data from the third source.
    - id: dataflowBlockOptions
      type: System.Threading.Tasks.Dataflow.DataflowBlockOptions
      description: The options with which to configure this choice.
    typeParameters:
    - id: T1
      description: Specifies type of data contained in the first source.
    - id: T2
      description: Specifies type of data contained in the second source.
    - id: T3
      description: Specifies type of data contained in the third source.
    return:
      type: System.Threading.Tasks.Task{System.Int32}
      description: "A  <xref href=\"System.Threading.Tasks.Task`1\"></xref> that represents the asynchronous choice. If all sources are completed prior to the choice completing, or if the <xref href=\"System.Threading.CancellationToken\"></xref> provided as part of <code>dataflowBlockOptions</code> is canceled prior to the choice completing, the resulting task will be canceled. When one of the sources has data available and successfully propagates it to the choice, the resulting task will complete when the handler completes; if the handler throws an exception, the task will end in the <xref href=\"System.Threading.Tasks.TaskStatus.Faulted\"></xref> state and will contain the unhandled exception. Otherwise, the task will end with its <xref href=\"System.Threading.Tasks.Task`1.Result\"></xref> set to the 0-based index of the source.  \n  \n This method will only consume an element from one of the data sources, never more than one. If cancellation is requested after an element has been received, the cancellation request will be ignored, and the relevant handler will be allowed to execute."
  overload: System.Threading.Tasks.Dataflow.DataflowBlock.Choose``3*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The <code>source1</code> is `null`.  \n  \n -or-  \n  \n The <code>action1</code> is `null`.  \n  \n -or-  \n  \n The <code>source2</code> is `null`.  \n  \n -or-  \n  \n The <code>action2</code> is `null`.  \n  \n -or-  \n  \n The <code>source3</code> is `null`.  \n  \n -or-  \n  \n The <code>action3</code> is `null`.  \n  \n -or-  \n  \n The <code>dataflowBlockOptions</code> is `null`."
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading.Tasks.Dataflow/DataflowBlock.xml
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Threading.Tasks.Dataflow.DataflowBlock.Choose``2(System.Threading.Tasks.Dataflow.ISourceBlock{``0},System.Action{``0},System.Threading.Tasks.Dataflow.ISourceBlock{``1},System.Action{``1})
  commentId: M:System.Threading.Tasks.Dataflow.DataflowBlock.Choose``2(System.Threading.Tasks.Dataflow.ISourceBlock{``0},System.Action{``0},System.Threading.Tasks.Dataflow.ISourceBlock{``1},System.Action{``1})
  id: Choose``2(System.Threading.Tasks.Dataflow.ISourceBlock{``0},System.Action{``0},System.Threading.Tasks.Dataflow.ISourceBlock{``1},System.Action{``1})
  parent: System.Threading.Tasks.Dataflow.DataflowBlock
  langs:
  - csharp
  name: Choose<T1,T2>(ISourceBlock<T1>, Action<T1>, ISourceBlock<T2>, Action<T2>)
  nameWithType: DataflowBlock.Choose<T1,T2>(ISourceBlock<T1>, Action<T1>, ISourceBlock<T2>, Action<T2>)
  fullName: DataflowBlock.Choose<T1,T2>(ISourceBlock<T1>, Action<T1>, ISourceBlock<T2>, Action<T2>)
  type: Method
  assemblies:
  - System.Threading.Tasks.Dataflow
  namespace: System.Threading.Tasks.Dataflow
  summary: Monitors two dataflow sources, invoking the provided handler for whichever source makes data available first.
  syntax:
    content: public static System.Threading.Tasks.Task<int> Choose<T1,T2> (System.Threading.Tasks.Dataflow.ISourceBlock<T1> source1, Action<T1> action1, System.Threading.Tasks.Dataflow.ISourceBlock<T2> source2, Action<T2> action2);
    parameters:
    - id: source1
      type: System.Threading.Tasks.Dataflow.ISourceBlock{T1}
      description: The first source.
    - id: action1
      type: System.Action{T1}
      description: The handler to execute on data from the first source.
    - id: source2
      type: System.Threading.Tasks.Dataflow.ISourceBlock{T2}
      description: The second source.
    - id: action2
      type: System.Action{T2}
      description: The handler to execute on data from the second source.
    typeParameters:
    - id: T1
      description: Specifies type of data contained in the first source.
    - id: T2
      description: Specifies type of data contained in the second source.
    return:
      type: System.Threading.Tasks.Task{System.Int32}
      description: "A  <xref href=\"System.Threading.Tasks.Task`1\"></xref> that represents the asynchronous choice. If both sources are completed prior to the choice completing, the resulting task will be canceled. When one of the sources has data available and successfully propagates it to the choice, the resulting task will complete when the handler completes; if the handler throws an exception, the task will end in the <xref href=\"System.Threading.Tasks.TaskStatus.Faulted\"></xref> state and will contain the unhandled exception. Otherwise, the task will end with its <xref href=\"System.Threading.Tasks.Task`1.Result\"></xref> set to either 0 or 1 to represent the first or second source, respectively.  \n  \n This method will only consume an element from one of the two data sources, never both."
  overload: System.Threading.Tasks.Dataflow.DataflowBlock.Choose``2*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The <code>source1</code> is `null`.  \n  \n -or-  \n  \n The  <code>action1</code> is `null`.  \n  \n -or-  \n  \n The <code>source2</code> is `null`.  \n  \n -or-  \n  \n The <code>action2</code> is `null`."
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading.Tasks.Dataflow/DataflowBlock.xml
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Threading.Tasks.Dataflow.DataflowBlock.Choose``2(System.Threading.Tasks.Dataflow.ISourceBlock{``0},System.Action{``0},System.Threading.Tasks.Dataflow.ISourceBlock{``1},System.Action{``1},System.Threading.Tasks.Dataflow.DataflowBlockOptions)
  commentId: M:System.Threading.Tasks.Dataflow.DataflowBlock.Choose``2(System.Threading.Tasks.Dataflow.ISourceBlock{``0},System.Action{``0},System.Threading.Tasks.Dataflow.ISourceBlock{``1},System.Action{``1},System.Threading.Tasks.Dataflow.DataflowBlockOptions)
  id: Choose``2(System.Threading.Tasks.Dataflow.ISourceBlock{``0},System.Action{``0},System.Threading.Tasks.Dataflow.ISourceBlock{``1},System.Action{``1},System.Threading.Tasks.Dataflow.DataflowBlockOptions)
  parent: System.Threading.Tasks.Dataflow.DataflowBlock
  langs:
  - csharp
  name: Choose<T1,T2>(ISourceBlock<T1>, Action<T1>, ISourceBlock<T2>, Action<T2>, DataflowBlockOptions)
  nameWithType: DataflowBlock.Choose<T1,T2>(ISourceBlock<T1>, Action<T1>, ISourceBlock<T2>, Action<T2>, DataflowBlockOptions)
  fullName: DataflowBlock.Choose<T1,T2>(ISourceBlock<T1>, Action<T1>, ISourceBlock<T2>, Action<T2>, DataflowBlockOptions)
  type: Method
  assemblies:
  - System.Threading.Tasks.Dataflow
  namespace: System.Threading.Tasks.Dataflow
  summary: Monitors two dataflow sources, invoking the provided handler for whichever source makes data available first.
  syntax:
    content: public static System.Threading.Tasks.Task<int> Choose<T1,T2> (System.Threading.Tasks.Dataflow.ISourceBlock<T1> source1, Action<T1> action1, System.Threading.Tasks.Dataflow.ISourceBlock<T2> source2, Action<T2> action2, System.Threading.Tasks.Dataflow.DataflowBlockOptions dataflowBlockOptions);
    parameters:
    - id: source1
      type: System.Threading.Tasks.Dataflow.ISourceBlock{T1}
      description: The first source.
    - id: action1
      type: System.Action{T1}
      description: The handler to execute on data from the first source.
    - id: source2
      type: System.Threading.Tasks.Dataflow.ISourceBlock{T2}
      description: The second source.
    - id: action2
      type: System.Action{T2}
      description: The handler to execute on data from the second source.
    - id: dataflowBlockOptions
      type: System.Threading.Tasks.Dataflow.DataflowBlockOptions
      description: The options with which to configure this choice.
    typeParameters:
    - id: T1
      description: Specifies type of data contained in the first source.
    - id: T2
      description: Specifies type of data contained in the second source.
    return:
      type: System.Threading.Tasks.Task{System.Int32}
      description: A  <xref href="System.Threading.Tasks.Task`1"></xref> that represents the asynchronous choice. If both sources are completed prior to the choice completing, or if the <xref href="System.Threading.CancellationToken"></xref> provided as part of <code>dataflowBlockOptions</code> is canceled prior to the choice completing, the resulting task will be canceled. When one of the sources has data available and successfully propagates it to the choice, the resulting task will complete when the handler completes; if the handler throws an exception, the task will end in the <xref href="System.Threading.Tasks.TaskStatus.Faulted"></xref> state and will contain the unhandled exception. Otherwise, the task will end with its <xref href="System.Threading.Tasks.Task`1.Result"></xref> set to either 0 or 1 to represent the first or second source, respectively.
  overload: System.Threading.Tasks.Dataflow.DataflowBlock.Choose``2*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The <code>source1</code> is `null`.  \n  \n -or-  \n  \n The <code>action1</code> is `null`.  \n  \n -or-  \n  \n The <code>source2</code> is `null`.  \n  \n -or-  \n  \n The <code>action2</code> is `null`.  \n  \n -or-  \n  \n The <code>dataflowBlockOptions</code> is `null`."
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading.Tasks.Dataflow/DataflowBlock.xml
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Threading.Tasks.Dataflow.DataflowBlock.Encapsulate``2(System.Threading.Tasks.Dataflow.ITargetBlock{``0},System.Threading.Tasks.Dataflow.ISourceBlock{``1})
  commentId: M:System.Threading.Tasks.Dataflow.DataflowBlock.Encapsulate``2(System.Threading.Tasks.Dataflow.ITargetBlock{``0},System.Threading.Tasks.Dataflow.ISourceBlock{``1})
  id: Encapsulate``2(System.Threading.Tasks.Dataflow.ITargetBlock{``0},System.Threading.Tasks.Dataflow.ISourceBlock{``1})
  parent: System.Threading.Tasks.Dataflow.DataflowBlock
  langs:
  - csharp
  name: Encapsulate<TInput,TOutput>(ITargetBlock<TInput>, ISourceBlock<TOutput>)
  nameWithType: DataflowBlock.Encapsulate<TInput,TOutput>(ITargetBlock<TInput>, ISourceBlock<TOutput>)
  fullName: DataflowBlock.Encapsulate<TInput,TOutput>(ITargetBlock<TInput>, ISourceBlock<TOutput>)
  type: Method
  assemblies:
  - System.Threading.Tasks.Dataflow
  namespace: System.Threading.Tasks.Dataflow
  summary: Encapsulates a target and a source into a single propagator.
  remarks: "The <xref:System.Threading.Tasks.Dataflow.DataflowBlock.Encapsulate%2A> method requires two existing blocks: a target block (an instance of a class that implements <xref:System.Threading.Tasks.Dataflow.ITargetBlock%601>) and a source block (an instance of a class that implements <xref:System.Threading.Tasks.Dataflow.ISourceBlock%601>). <xref:System.Threading.Tasks.Dataflow.DataflowBlock.Encapsulate%2A> creates a new instance of an internal class that connects the <xref:System.Threading.Tasks.Dataflow.ITargetBlock%601> interface members to the `target` parameter and the <xref:System.Threading.Tasks.Dataflow.ISourceBlock%601> interface members to the `source` parameter.  Both <xref:System.Threading.Tasks.Dataflow.ITargetBlock%601> and <xref:System.Threading.Tasks.Dataflow.ISourceBlock%601> derive from <xref:System.Threading.Tasks.Dataflow.IDataflowBlock>. Block completion is explicitly passed from sources to targets. Therefore, the <xref:System.Threading.Tasks.Dataflow.IDataflowBlock.Complete%2A> and <xref:System.Threading.Tasks.Dataflow.IDataflowBlock.Fault%2A> methods are connected to the target while the <xref:System.Threading.Tasks.Dataflow.IDataflowBlock.Completion%2A> property is connected to the source.  You must ensure that when the target half  completes, the source half gets completed in the most appropriate manner; for example:  \n  \n `target.Completion.ContinueWith(completion => source.Complete());`  \n  \n Or, if you want to propagate the completion type, you can use this more sophisticated code:  \n  \n```  \ntarget.Completion.ContinueWith(completion => { if (completion.IsFaulted) 3   \n  \n((IDataflowBlock)batchBlock).Fault(completion.Exception);   \nelse   \nbatchBlock.Complete();   \n});  \n  \n```  \n  \n You must also explicitly provide the message propagation from target to source. The benefit of this explicit connection is that it gives you the freedom to perform any unconstrained processing between the two encapsulated blocks. You may do that either by encoding the necessary processing into the blocks' delegates (if the blocks take delegates), or by embedding a sub-network of blocks between them. The easier way is to use a block that takes delegates; for example, use <xref:System.Threading.Tasks.Dataflow.ActionBlock%601>, <xref:System.Threading.Tasks.Dataflow.TransformBlock%602>, <xref:System.Threading.Tasks.Dataflow.TransformManyBlock%602> (if applicable), or a custom block."
  syntax:
    content: public static System.Threading.Tasks.Dataflow.IPropagatorBlock<TInput,TOutput> Encapsulate<TInput,TOutput> (System.Threading.Tasks.Dataflow.ITargetBlock<TInput> target, System.Threading.Tasks.Dataflow.ISourceBlock<TOutput> source);
    parameters:
    - id: target
      type: System.Threading.Tasks.Dataflow.ITargetBlock`1
      description: The target to encapsulate.
    - id: source
      type: System.Threading.Tasks.Dataflow.ISourceBlock`1
      description: The source to encapsulate.
    typeParameters:
    - id: TInput
      description: Specifies the type of input expected by the target.
    - id: TOutput
      description: Specifies the type of output produced by the source.
    return:
      type: System.Threading.Tasks.Dataflow.IPropagatorBlock`2
      description: The encapsulated target and source.
  overload: System.Threading.Tasks.Dataflow.DataflowBlock.Encapsulate``2*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading.Tasks.Dataflow/DataflowBlock.xml
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Threading.Tasks.Dataflow.DataflowBlock.LinkTo``1(System.Threading.Tasks.Dataflow.ISourceBlock{``0},System.Threading.Tasks.Dataflow.ITargetBlock{``0})
  commentId: M:System.Threading.Tasks.Dataflow.DataflowBlock.LinkTo``1(System.Threading.Tasks.Dataflow.ISourceBlock{``0},System.Threading.Tasks.Dataflow.ITargetBlock{``0})
  id: LinkTo``1(System.Threading.Tasks.Dataflow.ISourceBlock{``0},System.Threading.Tasks.Dataflow.ITargetBlock{``0})
  parent: System.Threading.Tasks.Dataflow.DataflowBlock
  langs:
  - csharp
  name: LinkTo<TOutput>(ISourceBlock<TOutput>, ITargetBlock<TOutput>)
  nameWithType: DataflowBlock.LinkTo<TOutput>(ISourceBlock<TOutput>, ITargetBlock<TOutput>)
  fullName: DataflowBlock.LinkTo<TOutput>(ISourceBlock<TOutput>, ITargetBlock<TOutput>)
  type: Method
  assemblies:
  - System.Threading.Tasks.Dataflow
  namespace: System.Threading.Tasks.Dataflow
  summary: Links the <xref href="System.Threading.Tasks.Dataflow.ISourceBlock`1"></xref> to the specified  <xref href="System.Threading.Tasks.Dataflow.ITargetBlock`1"></xref>.
  syntax:
    content: public static IDisposable LinkTo<TOutput> (this System.Threading.Tasks.Dataflow.ISourceBlock<TOutput> source, System.Threading.Tasks.Dataflow.ITargetBlock<TOutput> target);
    parameters:
    - id: source
      type: System.Threading.Tasks.Dataflow.ISourceBlock`1
      description: The source from which to link.
    - id: target
      type: System.Threading.Tasks.Dataflow.ITargetBlock{TOutput}
      description: The <xref href="System.Threading.Tasks.Dataflow.ITargetBlock`1"></xref> to which to connect the source.
    typeParameters:
    - id: TOutput
      description: Specifies the type of data contained in the source.
    return:
      type: System.IDisposable
      description: An <xref href="System.IDisposable"></xref> that, upon calling `Dispose`, will unlink the source from the target.
  overload: System.Threading.Tasks.Dataflow.DataflowBlock.LinkTo``1*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The <code>source</code> is `null`.  \n  \n -or-  \n  \n The <code>target</code> is `null`."
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading.Tasks.Dataflow/DataflowBlock.xml
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Threading.Tasks.Dataflow.DataflowBlock.LinkTo``1(System.Threading.Tasks.Dataflow.ISourceBlock{``0},System.Threading.Tasks.Dataflow.ITargetBlock{``0},System.Predicate{``0})
  commentId: M:System.Threading.Tasks.Dataflow.DataflowBlock.LinkTo``1(System.Threading.Tasks.Dataflow.ISourceBlock{``0},System.Threading.Tasks.Dataflow.ITargetBlock{``0},System.Predicate{``0})
  id: LinkTo``1(System.Threading.Tasks.Dataflow.ISourceBlock{``0},System.Threading.Tasks.Dataflow.ITargetBlock{``0},System.Predicate{``0})
  parent: System.Threading.Tasks.Dataflow.DataflowBlock
  langs:
  - csharp
  name: LinkTo<TOutput>(ISourceBlock<TOutput>, ITargetBlock<TOutput>, Predicate<TOutput>)
  nameWithType: DataflowBlock.LinkTo<TOutput>(ISourceBlock<TOutput>, ITargetBlock<TOutput>, Predicate<TOutput>)
  fullName: DataflowBlock.LinkTo<TOutput>(ISourceBlock<TOutput>, ITargetBlock<TOutput>, Predicate<TOutput>)
  type: Method
  assemblies:
  - System.Threading.Tasks.Dataflow
  namespace: System.Threading.Tasks.Dataflow
  summary: Links the <xref href="System.Threading.Tasks.Dataflow.ISourceBlock`1"></xref> to the specified  <xref href="System.Threading.Tasks.Dataflow.ITargetBlock`1"></xref> using the specified filter.
  syntax:
    content: public static IDisposable LinkTo<TOutput> (this System.Threading.Tasks.Dataflow.ISourceBlock<TOutput> source, System.Threading.Tasks.Dataflow.ITargetBlock<TOutput> target, Predicate<TOutput> predicate);
    parameters:
    - id: source
      type: System.Threading.Tasks.Dataflow.ISourceBlock`1
      description: The source from which to link.
    - id: target
      type: System.Threading.Tasks.Dataflow.ITargetBlock{TOutput}
      description: The  <xref href="System.Threading.Tasks.Dataflow.ITargetBlock`1"></xref> to which to connect the source.
    - id: predicate
      type: System.Predicate{TOutput}
      description: The filter a message must pass in order for it to propagate from the source to the target.
    typeParameters:
    - id: TOutput
      description: Specifies the type of data contained in the source.
    return:
      type: System.IDisposable
      description: An <xref href="System.IDisposable"></xref> that, upon calling `Dispose`, will unlink the source from the target.
  overload: System.Threading.Tasks.Dataflow.DataflowBlock.LinkTo``1*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The <code>source</code> is `null`.  \n  \n -or-  \n  \n The <code>target</code> is `null`.  \n  \n -or-  \n  \n The <code>predicate</code> is `null`."
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading.Tasks.Dataflow/DataflowBlock.xml
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Threading.Tasks.Dataflow.DataflowBlock.LinkTo``1(System.Threading.Tasks.Dataflow.ISourceBlock{``0},System.Threading.Tasks.Dataflow.ITargetBlock{``0},System.Threading.Tasks.Dataflow.DataflowLinkOptions,System.Predicate{``0})
  commentId: M:System.Threading.Tasks.Dataflow.DataflowBlock.LinkTo``1(System.Threading.Tasks.Dataflow.ISourceBlock{``0},System.Threading.Tasks.Dataflow.ITargetBlock{``0},System.Threading.Tasks.Dataflow.DataflowLinkOptions,System.Predicate{``0})
  id: LinkTo``1(System.Threading.Tasks.Dataflow.ISourceBlock{``0},System.Threading.Tasks.Dataflow.ITargetBlock{``0},System.Threading.Tasks.Dataflow.DataflowLinkOptions,System.Predicate{``0})
  parent: System.Threading.Tasks.Dataflow.DataflowBlock
  langs:
  - csharp
  name: LinkTo<TOutput>(ISourceBlock<TOutput>, ITargetBlock<TOutput>, DataflowLinkOptions, Predicate<TOutput>)
  nameWithType: DataflowBlock.LinkTo<TOutput>(ISourceBlock<TOutput>, ITargetBlock<TOutput>, DataflowLinkOptions, Predicate<TOutput>)
  fullName: DataflowBlock.LinkTo<TOutput>(ISourceBlock<TOutput>, ITargetBlock<TOutput>, DataflowLinkOptions, Predicate<TOutput>)
  type: Method
  assemblies:
  - System.Threading.Tasks.Dataflow
  namespace: System.Threading.Tasks.Dataflow
  summary: Links the  <xref href="System.Threading.Tasks.Dataflow.ISourceBlock`1"></xref> to the specified  <xref href="System.Threading.Tasks.Dataflow.ITargetBlock`1"></xref> using the specified filter.
  syntax:
    content: public static IDisposable LinkTo<TOutput> (this System.Threading.Tasks.Dataflow.ISourceBlock<TOutput> source, System.Threading.Tasks.Dataflow.ITargetBlock<TOutput> target, System.Threading.Tasks.Dataflow.DataflowLinkOptions linkOptions, Predicate<TOutput> predicate);
    parameters:
    - id: source
      type: System.Threading.Tasks.Dataflow.ISourceBlock`1
      description: The source from which to link.
    - id: target
      type: System.Threading.Tasks.Dataflow.ITargetBlock{TOutput}
      description: The  <xref href="System.Threading.Tasks.Dataflow.ITargetBlock`1"></xref> to which to connect the source.
    - id: linkOptions
      type: System.Threading.Tasks.Dataflow.DataflowLinkOptions
      description: One of the enumeration values that specifies how to configure a link between dataflow blocks.
    - id: predicate
      type: System.Predicate{TOutput}
      description: The filter a message must pass in order for it to propagate from the source to the target.
    typeParameters:
    - id: TOutput
      description: Specifies the type of data contained in the source.
    return:
      type: System.IDisposable
      description: An <xref href="System.IDisposable"></xref> that, upon calling `Dispose`, will unlink the source from the target.
  overload: System.Threading.Tasks.Dataflow.DataflowBlock.LinkTo``1*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: "The  <code>source</code> is null (Nothing in Visual Basic).  \n  \n -or-  \n  \n The  <code>target</code> is null (Nothing in Visual Basic).  \n  \n -or-  \n  \n The  <code>linkOptions</code> is null (Nothing in Visual Basic).  \n  \n -or-  \n  \n The  <code>predicate</code> is null (Nothing in Visual Basic)."
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading.Tasks.Dataflow/DataflowBlock.xml
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Threading.Tasks.Dataflow.DataflowBlock.NullTarget``1
  commentId: M:System.Threading.Tasks.Dataflow.DataflowBlock.NullTarget``1
  id: NullTarget``1
  parent: System.Threading.Tasks.Dataflow.DataflowBlock
  langs:
  - csharp
  name: NullTarget<TInput>()
  nameWithType: DataflowBlock.NullTarget<TInput>()
  fullName: DataflowBlock.NullTarget<TInput>()
  type: Method
  assemblies:
  - System.Threading.Tasks.Dataflow
  namespace: System.Threading.Tasks.Dataflow
  summary: Gets a target block that synchronously accepts all messages offered to it and drops them.
  syntax:
    content: public static System.Threading.Tasks.Dataflow.ITargetBlock<TInput> NullTarget<TInput> ();
    parameters: []
    typeParameters:
    - id: TInput
      description: The type of the messages this block can accept.
    return:
      type: System.Threading.Tasks.Dataflow.ITargetBlock`1
      description: A <xref href="System.Threading.Tasks.Dataflow.ITargetBlock`1"></xref> that accepts and subsequently drops all offered messages.
  overload: System.Threading.Tasks.Dataflow.DataflowBlock.NullTarget``1*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading.Tasks.Dataflow/DataflowBlock.xml
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Threading.Tasks.Dataflow.DataflowBlock.OutputAvailableAsync``1(System.Threading.Tasks.Dataflow.ISourceBlock{``0},System.Threading.CancellationToken)
  commentId: M:System.Threading.Tasks.Dataflow.DataflowBlock.OutputAvailableAsync``1(System.Threading.Tasks.Dataflow.ISourceBlock{``0},System.Threading.CancellationToken)
  id: OutputAvailableAsync``1(System.Threading.Tasks.Dataflow.ISourceBlock{``0},System.Threading.CancellationToken)
  parent: System.Threading.Tasks.Dataflow.DataflowBlock
  langs:
  - csharp
  name: OutputAvailableAsync<TOutput>(ISourceBlock<TOutput>, CancellationToken)
  nameWithType: DataflowBlock.OutputAvailableAsync<TOutput>(ISourceBlock<TOutput>, CancellationToken)
  fullName: DataflowBlock.OutputAvailableAsync<TOutput>(ISourceBlock<TOutput>, CancellationToken)
  type: Method
  assemblies:
  - System.Threading.Tasks.Dataflow
  namespace: System.Threading.Tasks.Dataflow
  summary: Provides a  <xref href="System.Threading.Tasks.Task`1"></xref> that asynchronously monitors the source for available output.
  syntax:
    content: public static System.Threading.Tasks.Task<bool> OutputAvailableAsync<TOutput> (this System.Threading.Tasks.Dataflow.ISourceBlock<TOutput> source, System.Threading.CancellationToken cancellationToken);
    parameters:
    - id: source
      type: System.Threading.Tasks.Dataflow.ISourceBlock`1
      description: The source to monitor.
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: The cancellation token with which to cancel the asynchronous operation.
    typeParameters:
    - id: TOutput
      description: Specifies the type of data contained in the source.
    return:
      type: System.Threading.Tasks.Task{System.Boolean}
      description: A <xref href="System.Threading.Tasks.Task`1"></xref> that informs of whether and when more output is available. If, when the task completes, its <xref href="System.Threading.Tasks.Task`1.Result"></xref> is `true`, more output is available in the source (though another consumer of the source may retrieve the data). If it returns `false`, more output is not and will never be available, due to the source completing prior to output being available. If it returns false, more output is not and will never be available, due to the source completing prior to output being available.
  overload: System.Threading.Tasks.Dataflow.DataflowBlock.OutputAvailableAsync``1*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading.Tasks.Dataflow/DataflowBlock.xml
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Threading.Tasks.Dataflow.DataflowBlock.OutputAvailableAsync``1(System.Threading.Tasks.Dataflow.ISourceBlock{``0})
  commentId: M:System.Threading.Tasks.Dataflow.DataflowBlock.OutputAvailableAsync``1(System.Threading.Tasks.Dataflow.ISourceBlock{``0})
  id: OutputAvailableAsync``1(System.Threading.Tasks.Dataflow.ISourceBlock{``0})
  parent: System.Threading.Tasks.Dataflow.DataflowBlock
  langs:
  - csharp
  name: OutputAvailableAsync<TOutput>(ISourceBlock<TOutput>)
  nameWithType: DataflowBlock.OutputAvailableAsync<TOutput>(ISourceBlock<TOutput>)
  fullName: DataflowBlock.OutputAvailableAsync<TOutput>(ISourceBlock<TOutput>)
  type: Method
  assemblies:
  - System.Threading.Tasks.Dataflow
  namespace: System.Threading.Tasks.Dataflow
  summary: Provides a <xref href="System.Threading.Tasks.Task`1"></xref> that asynchronously monitors the source for available output.
  syntax:
    content: public static System.Threading.Tasks.Task<bool> OutputAvailableAsync<TOutput> (this System.Threading.Tasks.Dataflow.ISourceBlock<TOutput> source);
    parameters:
    - id: source
      type: System.Threading.Tasks.Dataflow.ISourceBlock`1
      description: The source to monitor.
    typeParameters:
    - id: TOutput
      description: Specifies the type of data contained in the source.
    return:
      type: System.Threading.Tasks.Task{System.Boolean}
      description: "A <xref href=\"System.Threading.Tasks.Task`1\"></xref> that informs of whether and when more output is available. If, when the task completes, its <xref href=\"System.Threading.Tasks.Task`1.Result\"></xref> is `true`, more output is available in the source (though another consumer of the source may retrieve the data).  \n  \n If it returns `false`, more output is not and will never be available, due to the source completing prior to output being available."
  overload: System.Threading.Tasks.Dataflow.DataflowBlock.OutputAvailableAsync``1*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading.Tasks.Dataflow/DataflowBlock.xml
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Threading.Tasks.Dataflow.DataflowBlock.Post``1(System.Threading.Tasks.Dataflow.ITargetBlock{``0},``0)
  commentId: M:System.Threading.Tasks.Dataflow.DataflowBlock.Post``1(System.Threading.Tasks.Dataflow.ITargetBlock{``0},``0)
  id: Post``1(System.Threading.Tasks.Dataflow.ITargetBlock{``0},``0)
  parent: System.Threading.Tasks.Dataflow.DataflowBlock
  langs:
  - csharp
  name: Post<TInput>(ITargetBlock<TInput>, TInput)
  nameWithType: DataflowBlock.Post<TInput>(ITargetBlock<TInput>, TInput)
  fullName: DataflowBlock.Post<TInput>(ITargetBlock<TInput>, TInput)
  type: Method
  assemblies:
  - System.Threading.Tasks.Dataflow
  namespace: System.Threading.Tasks.Dataflow
  summary: Posts an item to the <xref href="System.Threading.Tasks.Dataflow.ITargetBlock`1"></xref>.
  remarks: This method will return once the target block has decided to accept or decline the item, but unless otherwise dictated by special semantics of the target block, it does not wait for the item to actually be processed. For example, <xref:System.Threading.Tasks.Dataflow.ActionBlock%601> will return from <xref:System.Threading.Tasks.Dataflow.DataflowBlock.Post%2A> as soon as it has stored the posted item into its input queue). From the perspective of the block's processing, `Post` is asynchronous. For target blocks that support postponing offered messages, or for blocks that may do more processing in their `Post` implementation, consider using <xref:System.Threading.Tasks.Dataflow.DataflowBlock.SendAsync%2A>, which will return immediately and will enable the target to postpone the posted message and later consume it after `SendAsync` returns.
  syntax:
    content: public static bool Post<TInput> (this System.Threading.Tasks.Dataflow.ITargetBlock<TInput> target, TInput item);
    parameters:
    - id: target
      type: System.Threading.Tasks.Dataflow.ITargetBlock`1
      description: The target block.
    - id: item
      type: TInput
      description: The item being offered to the target.
    typeParameters:
    - id: TInput
      description: Specifies the type of data accepted by the target block.
    return:
      type: System.Boolean
      description: '`true` if the item was accepted by the target block; otherwise, `false`.'
  overload: System.Threading.Tasks.Dataflow.DataflowBlock.Post``1*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading.Tasks.Dataflow/DataflowBlock.xml
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Threading.Tasks.Dataflow.DataflowBlock.Receive``1(System.Threading.Tasks.Dataflow.ISourceBlock{``0})
  commentId: M:System.Threading.Tasks.Dataflow.DataflowBlock.Receive``1(System.Threading.Tasks.Dataflow.ISourceBlock{``0})
  id: Receive``1(System.Threading.Tasks.Dataflow.ISourceBlock{``0})
  parent: System.Threading.Tasks.Dataflow.DataflowBlock
  langs:
  - csharp
  name: Receive<TOutput>(ISourceBlock<TOutput>)
  nameWithType: DataflowBlock.Receive<TOutput>(ISourceBlock<TOutput>)
  fullName: DataflowBlock.Receive<TOutput>(ISourceBlock<TOutput>)
  type: Method
  assemblies:
  - System.Threading.Tasks.Dataflow
  namespace: System.Threading.Tasks.Dataflow
  summary: Synchronously receives a value from a specified source.
  syntax:
    content: public static TOutput Receive<TOutput> (this System.Threading.Tasks.Dataflow.ISourceBlock<TOutput> source);
    parameters:
    - id: source
      type: System.Threading.Tasks.Dataflow.ISourceBlock`1
      description: The source from which to receive the value.
    typeParameters:
    - id: TOutput
      description: The type of data contained in the source.
    return:
      type: TOutput
      description: The received value.
  overload: System.Threading.Tasks.Dataflow.DataflowBlock.Receive``1*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>source</code> is `null`.
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: No item could be received from the source.
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading.Tasks.Dataflow/DataflowBlock.xml
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Threading.Tasks.Dataflow.DataflowBlock.Receive``1(System.Threading.Tasks.Dataflow.ISourceBlock{``0},System.Threading.CancellationToken)
  commentId: M:System.Threading.Tasks.Dataflow.DataflowBlock.Receive``1(System.Threading.Tasks.Dataflow.ISourceBlock{``0},System.Threading.CancellationToken)
  id: Receive``1(System.Threading.Tasks.Dataflow.ISourceBlock{``0},System.Threading.CancellationToken)
  parent: System.Threading.Tasks.Dataflow.DataflowBlock
  langs:
  - csharp
  name: Receive<TOutput>(ISourceBlock<TOutput>, CancellationToken)
  nameWithType: DataflowBlock.Receive<TOutput>(ISourceBlock<TOutput>, CancellationToken)
  fullName: DataflowBlock.Receive<TOutput>(ISourceBlock<TOutput>, CancellationToken)
  type: Method
  assemblies:
  - System.Threading.Tasks.Dataflow
  namespace: System.Threading.Tasks.Dataflow
  summary: Synchronously receives a value from a specified source and provides a token to cancel the operation.
  remarks: If the source successfully offered an item that was received by this operation, that item is returned even if a concurrent cancellation request occurs.
  syntax:
    content: public static TOutput Receive<TOutput> (this System.Threading.Tasks.Dataflow.ISourceBlock<TOutput> source, System.Threading.CancellationToken cancellationToken);
    parameters:
    - id: source
      type: System.Threading.Tasks.Dataflow.ISourceBlock`1
      description: The source from which to receive the value.
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: The token to use to cancel the receive operation.
    typeParameters:
    - id: TOutput
      description: The type of data contained in the source.
    return:
      type: TOutput
      description: The received value.
  overload: System.Threading.Tasks.Dataflow.DataflowBlock.Receive``1*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>source</code> is `null`.
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: No item could be received from the source.
  - type: System.OperationCanceledException
    commentId: T:System.OperationCanceledException
    description: The operation was canceled before an item was received from the source.
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading.Tasks.Dataflow/DataflowBlock.xml
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Threading.Tasks.Dataflow.DataflowBlock.Receive``1(System.Threading.Tasks.Dataflow.ISourceBlock{``0},System.TimeSpan)
  commentId: M:System.Threading.Tasks.Dataflow.DataflowBlock.Receive``1(System.Threading.Tasks.Dataflow.ISourceBlock{``0},System.TimeSpan)
  id: Receive``1(System.Threading.Tasks.Dataflow.ISourceBlock{``0},System.TimeSpan)
  parent: System.Threading.Tasks.Dataflow.DataflowBlock
  langs:
  - csharp
  name: Receive<TOutput>(ISourceBlock<TOutput>, TimeSpan)
  nameWithType: DataflowBlock.Receive<TOutput>(ISourceBlock<TOutput>, TimeSpan)
  fullName: DataflowBlock.Receive<TOutput>(ISourceBlock<TOutput>, TimeSpan)
  type: Method
  assemblies:
  - System.Threading.Tasks.Dataflow
  namespace: System.Threading.Tasks.Dataflow
  summary: Synchronously receives a value from a specified source, observing an optional time-out period.
  remarks: If the source successfully offered an item that was received by this operation, that item is returned even if a concurrent time-out occurs.
  syntax:
    content: public static TOutput Receive<TOutput> (this System.Threading.Tasks.Dataflow.ISourceBlock<TOutput> source, TimeSpan timeout);
    parameters:
    - id: source
      type: System.Threading.Tasks.Dataflow.ISourceBlock`1
      description: The source from which to receive the value.
    - id: timeout
      type: System.TimeSpan
      description: The maximum time interval, in milliseconds, to wait for the synchronous operation to complete, or an interval that represents -1 milliseconds to wait indefinitely.
    typeParameters:
    - id: TOutput
      description: The type of data contained in the source.
    return:
      type: TOutput
      description: The received value.
  overload: System.Threading.Tasks.Dataflow.DataflowBlock.Receive``1*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>timeout</code> is a negative number other than -1 milliseconds, which represents an infinite time-out period.  \n  \n -or-  \n  \n <code>timeout</code> is greater than <xref href=\"System.Int32.MaxValue\"></xref>."
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>source</code> is `null`.
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: No item could be received from the source.
  - type: System.TimeoutException
    commentId: T:System.TimeoutException
    description: The specified time-out expired before an item was received from the source.
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading.Tasks.Dataflow/DataflowBlock.xml
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Threading.Tasks.Dataflow.DataflowBlock.Receive``1(System.Threading.Tasks.Dataflow.ISourceBlock{``0},System.TimeSpan,System.Threading.CancellationToken)
  commentId: M:System.Threading.Tasks.Dataflow.DataflowBlock.Receive``1(System.Threading.Tasks.Dataflow.ISourceBlock{``0},System.TimeSpan,System.Threading.CancellationToken)
  id: Receive``1(System.Threading.Tasks.Dataflow.ISourceBlock{``0},System.TimeSpan,System.Threading.CancellationToken)
  parent: System.Threading.Tasks.Dataflow.DataflowBlock
  langs:
  - csharp
  name: Receive<TOutput>(ISourceBlock<TOutput>, TimeSpan, CancellationToken)
  nameWithType: DataflowBlock.Receive<TOutput>(ISourceBlock<TOutput>, TimeSpan, CancellationToken)
  fullName: DataflowBlock.Receive<TOutput>(ISourceBlock<TOutput>, TimeSpan, CancellationToken)
  type: Method
  assemblies:
  - System.Threading.Tasks.Dataflow
  namespace: System.Threading.Tasks.Dataflow
  summary: Synchronously receives a value from a specified source, providing a token to cancel the operation and observing an optional time-out interval.
  remarks: If the source successfully offered an item value that was received by this operation, that value is returned even if a concurrent time-out or cancellation request occurs.
  syntax:
    content: public static TOutput Receive<TOutput> (this System.Threading.Tasks.Dataflow.ISourceBlock<TOutput> source, TimeSpan timeout, System.Threading.CancellationToken cancellationToken);
    parameters:
    - id: source
      type: System.Threading.Tasks.Dataflow.ISourceBlock`1
      description: The source from which to receive the value.
    - id: timeout
      type: System.TimeSpan
      description: The maximum time interval, in milliseconds, to wait for the synchronous operation to complete, or an interval that represents -1 milliseconds to wait indefinitely.
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: The token to use to cancel the receive operation.
    typeParameters:
    - id: TOutput
      description: The type of data contained in the source.
    return:
      type: TOutput
      description: The received value.
  overload: System.Threading.Tasks.Dataflow.DataflowBlock.Receive``1*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: The <code>source</code> is `null`.
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>timeout</code> is a negative number other than -1 milliseconds, which represents an infinite time-out period.  \n  \n -or-  \n  \n <code>timeout</code> is greater than <xref href=\"System.Int32.MaxValue\"></xref>."
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: No item could be received from the source.
  - type: System.TimeoutException
    commentId: T:System.TimeoutException
    description: The specified time-out expired before an item was received from the source.
  - type: System.OperationCanceledException
    commentId: T:System.OperationCanceledException
    description: The operation was canceled before an item was received from the source.
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading.Tasks.Dataflow/DataflowBlock.xml
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Threading.Tasks.Dataflow.DataflowBlock.ReceiveAsync``1(System.Threading.Tasks.Dataflow.ISourceBlock{``0})
  commentId: M:System.Threading.Tasks.Dataflow.DataflowBlock.ReceiveAsync``1(System.Threading.Tasks.Dataflow.ISourceBlock{``0})
  id: ReceiveAsync``1(System.Threading.Tasks.Dataflow.ISourceBlock{``0})
  parent: System.Threading.Tasks.Dataflow.DataflowBlock
  langs:
  - csharp
  name: ReceiveAsync<TOutput>(ISourceBlock<TOutput>)
  nameWithType: DataflowBlock.ReceiveAsync<TOutput>(ISourceBlock<TOutput>)
  fullName: DataflowBlock.ReceiveAsync<TOutput>(ISourceBlock<TOutput>)
  type: Method
  assemblies:
  - System.Threading.Tasks.Dataflow
  namespace: System.Threading.Tasks.Dataflow
  summary: Asynchronously receives a value from a specified source.
  syntax:
    content: public static System.Threading.Tasks.Task<TOutput> ReceiveAsync<TOutput> (this System.Threading.Tasks.Dataflow.ISourceBlock<TOutput> source);
    parameters:
    - id: source
      type: System.Threading.Tasks.Dataflow.ISourceBlock`1
      description: The source from which to receive the value.
    typeParameters:
    - id: TOutput
      description: The type of data contained in the source.
    return:
      type: System.Threading.Tasks.Task{TOutput}
      description: A task that represents the asynchronous receive operation. When an item value is successfully received from the source, the returned task is completed and its <xref href="System.Threading.Tasks.Task`1.Result"></xref> returns the received value. If an item value cannot be retrieved because the source is empty and completed , an <xref href="System.InvalidOperationException"></xref> exception is thrown in the returned task.
  overload: System.Threading.Tasks.Dataflow.DataflowBlock.ReceiveAsync``1*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>source</code> is `null`.
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading.Tasks.Dataflow/DataflowBlock.xml
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Threading.Tasks.Dataflow.DataflowBlock.ReceiveAsync``1(System.Threading.Tasks.Dataflow.ISourceBlock{``0},System.Threading.CancellationToken)
  commentId: M:System.Threading.Tasks.Dataflow.DataflowBlock.ReceiveAsync``1(System.Threading.Tasks.Dataflow.ISourceBlock{``0},System.Threading.CancellationToken)
  id: ReceiveAsync``1(System.Threading.Tasks.Dataflow.ISourceBlock{``0},System.Threading.CancellationToken)
  parent: System.Threading.Tasks.Dataflow.DataflowBlock
  langs:
  - csharp
  name: ReceiveAsync<TOutput>(ISourceBlock<TOutput>, CancellationToken)
  nameWithType: DataflowBlock.ReceiveAsync<TOutput>(ISourceBlock<TOutput>, CancellationToken)
  fullName: DataflowBlock.ReceiveAsync<TOutput>(ISourceBlock<TOutput>, CancellationToken)
  type: Method
  assemblies:
  - System.Threading.Tasks.Dataflow
  namespace: System.Threading.Tasks.Dataflow
  summary: Asynchronously receives a value from a specified source and provides a token to cancel the operation.
  syntax:
    content: public static System.Threading.Tasks.Task<TOutput> ReceiveAsync<TOutput> (this System.Threading.Tasks.Dataflow.ISourceBlock<TOutput> source, System.Threading.CancellationToken cancellationToken);
    parameters:
    - id: source
      type: System.Threading.Tasks.Dataflow.ISourceBlock`1
      description: The source from which to receive the value.
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: The token to use to cancel the receive operation.
    typeParameters:
    - id: TOutput
      description: Specifies the type of data contained in the source.
    return:
      type: System.Threading.Tasks.Task{TOutput}
      description: A task that represents the asynchronous receive operation. When a value is successfully received from the source, the returned task is completed and its <xref href="System.Threading.Tasks.Task`1.Result"></xref> returns the value. If a value cannot be retrieved because cancellation was requested, the returned task is canceled. If the value cannot be retrieved because the source is empty and completed , an <xref href="System.InvalidOperationException"></xref> exception is thrown in the returned task.
  overload: System.Threading.Tasks.Dataflow.DataflowBlock.ReceiveAsync``1*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>source</code> is `null`.
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading.Tasks.Dataflow/DataflowBlock.xml
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Threading.Tasks.Dataflow.DataflowBlock.ReceiveAsync``1(System.Threading.Tasks.Dataflow.ISourceBlock{``0},System.TimeSpan)
  commentId: M:System.Threading.Tasks.Dataflow.DataflowBlock.ReceiveAsync``1(System.Threading.Tasks.Dataflow.ISourceBlock{``0},System.TimeSpan)
  id: ReceiveAsync``1(System.Threading.Tasks.Dataflow.ISourceBlock{``0},System.TimeSpan)
  parent: System.Threading.Tasks.Dataflow.DataflowBlock
  langs:
  - csharp
  name: ReceiveAsync<TOutput>(ISourceBlock<TOutput>, TimeSpan)
  nameWithType: DataflowBlock.ReceiveAsync<TOutput>(ISourceBlock<TOutput>, TimeSpan)
  fullName: DataflowBlock.ReceiveAsync<TOutput>(ISourceBlock<TOutput>, TimeSpan)
  type: Method
  assemblies:
  - System.Threading.Tasks.Dataflow
  namespace: System.Threading.Tasks.Dataflow
  summary: Asynchronously receives a value from a specified source, observing an optional time-out period.
  syntax:
    content: public static System.Threading.Tasks.Task<TOutput> ReceiveAsync<TOutput> (this System.Threading.Tasks.Dataflow.ISourceBlock<TOutput> source, TimeSpan timeout);
    parameters:
    - id: source
      type: System.Threading.Tasks.Dataflow.ISourceBlock`1
      description: The source from which to receive the value.
    - id: timeout
      type: System.TimeSpan
      description: The maximum time interval, in milliseconds, to wait for the synchronous operation to complete, or an interval that represents -1 milliseconds to wait indefinitely.
    typeParameters:
    - id: TOutput
      description: The type of data contained in the source.
    return:
      type: System.Threading.Tasks.Task{TOutput}
      description: A task that represents the asynchronous receive operation. When a value is successfully received from the source, the returned task is completed and its <xref href="System.Threading.Tasks.Task`1.Result"></xref> returns the value. If a value cannot be retrieved because the time-out expired, the returned task is canceled. If the value cannot be retrieved because the source is empty and completed , an <xref href="System.InvalidOperationException"></xref> exception is thrown in the returned task.
  overload: System.Threading.Tasks.Dataflow.DataflowBlock.ReceiveAsync``1*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>source</code> is `null`.
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>timeout</code> is a negative number other than -1 milliseconds, which represents an infinite time-out period.  \n  \n -or-  \n  \n <code>timeout</code> is greater than <xref href=\"System.Int32.MaxValue\"></xref>."
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading.Tasks.Dataflow/DataflowBlock.xml
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Threading.Tasks.Dataflow.DataflowBlock.ReceiveAsync``1(System.Threading.Tasks.Dataflow.ISourceBlock{``0},System.TimeSpan,System.Threading.CancellationToken)
  commentId: M:System.Threading.Tasks.Dataflow.DataflowBlock.ReceiveAsync``1(System.Threading.Tasks.Dataflow.ISourceBlock{``0},System.TimeSpan,System.Threading.CancellationToken)
  id: ReceiveAsync``1(System.Threading.Tasks.Dataflow.ISourceBlock{``0},System.TimeSpan,System.Threading.CancellationToken)
  parent: System.Threading.Tasks.Dataflow.DataflowBlock
  langs:
  - csharp
  name: ReceiveAsync<TOutput>(ISourceBlock<TOutput>, TimeSpan, CancellationToken)
  nameWithType: DataflowBlock.ReceiveAsync<TOutput>(ISourceBlock<TOutput>, TimeSpan, CancellationToken)
  fullName: DataflowBlock.ReceiveAsync<TOutput>(ISourceBlock<TOutput>, TimeSpan, CancellationToken)
  type: Method
  assemblies:
  - System.Threading.Tasks.Dataflow
  namespace: System.Threading.Tasks.Dataflow
  summary: Asynchronously receives a value from a specified source, providing a token to cancel the operation and observing an optional time-out interval.
  syntax:
    content: public static System.Threading.Tasks.Task<TOutput> ReceiveAsync<TOutput> (this System.Threading.Tasks.Dataflow.ISourceBlock<TOutput> source, TimeSpan timeout, System.Threading.CancellationToken cancellationToken);
    parameters:
    - id: source
      type: System.Threading.Tasks.Dataflow.ISourceBlock`1
      description: The source from which to receive the value.
    - id: timeout
      type: System.TimeSpan
      description: The maximum time interval, in milliseconds, to wait for the synchronous operation to complete, or an interval that represents -1 milliseconds to wait indefinitely.
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: The token which may be used to cancel the receive operation.
    typeParameters:
    - id: TOutput
      description: The type of data contained in the source.
    return:
      type: System.Threading.Tasks.Task{TOutput}
      description: A task that represents the asynchronous receive operation. When a value is successfully received from the source, the returned task is completed and its <xref href="System.Threading.Tasks.Task`1.Result"></xref> returns the value. If a value cannot be retrieved because the time-out expired or cancellation was requested, the returned task is canceled. If the value cannot be retrieved because the source is empty and completed, an <xref href="System.InvalidOperationException"></xref> exception is thrown in the returned task.
  overload: System.Threading.Tasks.Dataflow.DataflowBlock.ReceiveAsync``1*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>source</code> is `null`.
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: "<code>timeout</code> is a negative number other than -1 milliseconds, which represents an infinite time-out period.  \n  \n -or-  \n  \n <code>timeout</code> is greater than <xref href=\"System.Int32.MaxValue\"></xref>."
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading.Tasks.Dataflow/DataflowBlock.xml
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Threading.Tasks.Dataflow.DataflowBlock.SendAsync``1(System.Threading.Tasks.Dataflow.ITargetBlock{``0},``0,System.Threading.CancellationToken)
  commentId: M:System.Threading.Tasks.Dataflow.DataflowBlock.SendAsync``1(System.Threading.Tasks.Dataflow.ITargetBlock{``0},``0,System.Threading.CancellationToken)
  id: SendAsync``1(System.Threading.Tasks.Dataflow.ITargetBlock{``0},``0,System.Threading.CancellationToken)
  parent: System.Threading.Tasks.Dataflow.DataflowBlock
  langs:
  - csharp
  name: SendAsync<TInput>(ITargetBlock<TInput>, TInput, CancellationToken)
  nameWithType: DataflowBlock.SendAsync<TInput>(ITargetBlock<TInput>, TInput, CancellationToken)
  fullName: DataflowBlock.SendAsync<TInput>(ITargetBlock<TInput>, TInput, CancellationToken)
  type: Method
  assemblies:
  - System.Threading.Tasks.Dataflow
  namespace: System.Threading.Tasks.Dataflow
  summary: Asynchronously offers a message to the target message block, allowing for postponement.
  syntax:
    content: public static System.Threading.Tasks.Task<bool> SendAsync<TInput> (this System.Threading.Tasks.Dataflow.ITargetBlock<TInput> target, TInput item, System.Threading.CancellationToken cancellationToken);
    parameters:
    - id: target
      type: System.Threading.Tasks.Dataflow.ITargetBlock`1
      description: The target to which to post the data.
    - id: item
      type: TInput
      description: The item being offered to the target.
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: The cancellation token with which to request cancellation of the send operation.
    typeParameters:
    - id: TInput
      description: Specifies the type of the data to post to the target.
    return:
      type: System.Threading.Tasks.Task{System.Boolean}
      description: "A <xref href=\"System.Threading.Tasks.Task`1\"></xref> that represents the asynchronous send.  If the target accepts and consumes the offered element during the call to SendAsync, upon return from the call the resulting <xref href=\"System.Threading.Tasks.Task`1\"></xref> will be completed and its <code>Result</code> property will return true.  If the target declines the offered element during the call, upon return from the call the resulting <xref href=\"System.Threading.Tasks.Task`1\"></xref> will be completed and its <code>Result</code> property will return false. If the target postpones the offered element, the element will be buffered until such time that the target consumes or releases it, at which point the Task will complete, with its <code>Result</code> indicating whether the message was consumed. If the target never attempts to consume or release the message, the returned task will never complete.  \n  \n If cancellation is requested before the target has successfully consumed the sent data, the returned task will complete in the Canceled state and the data will no longer be available to the target."
  overload: System.Threading.Tasks.Dataflow.DataflowBlock.SendAsync``1*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: The  <code>target</code> is null (Nothing in Visual Basic).
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading.Tasks.Dataflow/DataflowBlock.xml
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Threading.Tasks.Dataflow.DataflowBlock.SendAsync``1(System.Threading.Tasks.Dataflow.ITargetBlock{``0},``0)
  commentId: M:System.Threading.Tasks.Dataflow.DataflowBlock.SendAsync``1(System.Threading.Tasks.Dataflow.ITargetBlock{``0},``0)
  id: SendAsync``1(System.Threading.Tasks.Dataflow.ITargetBlock{``0},``0)
  parent: System.Threading.Tasks.Dataflow.DataflowBlock
  langs:
  - csharp
  name: SendAsync<TInput>(ITargetBlock<TInput>, TInput)
  nameWithType: DataflowBlock.SendAsync<TInput>(ITargetBlock<TInput>, TInput)
  fullName: DataflowBlock.SendAsync<TInput>(ITargetBlock<TInput>, TInput)
  type: Method
  assemblies:
  - System.Threading.Tasks.Dataflow
  namespace: System.Threading.Tasks.Dataflow
  summary: Asynchronously offers a message to the target message block, allowing for postponement.
  syntax:
    content: public static System.Threading.Tasks.Task<bool> SendAsync<TInput> (this System.Threading.Tasks.Dataflow.ITargetBlock<TInput> target, TInput item);
    parameters:
    - id: target
      type: System.Threading.Tasks.Dataflow.ITargetBlock`1
      description: The target to which to post the data.
    - id: item
      type: TInput
      description: The item being offered to the target.
    typeParameters:
    - id: TInput
      description: Specifies the type of the data to post to the target.
    return:
      type: System.Threading.Tasks.Task{System.Boolean}
      description: A <xref href="System.Threading.Tasks.Task`1"></xref> that represents the asynchronous send. If the target accepts and consumes the offered element during the call to <xref href="System.Threading.Tasks.Dataflow.DataflowBlock.SendAsync``1(System.Threading.Tasks.Dataflow.ITargetBlock{``0},``0)"></xref>, upon return from the call the resulting <xref href="System.Threading.Tasks.Task`1"></xref> will be completed and its <xref href="System.Threading.Tasks.Task`1.Result"></xref> property will return `true`. If the target declines the offered element during the call, upon return from the call the resulting <xref href="System.Threading.Tasks.Task`1"></xref> will be completed and its <xref href="System.Threading.Tasks.Task`1.Result"></xref> property will return `false`. If the target postpones the offered element, the element will be buffered until such time that the target consumes or releases it, at which point the task will complete, with its <xref href="System.Threading.Tasks.Task`1.Result"></xref> indicating whether the message was consumed. If the target never attempts to consume or release the message, the returned task will never complete.
  overload: System.Threading.Tasks.Dataflow.DataflowBlock.SendAsync``1*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: The <code>target</code> is `null`.
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading.Tasks.Dataflow/DataflowBlock.xml
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Threading.Tasks.Dataflow.DataflowBlock.TryReceive``1(System.Threading.Tasks.Dataflow.IReceivableSourceBlock{``0},``0@)
  commentId: M:System.Threading.Tasks.Dataflow.DataflowBlock.TryReceive``1(System.Threading.Tasks.Dataflow.IReceivableSourceBlock{``0},``0@)
  id: TryReceive``1(System.Threading.Tasks.Dataflow.IReceivableSourceBlock{``0},``0@)
  parent: System.Threading.Tasks.Dataflow.DataflowBlock
  langs:
  - csharp
  name: TryReceive<TOutput>(IReceivableSourceBlock<TOutput>, TOutput)
  nameWithType: DataflowBlock.TryReceive<TOutput>(IReceivableSourceBlock<TOutput>, TOutput)
  fullName: DataflowBlock.TryReceive<TOutput>(IReceivableSourceBlock<TOutput>, TOutput)
  type: Method
  assemblies:
  - System.Threading.Tasks.Dataflow
  namespace: System.Threading.Tasks.Dataflow
  summary: Attempts to synchronously receive an item from the <xref href="System.Threading.Tasks.Dataflow.ISourceBlock`1"></xref>.
  remarks: "This method does not wait until the source has an item to provide.  \n  \n It will return whether or not an element was available."
  syntax:
    content: public static bool TryReceive<TOutput> (this System.Threading.Tasks.Dataflow.IReceivableSourceBlock<TOutput> source, out TOutput item);
    parameters:
    - id: source
      type: System.Threading.Tasks.Dataflow.IReceivableSourceBlock`1
      description: The source from which to receive.
    - id: item
      type: TOutput
      description: The item received from the source.
    typeParameters:
    - id: TOutput
      description: Specifies the type of data contained in the source.
    return:
      type: System.Boolean
      description: '`true` if an item could be received; otherwise, `false`.'
  overload: System.Threading.Tasks.Dataflow.DataflowBlock.TryReceive``1*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading.Tasks.Dataflow/DataflowBlock.xml
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
references:
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.ArgumentNullException
  parent: System
  isExternal: false
  name: ArgumentNullException
  nameWithType: ArgumentNullException
  fullName: System.ArgumentNullException
- uid: System.InvalidOperationException
  parent: System
  isExternal: false
  name: InvalidOperationException
  nameWithType: InvalidOperationException
  fullName: System.InvalidOperationException
- uid: System.OperationCanceledException
  parent: System
  isExternal: false
  name: OperationCanceledException
  nameWithType: OperationCanceledException
  fullName: System.OperationCanceledException
- uid: System.ArgumentOutOfRangeException
  parent: System
  isExternal: false
  name: ArgumentOutOfRangeException
  nameWithType: ArgumentOutOfRangeException
  fullName: System.ArgumentOutOfRangeException
- uid: System.TimeoutException
  parent: System
  isExternal: false
  name: TimeoutException
  nameWithType: TimeoutException
  fullName: System.TimeoutException
- uid: System.Threading.Tasks.Dataflow.DataflowBlock.AsObservable``1(System.Threading.Tasks.Dataflow.ISourceBlock{``0})
  parent: System.Threading.Tasks.Dataflow.DataflowBlock
  isExternal: false
  name: AsObservable<TOutput>(ISourceBlock<TOutput>)
  nameWithType: DataflowBlock.AsObservable<TOutput>(ISourceBlock<TOutput>)
  fullName: DataflowBlock.AsObservable<TOutput>(ISourceBlock<TOutput>)
- uid: System.IObservable`1
  name: IObservable<T>
  nameWithType: IObservable<T>
  fullName: System.IObservable<T>
- uid: TOutput
  name: TOutput
  nameWithType: TOutput
  fullName: TOutput
- uid: System.IObservable{TOutput}
  parent: System
  isExternal: false
  name: IObservable<TOutput>
  nameWithType: IObservable<TOutput>
  fullName: System.IObservable<TOutput>
  spec.csharp:
  - uid: System.IObservable`1
    name: IObservable
    nameWithType: IObservable
    fullName: System.IObservable
  - name: <
    nameWithType: <
    fullName: <
  - uid: TOutput
    name: TOutput
    nameWithType: TOutput
    fullName: TOutput
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Threading.Tasks.Dataflow.ISourceBlock`1
  parent: System.Threading.Tasks.Dataflow
  isExternal: false
  name: ISourceBlock<TOutput>
  nameWithType: ISourceBlock<TOutput>
  fullName: System.Threading.Tasks.Dataflow.ISourceBlock<TOutput>
- uid: System.Threading.Tasks.Dataflow.DataflowBlock.AsObserver``1(System.Threading.Tasks.Dataflow.ITargetBlock{``0})
  parent: System.Threading.Tasks.Dataflow.DataflowBlock
  isExternal: false
  name: AsObserver<TInput>(ITargetBlock<TInput>)
  nameWithType: DataflowBlock.AsObserver<TInput>(ITargetBlock<TInput>)
  fullName: DataflowBlock.AsObserver<TInput>(ITargetBlock<TInput>)
- uid: System.IObserver`1
  name: IObserver<T>
  nameWithType: IObserver<T>
  fullName: System.IObserver<T>
- uid: TInput
  name: TInput
  nameWithType: TInput
  fullName: TInput
- uid: System.IObserver{TInput}
  parent: System
  isExternal: false
  name: IObserver<TInput>
  nameWithType: IObserver<TInput>
  fullName: System.IObserver<TInput>
  spec.csharp:
  - uid: System.IObserver`1
    name: IObserver
    nameWithType: IObserver
    fullName: System.IObserver
  - name: <
    nameWithType: <
    fullName: <
  - uid: TInput
    name: TInput
    nameWithType: TInput
    fullName: TInput
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Threading.Tasks.Dataflow.ITargetBlock`1
  parent: System.Threading.Tasks.Dataflow
  isExternal: false
  name: ITargetBlock<TInput>
  nameWithType: ITargetBlock<TInput>
  fullName: System.Threading.Tasks.Dataflow.ITargetBlock<TInput>
- uid: System.Threading.Tasks.Dataflow.DataflowBlock.Choose``3(System.Threading.Tasks.Dataflow.ISourceBlock{``0},System.Action{``0},System.Threading.Tasks.Dataflow.ISourceBlock{``1},System.Action{``1},System.Threading.Tasks.Dataflow.ISourceBlock{``2},System.Action{``2})
  parent: System.Threading.Tasks.Dataflow.DataflowBlock
  isExternal: false
  name: Choose<T1,T2,T3>(ISourceBlock<T1>, Action<T1>, ISourceBlock<T2>, Action<T2>, ISourceBlock<T3>, Action<T3>)
  nameWithType: DataflowBlock.Choose<T1,T2,T3>(ISourceBlock<T1>, Action<T1>, ISourceBlock<T2>, Action<T2>, ISourceBlock<T3>, Action<T3>)
  fullName: DataflowBlock.Choose<T1,T2,T3>(ISourceBlock<T1>, Action<T1>, ISourceBlock<T2>, Action<T2>, ISourceBlock<T3>, Action<T3>)
- uid: System.Threading.Tasks.Task`1
  name: Task<TResult>
  nameWithType: Task<TResult>
  fullName: System.Threading.Tasks.Task<TResult>
- uid: System.Int32
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Threading.Tasks.Task{System.Int32}
  parent: System.Threading.Tasks
  isExternal: false
  name: Task<Int32>
  nameWithType: Task<Int32>
  fullName: System.Threading.Tasks.Task<System.Int32>
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: T1
  name: T1
  nameWithType: T1
  fullName: T1
- uid: System.Threading.Tasks.Dataflow.ISourceBlock{T1}
  parent: System.Threading.Tasks.Dataflow
  isExternal: false
  name: ISourceBlock<T1>
  nameWithType: ISourceBlock<T1>
  fullName: System.Threading.Tasks.Dataflow.ISourceBlock<T1>
  spec.csharp:
  - uid: System.Threading.Tasks.Dataflow.ISourceBlock`1
    name: ISourceBlock
    nameWithType: ISourceBlock
    fullName: System.Threading.Tasks.Dataflow.ISourceBlock
  - name: <
    nameWithType: <
    fullName: <
  - uid: T1
    name: T1
    nameWithType: T1
    fullName: T1
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Action`1
  name: Action<T>
  nameWithType: Action<T>
  fullName: System.Action<T>
- uid: System.Action{T1}
  parent: System
  isExternal: false
  name: Action<T1>
  nameWithType: Action<T1>
  fullName: System.Action<T1>
  spec.csharp:
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
  - name: <
    nameWithType: <
    fullName: <
  - uid: T1
    name: T1
    nameWithType: T1
    fullName: T1
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: T2
  name: T2
  nameWithType: T2
  fullName: T2
- uid: System.Threading.Tasks.Dataflow.ISourceBlock{T2}
  parent: System.Threading.Tasks.Dataflow
  isExternal: false
  name: ISourceBlock<T2>
  nameWithType: ISourceBlock<T2>
  fullName: System.Threading.Tasks.Dataflow.ISourceBlock<T2>
  spec.csharp:
  - uid: System.Threading.Tasks.Dataflow.ISourceBlock`1
    name: ISourceBlock
    nameWithType: ISourceBlock
    fullName: System.Threading.Tasks.Dataflow.ISourceBlock
  - name: <
    nameWithType: <
    fullName: <
  - uid: T2
    name: T2
    nameWithType: T2
    fullName: T2
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Action{T2}
  parent: System
  isExternal: false
  name: Action<T2>
  nameWithType: Action<T2>
  fullName: System.Action<T2>
  spec.csharp:
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
  - name: <
    nameWithType: <
    fullName: <
  - uid: T2
    name: T2
    nameWithType: T2
    fullName: T2
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: T3
  name: T3
  nameWithType: T3
  fullName: T3
- uid: System.Threading.Tasks.Dataflow.ISourceBlock{T3}
  parent: System.Threading.Tasks.Dataflow
  isExternal: false
  name: ISourceBlock<T3>
  nameWithType: ISourceBlock<T3>
  fullName: System.Threading.Tasks.Dataflow.ISourceBlock<T3>
  spec.csharp:
  - uid: System.Threading.Tasks.Dataflow.ISourceBlock`1
    name: ISourceBlock
    nameWithType: ISourceBlock
    fullName: System.Threading.Tasks.Dataflow.ISourceBlock
  - name: <
    nameWithType: <
    fullName: <
  - uid: T3
    name: T3
    nameWithType: T3
    fullName: T3
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Action{T3}
  parent: System
  isExternal: false
  name: Action<T3>
  nameWithType: Action<T3>
  fullName: System.Action<T3>
  spec.csharp:
  - uid: System.Action`1
    name: Action
    nameWithType: Action
    fullName: System.Action
  - name: <
    nameWithType: <
    fullName: <
  - uid: T3
    name: T3
    nameWithType: T3
    fullName: T3
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Threading.Tasks.Dataflow.DataflowBlock.Choose``3(System.Threading.Tasks.Dataflow.ISourceBlock{``0},System.Action{``0},System.Threading.Tasks.Dataflow.ISourceBlock{``1},System.Action{``1},System.Threading.Tasks.Dataflow.ISourceBlock{``2},System.Action{``2},System.Threading.Tasks.Dataflow.DataflowBlockOptions)
  parent: System.Threading.Tasks.Dataflow.DataflowBlock
  isExternal: false
  name: Choose<T1,T2,T3>(ISourceBlock<T1>, Action<T1>, ISourceBlock<T2>, Action<T2>, ISourceBlock<T3>, Action<T3>, DataflowBlockOptions)
  nameWithType: DataflowBlock.Choose<T1,T2,T3>(ISourceBlock<T1>, Action<T1>, ISourceBlock<T2>, Action<T2>, ISourceBlock<T3>, Action<T3>, DataflowBlockOptions)
  fullName: DataflowBlock.Choose<T1,T2,T3>(ISourceBlock<T1>, Action<T1>, ISourceBlock<T2>, Action<T2>, ISourceBlock<T3>, Action<T3>, DataflowBlockOptions)
- uid: System.Threading.Tasks.Dataflow.DataflowBlockOptions
  parent: System.Threading.Tasks.Dataflow
  isExternal: false
  name: DataflowBlockOptions
  nameWithType: DataflowBlockOptions
  fullName: System.Threading.Tasks.Dataflow.DataflowBlockOptions
- uid: System.Threading.Tasks.Dataflow.DataflowBlock.Choose``2(System.Threading.Tasks.Dataflow.ISourceBlock{``0},System.Action{``0},System.Threading.Tasks.Dataflow.ISourceBlock{``1},System.Action{``1})
  parent: System.Threading.Tasks.Dataflow.DataflowBlock
  isExternal: false
  name: Choose<T1,T2>(ISourceBlock<T1>, Action<T1>, ISourceBlock<T2>, Action<T2>)
  nameWithType: DataflowBlock.Choose<T1,T2>(ISourceBlock<T1>, Action<T1>, ISourceBlock<T2>, Action<T2>)
  fullName: DataflowBlock.Choose<T1,T2>(ISourceBlock<T1>, Action<T1>, ISourceBlock<T2>, Action<T2>)
- uid: System.Threading.Tasks.Dataflow.DataflowBlock.Choose``2(System.Threading.Tasks.Dataflow.ISourceBlock{``0},System.Action{``0},System.Threading.Tasks.Dataflow.ISourceBlock{``1},System.Action{``1},System.Threading.Tasks.Dataflow.DataflowBlockOptions)
  parent: System.Threading.Tasks.Dataflow.DataflowBlock
  isExternal: false
  name: Choose<T1,T2>(ISourceBlock<T1>, Action<T1>, ISourceBlock<T2>, Action<T2>, DataflowBlockOptions)
  nameWithType: DataflowBlock.Choose<T1,T2>(ISourceBlock<T1>, Action<T1>, ISourceBlock<T2>, Action<T2>, DataflowBlockOptions)
  fullName: DataflowBlock.Choose<T1,T2>(ISourceBlock<T1>, Action<T1>, ISourceBlock<T2>, Action<T2>, DataflowBlockOptions)
- uid: System.Threading.Tasks.Dataflow.DataflowBlock.Encapsulate``2(System.Threading.Tasks.Dataflow.ITargetBlock{``0},System.Threading.Tasks.Dataflow.ISourceBlock{``1})
  parent: System.Threading.Tasks.Dataflow.DataflowBlock
  isExternal: false
  name: Encapsulate<TInput,TOutput>(ITargetBlock<TInput>, ISourceBlock<TOutput>)
  nameWithType: DataflowBlock.Encapsulate<TInput,TOutput>(ITargetBlock<TInput>, ISourceBlock<TOutput>)
  fullName: DataflowBlock.Encapsulate<TInput,TOutput>(ITargetBlock<TInput>, ISourceBlock<TOutput>)
- uid: System.Threading.Tasks.Dataflow.IPropagatorBlock`2
  parent: System.Threading.Tasks.Dataflow
  isExternal: false
  name: IPropagatorBlock<TInput,TOutput>
  nameWithType: IPropagatorBlock<TInput,TOutput>
  fullName: System.Threading.Tasks.Dataflow.IPropagatorBlock<TInput,TOutput>
- uid: System.Threading.Tasks.Dataflow.DataflowBlock.LinkTo``1(System.Threading.Tasks.Dataflow.ISourceBlock{``0},System.Threading.Tasks.Dataflow.ITargetBlock{``0})
  parent: System.Threading.Tasks.Dataflow.DataflowBlock
  isExternal: false
  name: LinkTo<TOutput>(ISourceBlock<TOutput>, ITargetBlock<TOutput>)
  nameWithType: DataflowBlock.LinkTo<TOutput>(ISourceBlock<TOutput>, ITargetBlock<TOutput>)
  fullName: DataflowBlock.LinkTo<TOutput>(ISourceBlock<TOutput>, ITargetBlock<TOutput>)
- uid: System.IDisposable
  parent: System
  isExternal: false
  name: IDisposable
  nameWithType: IDisposable
  fullName: System.IDisposable
- uid: System.Threading.Tasks.Dataflow.ITargetBlock{TOutput}
  parent: System.Threading.Tasks.Dataflow
  isExternal: false
  name: ITargetBlock<TOutput>
  nameWithType: ITargetBlock<TOutput>
  fullName: System.Threading.Tasks.Dataflow.ITargetBlock<TOutput>
  spec.csharp:
  - uid: System.Threading.Tasks.Dataflow.ITargetBlock`1
    name: ITargetBlock
    nameWithType: ITargetBlock
    fullName: System.Threading.Tasks.Dataflow.ITargetBlock
  - name: <
    nameWithType: <
    fullName: <
  - uid: TOutput
    name: TOutput
    nameWithType: TOutput
    fullName: TOutput
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Threading.Tasks.Dataflow.DataflowBlock.LinkTo``1(System.Threading.Tasks.Dataflow.ISourceBlock{``0},System.Threading.Tasks.Dataflow.ITargetBlock{``0},System.Predicate{``0})
  parent: System.Threading.Tasks.Dataflow.DataflowBlock
  isExternal: false
  name: LinkTo<TOutput>(ISourceBlock<TOutput>, ITargetBlock<TOutput>, Predicate<TOutput>)
  nameWithType: DataflowBlock.LinkTo<TOutput>(ISourceBlock<TOutput>, ITargetBlock<TOutput>, Predicate<TOutput>)
  fullName: DataflowBlock.LinkTo<TOutput>(ISourceBlock<TOutput>, ITargetBlock<TOutput>, Predicate<TOutput>)
- uid: System.Predicate`1
  name: Predicate<T>
  nameWithType: Predicate<T>
  fullName: System.Predicate<T>
- uid: System.Predicate{TOutput}
  parent: System
  isExternal: false
  name: Predicate<TOutput>
  nameWithType: Predicate<TOutput>
  fullName: System.Predicate<TOutput>
  spec.csharp:
  - uid: System.Predicate`1
    name: Predicate
    nameWithType: Predicate
    fullName: System.Predicate
  - name: <
    nameWithType: <
    fullName: <
  - uid: TOutput
    name: TOutput
    nameWithType: TOutput
    fullName: TOutput
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Threading.Tasks.Dataflow.DataflowBlock.LinkTo``1(System.Threading.Tasks.Dataflow.ISourceBlock{``0},System.Threading.Tasks.Dataflow.ITargetBlock{``0},System.Threading.Tasks.Dataflow.DataflowLinkOptions,System.Predicate{``0})
  parent: System.Threading.Tasks.Dataflow.DataflowBlock
  isExternal: false
  name: LinkTo<TOutput>(ISourceBlock<TOutput>, ITargetBlock<TOutput>, DataflowLinkOptions, Predicate<TOutput>)
  nameWithType: DataflowBlock.LinkTo<TOutput>(ISourceBlock<TOutput>, ITargetBlock<TOutput>, DataflowLinkOptions, Predicate<TOutput>)
  fullName: DataflowBlock.LinkTo<TOutput>(ISourceBlock<TOutput>, ITargetBlock<TOutput>, DataflowLinkOptions, Predicate<TOutput>)
- uid: System.Threading.Tasks.Dataflow.DataflowLinkOptions
  parent: System.Threading.Tasks.Dataflow
  isExternal: false
  name: DataflowLinkOptions
  nameWithType: DataflowLinkOptions
  fullName: System.Threading.Tasks.Dataflow.DataflowLinkOptions
- uid: System.Threading.Tasks.Dataflow.DataflowBlock.NullTarget``1
  parent: System.Threading.Tasks.Dataflow.DataflowBlock
  isExternal: false
  name: NullTarget<TInput>()
  nameWithType: DataflowBlock.NullTarget<TInput>()
  fullName: DataflowBlock.NullTarget<TInput>()
- uid: System.Threading.Tasks.Dataflow.DataflowBlock.OutputAvailableAsync``1(System.Threading.Tasks.Dataflow.ISourceBlock{``0},System.Threading.CancellationToken)
  parent: System.Threading.Tasks.Dataflow.DataflowBlock
  isExternal: false
  name: OutputAvailableAsync<TOutput>(ISourceBlock<TOutput>, CancellationToken)
  nameWithType: DataflowBlock.OutputAvailableAsync<TOutput>(ISourceBlock<TOutput>, CancellationToken)
  fullName: DataflowBlock.OutputAvailableAsync<TOutput>(ISourceBlock<TOutput>, CancellationToken)
- uid: System.Boolean
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Threading.Tasks.Task{System.Boolean}
  parent: System.Threading.Tasks
  isExternal: false
  name: Task<Boolean>
  nameWithType: Task<Boolean>
  fullName: System.Threading.Tasks.Task<System.Boolean>
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Threading.CancellationToken
  parent: System.Threading
  isExternal: false
  name: CancellationToken
  nameWithType: CancellationToken
  fullName: System.Threading.CancellationToken
- uid: System.Threading.Tasks.Dataflow.DataflowBlock.OutputAvailableAsync``1(System.Threading.Tasks.Dataflow.ISourceBlock{``0})
  parent: System.Threading.Tasks.Dataflow.DataflowBlock
  isExternal: false
  name: OutputAvailableAsync<TOutput>(ISourceBlock<TOutput>)
  nameWithType: DataflowBlock.OutputAvailableAsync<TOutput>(ISourceBlock<TOutput>)
  fullName: DataflowBlock.OutputAvailableAsync<TOutput>(ISourceBlock<TOutput>)
- uid: System.Threading.Tasks.Dataflow.DataflowBlock.Post``1(System.Threading.Tasks.Dataflow.ITargetBlock{``0},``0)
  parent: System.Threading.Tasks.Dataflow.DataflowBlock
  isExternal: false
  name: Post<TInput>(ITargetBlock<TInput>, TInput)
  nameWithType: DataflowBlock.Post<TInput>(ITargetBlock<TInput>, TInput)
  fullName: DataflowBlock.Post<TInput>(ITargetBlock<TInput>, TInput)
- uid: System.Threading.Tasks.Dataflow.DataflowBlock.Receive``1(System.Threading.Tasks.Dataflow.ISourceBlock{``0})
  parent: System.Threading.Tasks.Dataflow.DataflowBlock
  isExternal: false
  name: Receive<TOutput>(ISourceBlock<TOutput>)
  nameWithType: DataflowBlock.Receive<TOutput>(ISourceBlock<TOutput>)
  fullName: DataflowBlock.Receive<TOutput>(ISourceBlock<TOutput>)
- uid: System.Threading.Tasks.Dataflow.DataflowBlock.Receive``1(System.Threading.Tasks.Dataflow.ISourceBlock{``0},System.Threading.CancellationToken)
  parent: System.Threading.Tasks.Dataflow.DataflowBlock
  isExternal: false
  name: Receive<TOutput>(ISourceBlock<TOutput>, CancellationToken)
  nameWithType: DataflowBlock.Receive<TOutput>(ISourceBlock<TOutput>, CancellationToken)
  fullName: DataflowBlock.Receive<TOutput>(ISourceBlock<TOutput>, CancellationToken)
- uid: System.Threading.Tasks.Dataflow.DataflowBlock.Receive``1(System.Threading.Tasks.Dataflow.ISourceBlock{``0},System.TimeSpan)
  parent: System.Threading.Tasks.Dataflow.DataflowBlock
  isExternal: false
  name: Receive<TOutput>(ISourceBlock<TOutput>, TimeSpan)
  nameWithType: DataflowBlock.Receive<TOutput>(ISourceBlock<TOutput>, TimeSpan)
  fullName: DataflowBlock.Receive<TOutput>(ISourceBlock<TOutput>, TimeSpan)
- uid: System.TimeSpan
  parent: System
  isExternal: false
  name: TimeSpan
  nameWithType: TimeSpan
  fullName: System.TimeSpan
- uid: System.Threading.Tasks.Dataflow.DataflowBlock.Receive``1(System.Threading.Tasks.Dataflow.ISourceBlock{``0},System.TimeSpan,System.Threading.CancellationToken)
  parent: System.Threading.Tasks.Dataflow.DataflowBlock
  isExternal: false
  name: Receive<TOutput>(ISourceBlock<TOutput>, TimeSpan, CancellationToken)
  nameWithType: DataflowBlock.Receive<TOutput>(ISourceBlock<TOutput>, TimeSpan, CancellationToken)
  fullName: DataflowBlock.Receive<TOutput>(ISourceBlock<TOutput>, TimeSpan, CancellationToken)
- uid: System.Threading.Tasks.Dataflow.DataflowBlock.ReceiveAsync``1(System.Threading.Tasks.Dataflow.ISourceBlock{``0})
  parent: System.Threading.Tasks.Dataflow.DataflowBlock
  isExternal: false
  name: ReceiveAsync<TOutput>(ISourceBlock<TOutput>)
  nameWithType: DataflowBlock.ReceiveAsync<TOutput>(ISourceBlock<TOutput>)
  fullName: DataflowBlock.ReceiveAsync<TOutput>(ISourceBlock<TOutput>)
- uid: System.Threading.Tasks.Task{TOutput}
  parent: System.Threading.Tasks
  isExternal: false
  name: Task<TOutput>
  nameWithType: Task<TOutput>
  fullName: System.Threading.Tasks.Task<TOutput>
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
  - name: <
    nameWithType: <
    fullName: <
  - uid: TOutput
    name: TOutput
    nameWithType: TOutput
    fullName: TOutput
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Threading.Tasks.Dataflow.DataflowBlock.ReceiveAsync``1(System.Threading.Tasks.Dataflow.ISourceBlock{``0},System.Threading.CancellationToken)
  parent: System.Threading.Tasks.Dataflow.DataflowBlock
  isExternal: false
  name: ReceiveAsync<TOutput>(ISourceBlock<TOutput>, CancellationToken)
  nameWithType: DataflowBlock.ReceiveAsync<TOutput>(ISourceBlock<TOutput>, CancellationToken)
  fullName: DataflowBlock.ReceiveAsync<TOutput>(ISourceBlock<TOutput>, CancellationToken)
- uid: System.Threading.Tasks.Dataflow.DataflowBlock.ReceiveAsync``1(System.Threading.Tasks.Dataflow.ISourceBlock{``0},System.TimeSpan)
  parent: System.Threading.Tasks.Dataflow.DataflowBlock
  isExternal: false
  name: ReceiveAsync<TOutput>(ISourceBlock<TOutput>, TimeSpan)
  nameWithType: DataflowBlock.ReceiveAsync<TOutput>(ISourceBlock<TOutput>, TimeSpan)
  fullName: DataflowBlock.ReceiveAsync<TOutput>(ISourceBlock<TOutput>, TimeSpan)
- uid: System.Threading.Tasks.Dataflow.DataflowBlock.ReceiveAsync``1(System.Threading.Tasks.Dataflow.ISourceBlock{``0},System.TimeSpan,System.Threading.CancellationToken)
  parent: System.Threading.Tasks.Dataflow.DataflowBlock
  isExternal: false
  name: ReceiveAsync<TOutput>(ISourceBlock<TOutput>, TimeSpan, CancellationToken)
  nameWithType: DataflowBlock.ReceiveAsync<TOutput>(ISourceBlock<TOutput>, TimeSpan, CancellationToken)
  fullName: DataflowBlock.ReceiveAsync<TOutput>(ISourceBlock<TOutput>, TimeSpan, CancellationToken)
- uid: System.Threading.Tasks.Dataflow.DataflowBlock.SendAsync``1(System.Threading.Tasks.Dataflow.ITargetBlock{``0},``0,System.Threading.CancellationToken)
  parent: System.Threading.Tasks.Dataflow.DataflowBlock
  isExternal: false
  name: SendAsync<TInput>(ITargetBlock<TInput>, TInput, CancellationToken)
  nameWithType: DataflowBlock.SendAsync<TInput>(ITargetBlock<TInput>, TInput, CancellationToken)
  fullName: DataflowBlock.SendAsync<TInput>(ITargetBlock<TInput>, TInput, CancellationToken)
- uid: System.Threading.Tasks.Dataflow.DataflowBlock.SendAsync``1(System.Threading.Tasks.Dataflow.ITargetBlock{``0},``0)
  parent: System.Threading.Tasks.Dataflow.DataflowBlock
  isExternal: false
  name: SendAsync<TInput>(ITargetBlock<TInput>, TInput)
  nameWithType: DataflowBlock.SendAsync<TInput>(ITargetBlock<TInput>, TInput)
  fullName: DataflowBlock.SendAsync<TInput>(ITargetBlock<TInput>, TInput)
- uid: System.Threading.Tasks.Dataflow.DataflowBlock.TryReceive``1(System.Threading.Tasks.Dataflow.IReceivableSourceBlock{``0},``0@)
  parent: System.Threading.Tasks.Dataflow.DataflowBlock
  isExternal: false
  name: TryReceive<TOutput>(IReceivableSourceBlock<TOutput>, TOutput)
  nameWithType: DataflowBlock.TryReceive<TOutput>(IReceivableSourceBlock<TOutput>, TOutput)
  fullName: DataflowBlock.TryReceive<TOutput>(IReceivableSourceBlock<TOutput>, TOutput)
- uid: System.Threading.Tasks.Dataflow.IReceivableSourceBlock`1
  parent: System.Threading.Tasks.Dataflow
  isExternal: false
  name: IReceivableSourceBlock<TOutput>
  nameWithType: IReceivableSourceBlock<TOutput>
  fullName: System.Threading.Tasks.Dataflow.IReceivableSourceBlock<TOutput>
- uid: System.Threading.Tasks.Dataflow.DataflowBlock.AsObservable``1*
  parent: System.Threading.Tasks.Dataflow.DataflowBlock
  isExternal: false
  name: AsObservable<TOutput>
  nameWithType: DataflowBlock.AsObservable<TOutput>
  fullName: DataflowBlock.AsObservable<TOutput>
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading.Tasks.Dataflow/DataflowBlock.xml
- uid: System.Threading.Tasks.Dataflow.DataflowBlock.AsObserver``1*
  parent: System.Threading.Tasks.Dataflow.DataflowBlock
  isExternal: false
  name: AsObserver<TInput>
  nameWithType: DataflowBlock.AsObserver<TInput>
  fullName: DataflowBlock.AsObserver<TInput>
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading.Tasks.Dataflow/DataflowBlock.xml
- uid: System.Threading.Tasks.Dataflow.DataflowBlock.Choose``3*
  parent: System.Threading.Tasks.Dataflow.DataflowBlock
  isExternal: false
  name: Choose<T1,T2,T3>
  nameWithType: DataflowBlock.Choose<T1,T2,T3>
  fullName: DataflowBlock.Choose<T1,T2,T3>
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading.Tasks.Dataflow/DataflowBlock.xml
- uid: System.Threading.Tasks.Dataflow.DataflowBlock.Choose``2*
  parent: System.Threading.Tasks.Dataflow.DataflowBlock
  isExternal: false
  name: Choose<T1,T2>
  nameWithType: DataflowBlock.Choose<T1,T2>
  fullName: DataflowBlock.Choose<T1,T2>
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading.Tasks.Dataflow/DataflowBlock.xml
- uid: System.Threading.Tasks.Dataflow.DataflowBlock.Encapsulate``2*
  parent: System.Threading.Tasks.Dataflow.DataflowBlock
  isExternal: false
  name: Encapsulate<TInput,TOutput>
  nameWithType: DataflowBlock.Encapsulate<TInput,TOutput>
  fullName: DataflowBlock.Encapsulate<TInput,TOutput>
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading.Tasks.Dataflow/DataflowBlock.xml
- uid: System.Threading.Tasks.Dataflow.DataflowBlock.LinkTo``1*
  parent: System.Threading.Tasks.Dataflow.DataflowBlock
  isExternal: false
  name: LinkTo<TOutput>
  nameWithType: DataflowBlock.LinkTo<TOutput>
  fullName: DataflowBlock.LinkTo<TOutput>
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading.Tasks.Dataflow/DataflowBlock.xml
- uid: System.Threading.Tasks.Dataflow.DataflowBlock.NullTarget``1*
  parent: System.Threading.Tasks.Dataflow.DataflowBlock
  isExternal: false
  name: NullTarget<TInput>
  nameWithType: DataflowBlock.NullTarget<TInput>
  fullName: DataflowBlock.NullTarget<TInput>
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading.Tasks.Dataflow/DataflowBlock.xml
- uid: System.Threading.Tasks.Dataflow.DataflowBlock.OutputAvailableAsync``1*
  parent: System.Threading.Tasks.Dataflow.DataflowBlock
  isExternal: false
  name: OutputAvailableAsync<TOutput>
  nameWithType: DataflowBlock.OutputAvailableAsync<TOutput>
  fullName: DataflowBlock.OutputAvailableAsync<TOutput>
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading.Tasks.Dataflow/DataflowBlock.xml
- uid: System.Threading.Tasks.Dataflow.DataflowBlock.Post``1*
  parent: System.Threading.Tasks.Dataflow.DataflowBlock
  isExternal: false
  name: Post<TInput>
  nameWithType: DataflowBlock.Post<TInput>
  fullName: DataflowBlock.Post<TInput>
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading.Tasks.Dataflow/DataflowBlock.xml
- uid: System.Threading.Tasks.Dataflow.DataflowBlock.Receive``1*
  parent: System.Threading.Tasks.Dataflow.DataflowBlock
  isExternal: false
  name: Receive<TOutput>
  nameWithType: DataflowBlock.Receive<TOutput>
  fullName: DataflowBlock.Receive<TOutput>
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading.Tasks.Dataflow/DataflowBlock.xml
- uid: System.Threading.Tasks.Dataflow.DataflowBlock.ReceiveAsync``1*
  parent: System.Threading.Tasks.Dataflow.DataflowBlock
  isExternal: false
  name: ReceiveAsync<TOutput>
  nameWithType: DataflowBlock.ReceiveAsync<TOutput>
  fullName: DataflowBlock.ReceiveAsync<TOutput>
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading.Tasks.Dataflow/DataflowBlock.xml
- uid: System.Threading.Tasks.Dataflow.DataflowBlock.SendAsync``1*
  parent: System.Threading.Tasks.Dataflow.DataflowBlock
  isExternal: false
  name: SendAsync<TInput>
  nameWithType: DataflowBlock.SendAsync<TInput>
  fullName: DataflowBlock.SendAsync<TInput>
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading.Tasks.Dataflow/DataflowBlock.xml
- uid: System.Threading.Tasks.Dataflow.DataflowBlock.TryReceive``1*
  parent: System.Threading.Tasks.Dataflow.DataflowBlock
  isExternal: false
  name: TryReceive<TOutput>
  nameWithType: DataflowBlock.TryReceive<TOutput>
  fullName: DataflowBlock.TryReceive<TOutput>
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading.Tasks.Dataflow/DataflowBlock.xml
- uid: System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: false
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: Object.Equals(Object)
- uid: System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: false
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: Object.Equals(Object, Object)
- uid: System.Object.GetHashCode
  parent: System.Object
  isExternal: false
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: Object.GetHashCode()
- uid: System.Object.GetType
  parent: System.Object
  isExternal: false
  name: GetType()
  nameWithType: Object.GetType()
  fullName: Object.GetType()
- uid: System.Object.MemberwiseClone
  parent: System.Object
  isExternal: false
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: Object.MemberwiseClone()
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: false
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: Object.ReferenceEquals(Object, Object)
- uid: System.Object.ToString
  parent: System.Object
  isExternal: false
  name: ToString()
  nameWithType: Object.ToString()
  fullName: Object.ToString()

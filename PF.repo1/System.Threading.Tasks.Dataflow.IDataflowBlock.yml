### YamlMime:ManagedReference
items:
- uid: System.Threading.Tasks.Dataflow.IDataflowBlock
  commentId: T:System.Threading.Tasks.Dataflow.IDataflowBlock
  id: IDataflowBlock
  children:
  - System.Threading.Tasks.Dataflow.IDataflowBlock.Complete
  - System.Threading.Tasks.Dataflow.IDataflowBlock.Completion
  - System.Threading.Tasks.Dataflow.IDataflowBlock.Fault(System.Exception)
  langs:
  - csharp
  name: IDataflowBlock
  nameWithType: IDataflowBlock
  fullName: System.Threading.Tasks.Dataflow.IDataflowBlock
  type: Interface
  assemblies:
  - System.Threading.Tasks.Dataflow
  namespace: System.Threading.Tasks.Dataflow
  summary: Represents a dataflow block.
  remarks: >-
    > [!NOTE]

    >  The TPL Dataflow Library (<xref:System.Threading.Tasks.Dataflow> namespace) is not distributed with the [!INCLUDE[net_v45](~/includes/net-v45-md.md)]. To install the <xref:System.Threading.Tasks.Dataflow> namespace, open your project in [!INCLUDE[vs_dev11_long](~/includes/vs-dev11-long-md.md)], choose **Manage NuGet Packages** from the Project menu, and search online for the `Microsoft.Tpl.Dataflow` package.
  syntax:
    content: public interface IDataflowBlock
  derivedClasses:
  - System.Threading.Tasks.Dataflow.ISourceBlock`1
  - System.Threading.Tasks.Dataflow.ITargetBlock`1
  implements: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading.Tasks.Dataflow/IDataflowBlock.xml
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Threading.Tasks.Dataflow.IDataflowBlock.Complete
  commentId: M:System.Threading.Tasks.Dataflow.IDataflowBlock.Complete
  id: Complete
  parent: System.Threading.Tasks.Dataflow.IDataflowBlock
  langs:
  - csharp
  name: Complete()
  nameWithType: IDataflowBlock.Complete()
  fullName: IDataflowBlock.Complete()
  type: Method
  assemblies:
  - System.Threading.Tasks.Dataflow
  namespace: System.Threading.Tasks.Dataflow
  summary: Signals to the <xref href="System.Threading.Tasks.Dataflow.IDataflowBlock"></xref> that it should not accept nor produce any more messages nor consume any more postponed messages.
  remarks: After <xref:System.Threading.Tasks.Dataflow.IDataflowBlock.Complete%2A> has been called on a dataflow block, that block will complete, and its <xref:System.Threading.Tasks.Dataflow.IDataflowBlock.Completion%2A> task will enter a final state after it has processed all previously available data. <xref:System.Threading.Tasks.Dataflow.IDataflowBlock.Complete%2A> will not block waiting for completion to occur, but rather will initiate the request; to wait for completion to occur, the <xref:System.Threading.Tasks.Dataflow.IDataflowBlock.Completion%2A> task may be used.
  syntax:
    content: public void Complete ();
    parameters: []
  overload: System.Threading.Tasks.Dataflow.IDataflowBlock.Complete*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading.Tasks.Dataflow/IDataflowBlock.xml
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Threading.Tasks.Dataflow.IDataflowBlock.Completion
  commentId: P:System.Threading.Tasks.Dataflow.IDataflowBlock.Completion
  id: Completion
  parent: System.Threading.Tasks.Dataflow.IDataflowBlock
  langs:
  - csharp
  name: Completion
  nameWithType: IDataflowBlock.Completion
  fullName: IDataflowBlock.Completion
  type: Property
  assemblies:
  - System.Threading.Tasks.Dataflow
  namespace: System.Threading.Tasks.Dataflow
  summary: Gets a  <xref href="System.Threading.Tasks.Task"></xref> that represents the asynchronous operation and completion of the dataflow block.
  remarks: A dataflow block is considered completed when it is not currently processing a message and when it has guaranteed that it will not process any more messages. The returned <xref:System.Threading.Tasks.Task> will transition to a completed state when the associated block has completed. It will transition to the <xref:System.Threading.Tasks.TaskStatus><xref:System.Threading.Tasks.TaskStatus.RanToCompletion> state when the block completes its processing successfully according to the dataflow blockâ€™s defined semantics. It will transition to the <xref:System.Threading.Tasks.TaskStatus><xref:System.Threading.Tasks.TaskStatus.Faulted> state when the dataflow block has completed processing prematurely due to an unhandled exception, and it will transition to the <xref:System.Threading.Tasks.TaskStatus><xref:System.Threading.Tasks.TaskStatus.Canceled> state when the dataflow block has completed processing prematurely due to receiving a cancellation request. If the task completes in the <xref:System.Threading.Tasks.TaskStatus.Faulted> state, its `Exception` property will return an <xref:System.AggregateException> containing the one or more exceptions that caused the block to fail.
  syntax:
    content: public System.Threading.Tasks.Task Completion { get; }
    return:
      type: System.Threading.Tasks.Task
      description: The task.
  overload: System.Threading.Tasks.Dataflow.IDataflowBlock.Completion*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading.Tasks.Dataflow/IDataflowBlock.xml
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Threading.Tasks.Dataflow.IDataflowBlock.Fault(System.Exception)
  commentId: M:System.Threading.Tasks.Dataflow.IDataflowBlock.Fault(System.Exception)
  id: Fault(System.Exception)
  parent: System.Threading.Tasks.Dataflow.IDataflowBlock
  langs:
  - csharp
  name: Fault(Exception)
  nameWithType: IDataflowBlock.Fault(Exception)
  fullName: IDataflowBlock.Fault(Exception)
  type: Method
  assemblies:
  - System.Threading.Tasks.Dataflow
  namespace: System.Threading.Tasks.Dataflow
  summary: Causes the <xref href="System.Threading.Tasks.Dataflow.IDataflowBlock"></xref> to complete in a  <xref href="System.Threading.Tasks.TaskStatus.Faulted"></xref> state.
  remarks: After <xref:System.Threading.Tasks.Dataflow.IDataflowBlock.Fault%2A> has been called on a dataflow block, that block will complete, and its <xref:System.Threading.Tasks.Dataflow.IDataflowBlock.Completion%2A> task will enter a final state. Faulting a block, as with canceling a block, causes buffered messages (unprocessed input messages as well as unoffered output messages) to be lost.
  syntax:
    content: public void Fault (Exception exception);
    parameters:
    - id: exception
      type: System.Exception
      description: The  <xref href="System.Exception"></xref> that caused the faulting.
  overload: System.Threading.Tasks.Dataflow.IDataflowBlock.Fault*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: The <code>exception</code> is `null`.
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading.Tasks.Dataflow/IDataflowBlock.xml
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
references:
- uid: System.ArgumentNullException
  parent: System
  isExternal: false
  name: ArgumentNullException
  nameWithType: ArgumentNullException
  fullName: System.ArgumentNullException
- uid: System.Threading.Tasks.Dataflow.IDataflowBlock.Complete
  parent: System.Threading.Tasks.Dataflow.IDataflowBlock
  isExternal: false
  name: Complete()
  nameWithType: IDataflowBlock.Complete()
  fullName: IDataflowBlock.Complete()
- uid: System.Threading.Tasks.Dataflow.IDataflowBlock.Completion
  parent: System.Threading.Tasks.Dataflow.IDataflowBlock
  isExternal: false
  name: Completion
  nameWithType: IDataflowBlock.Completion
  fullName: IDataflowBlock.Completion
- uid: System.Threading.Tasks.Task
  parent: System.Threading.Tasks
  isExternal: false
  name: Task
  nameWithType: Task
  fullName: System.Threading.Tasks.Task
- uid: System.Threading.Tasks.Dataflow.IDataflowBlock.Fault(System.Exception)
  parent: System.Threading.Tasks.Dataflow.IDataflowBlock
  isExternal: false
  name: Fault(Exception)
  nameWithType: IDataflowBlock.Fault(Exception)
  fullName: IDataflowBlock.Fault(Exception)
- uid: System.Exception
  parent: System
  isExternal: false
  name: Exception
  nameWithType: Exception
  fullName: System.Exception
- uid: System.Threading.Tasks.Dataflow.IDataflowBlock.Complete*
  parent: System.Threading.Tasks.Dataflow.IDataflowBlock
  isExternal: false
  name: Complete
  nameWithType: IDataflowBlock.Complete
  fullName: IDataflowBlock.Complete
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading.Tasks.Dataflow/IDataflowBlock.xml
- uid: System.Threading.Tasks.Dataflow.IDataflowBlock.Completion*
  parent: System.Threading.Tasks.Dataflow.IDataflowBlock
  isExternal: false
  name: Completion
  nameWithType: IDataflowBlock.Completion
  fullName: IDataflowBlock.Completion
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading.Tasks.Dataflow/IDataflowBlock.xml
- uid: System.Threading.Tasks.Dataflow.IDataflowBlock.Fault*
  parent: System.Threading.Tasks.Dataflow.IDataflowBlock
  isExternal: false
  name: Fault
  nameWithType: IDataflowBlock.Fault
  fullName: IDataflowBlock.Fault
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Threading.Tasks.Dataflow/IDataflowBlock.xml

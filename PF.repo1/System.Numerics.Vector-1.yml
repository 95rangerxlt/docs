### YamlMime:ManagedReference
items:
- uid: System.Numerics.Vector`1
  commentId: T:System.Numerics.Vector`1
  id: Vector`1
  children:
  - System.Numerics.Vector`1.#ctor(`0)
  - System.Numerics.Vector`1.#ctor(`0[])
  - System.Numerics.Vector`1.#ctor(`0[],System.Int32)
  - System.Numerics.Vector`1.CopyTo(`0[])
  - System.Numerics.Vector`1.CopyTo(`0[],System.Int32)
  - System.Numerics.Vector`1.Count
  - System.Numerics.Vector`1.Equals(System.Numerics.Vector{`0})
  - System.Numerics.Vector`1.Equals(System.Object)
  - System.Numerics.Vector`1.GetHashCode
  - System.Numerics.Vector`1.Item(System.Int32)
  - System.Numerics.Vector`1.One
  - System.Numerics.Vector`1.op_Addition(System.Numerics.Vector{`0},System.Numerics.Vector{`0})
  - System.Numerics.Vector`1.op_BitwiseAnd(System.Numerics.Vector{`0},System.Numerics.Vector{`0})
  - System.Numerics.Vector`1.op_BitwiseOr(System.Numerics.Vector{`0},System.Numerics.Vector{`0})
  - System.Numerics.Vector`1.op_Division(System.Numerics.Vector{`0},System.Numerics.Vector{`0})
  - System.Numerics.Vector`1.op_Equality(System.Numerics.Vector{`0},System.Numerics.Vector{`0})
  - System.Numerics.Vector`1.op_ExclusiveOr(System.Numerics.Vector{`0},System.Numerics.Vector{`0})
  - System.Numerics.Vector`1.op_Explicit(System.Numerics.Vector{T} to System.Numerics.Vector{System.UInt64})
  - System.Numerics.Vector`1.op_Explicit(System.Numerics.Vector{T} to System.Numerics.Vector{System.UInt32})
  - System.Numerics.Vector`1.op_Explicit(System.Numerics.Vector{T} to System.Numerics.Vector{System.UInt16})
  - System.Numerics.Vector`1.op_Explicit(System.Numerics.Vector{T} to System.Numerics.Vector{System.Single})
  - System.Numerics.Vector`1.op_Explicit(System.Numerics.Vector{T} to System.Numerics.Vector{System.SByte})
  - System.Numerics.Vector`1.op_Explicit(System.Numerics.Vector{T} to System.Numerics.Vector{System.Double})
  - System.Numerics.Vector`1.op_Explicit(System.Numerics.Vector{T} to System.Numerics.Vector{System.Int32})
  - System.Numerics.Vector`1.op_Explicit(System.Numerics.Vector{T} to System.Numerics.Vector{System.Int16})
  - System.Numerics.Vector`1.op_Explicit(System.Numerics.Vector{T} to System.Numerics.Vector{System.Byte})
  - System.Numerics.Vector`1.op_Explicit(System.Numerics.Vector{T} to System.Numerics.Vector{System.Int64})
  - System.Numerics.Vector`1.op_Inequality(System.Numerics.Vector{`0},System.Numerics.Vector{`0})
  - System.Numerics.Vector`1.op_Multiply(System.Numerics.Vector{`0},System.Numerics.Vector{`0})
  - System.Numerics.Vector`1.op_Multiply(System.Numerics.Vector{`0},`0)
  - System.Numerics.Vector`1.op_Multiply(`0,System.Numerics.Vector{`0})
  - System.Numerics.Vector`1.op_OnesComplement(System.Numerics.Vector{`0})
  - System.Numerics.Vector`1.op_Subtraction(System.Numerics.Vector{`0},System.Numerics.Vector{`0})
  - System.Numerics.Vector`1.op_UnaryNegation(System.Numerics.Vector{`0})
  - System.Numerics.Vector`1.ToString(System.String,System.IFormatProvider)
  - System.Numerics.Vector`1.ToString
  - System.Numerics.Vector`1.ToString(System.String)
  - System.Numerics.Vector`1.Zero
  langs:
  - csharp
  name: Vector<T>
  nameWithType: Vector<T>
  fullName: System.Numerics.Vector<T>
  type: Struct
  assemblies:
  - System.Numerics.Vectors
  - netstandard
  namespace: System.Numerics
  summary: Represents a single vector of a specified numeric type that is suitable for low-level optimization of parallel algorithms.
  remarks: "<xref:System.Numerics.Vector%601> is an immutable structure that represents a single vector of a specified numeric type. The count of a <xref:System.Numerics.Vector%601> instance is fixed, but its upper limit is CPU-register dependent. It is intended to be used as a building block for vectorizing large algorithms.  \n  \n The <xref:System.Numerics.Vector%601> structure provides support for hardware acceleration."
  syntax:
    content: 'public struct Vector<T> : IEquatable<System.Numerics.Vector<T>>, IFormattable where T : struct'
    typeParameters:
    - id: T
      description: The vector type. <code>T</code> can be any primitive numeric type.
  inheritance:
  - System.Object
  - System.ValueType
  implements:
  - System.IEquatable{System.Numerics.Vector{T}}
  - System.IFormattable
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Numerics/Vector`1.xml
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Numerics.Vector`1.#ctor(`0)
  commentId: M:System.Numerics.Vector`1.#ctor(`0)
  id: '#ctor(`0)'
  parent: System.Numerics.Vector`1
  langs:
  - csharp
  name: Vector<T>(T)
  nameWithType: Vector<T>.Vector<T>(T)
  fullName: Vector<T>.Vector<T>(T)
  type: Constructor
  assemblies:
  - System.Numerics.Vectors
  - netstandard
  namespace: System.Numerics
  summary: Creates a vector whose components are of a specified type.
  remarks: '`value` can be any primitive numeric type (that is, a numeric type whose <xref:System.Type.IsPrimitive%2A?displayProperty=fullName> property returns `true`.'
  syntax:
    content: public Vector (T value);
    parameters:
    - id: value
      type: T
      description: The numeric type that defines the type of the components in the vector.
  overload: System.Numerics.Vector`1.#ctor*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Numerics/Vector`1.xml
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Numerics.Vector`1.#ctor(`0[])
  commentId: M:System.Numerics.Vector`1.#ctor(`0[])
  id: '#ctor(`0[])'
  parent: System.Numerics.Vector`1
  langs:
  - csharp
  name: Vector<T>(T[])
  nameWithType: Vector<T>.Vector<T>(T[])
  fullName: Vector<T>.Vector<T>(T[])
  type: Constructor
  assemblies:
  - System.Numerics.Vectors
  - netstandard
  namespace: System.Numerics
  summary: Creates a vector from a specified array.
  remarks: '`values` must contain at least <xref:System.Numerics.Vector%601.Count%2A> elements.'
  syntax:
    content: public Vector (T[] values);
    parameters:
    - id: values
      type: T[]
      description: A numeric array.
  overload: System.Numerics.Vector`1.#ctor*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>values</code> is `null`.
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Numerics/Vector`1.xml
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Numerics.Vector`1.#ctor(`0[],System.Int32)
  commentId: M:System.Numerics.Vector`1.#ctor(`0[],System.Int32)
  id: '#ctor(`0[],System.Int32)'
  parent: System.Numerics.Vector`1
  langs:
  - csharp
  name: Vector<T>(T[], Int32)
  nameWithType: Vector<T>.Vector<T>(T[], Int32)
  fullName: Vector<T>.Vector<T>(T[], Int32)
  type: Constructor
  assemblies:
  - System.Numerics.Vectors
  - netstandard
  namespace: System.Numerics
  summary: Creates a vector from a specified array starting at a specified index position.
  remarks: The array must contain at least [Vector(T) Constructor (T\<xref:System.Numerics.Vector%601.Count%2A?displayProperty=fullName> elements from the specified index.
  syntax:
    content: public Vector (T[] values, int index);
    parameters:
    - id: values
      type: T[]
      description: A numeric array.
    - id: index
      type: System.Int32
      description: The starting index position from which to create the vector.
  overload: System.Numerics.Vector`1.#ctor*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>values</code> is `null`.
  - type: System.IndexOutOfRangeException
    commentId: T:System.IndexOutOfRangeException
    description: "<code>index</code> is less than zero.  \n  \n -or-  \n  \n The length of <code>values</code> minus <code>index</code> is less than <xref href=\"System.Numerics.Vector`1.Count\"></xref>."
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Numerics/Vector`1.xml
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Numerics.Vector`1.CopyTo(`0[])
  commentId: M:System.Numerics.Vector`1.CopyTo(`0[])
  id: CopyTo(`0[])
  parent: System.Numerics.Vector`1
  langs:
  - csharp
  name: CopyTo(T[])
  nameWithType: Vector<T>.CopyTo(T[])
  fullName: Vector<T>.CopyTo(T[])
  type: Method
  assemblies:
  - System.Numerics.Vectors
  - netstandard
  namespace: System.Numerics
  summary: Copies the vector instance to a specified destination array.
  remarks: The copy operation begins at index 0 of `destination`. The destination array must have at least <xref:System.Numerics.Vector%601.Count%2A?displayProperty=fullName> elements.
  syntax:
    content: public void CopyTo (T[] destination);
    parameters:
    - id: destination
      type: T[]
      description: The array to receive a copy of the vector values.
  overload: System.Numerics.Vector`1.CopyTo*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>destination</code> is `null`.
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: The number of elements in the current vector is greater than the number of elements available in the <code>destination</code> array.
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Numerics/Vector`1.xml
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Numerics.Vector`1.CopyTo(`0[],System.Int32)
  commentId: M:System.Numerics.Vector`1.CopyTo(`0[],System.Int32)
  id: CopyTo(`0[],System.Int32)
  parent: System.Numerics.Vector`1
  langs:
  - csharp
  name: CopyTo(T[], Int32)
  nameWithType: Vector<T>.CopyTo(T[], Int32)
  fullName: Vector<T>.CopyTo(T[], Int32)
  type: Method
  assemblies:
  - System.Numerics.Vectors
  - netstandard
  namespace: System.Numerics
  summary: Copies the vector instance to a specified destination array starting at a specified index position.
  remarks: The copy operation begins at index `startIndex` of `destination`. The destination array must have at least `startIndex` + [CopyTo Method (T\<xref:System.Numerics.Vector%601.Count%2A> – 1 elements.
  syntax:
    content: public void CopyTo (T[] destination, int startIndex);
    parameters:
    - id: destination
      type: T[]
      description: The array to receive a copy of the vector values.
    - id: startIndex
      type: System.Int32
      description: The starting index in <code>destination</code> at which to begin the copy operation.
  overload: System.Numerics.Vector`1.CopyTo*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <code>destination</code> is `null`.
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: The number of elements in the current instance is greater than the number of elements available from <code>startIndex</code> to the end of the <code>destination</code> array.
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: <code>index</code> is less than zero or greater than the last index in <code>destination</code>.
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Numerics/Vector`1.xml
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Numerics.Vector`1.Count
  commentId: P:System.Numerics.Vector`1.Count
  id: Count
  parent: System.Numerics.Vector`1
  langs:
  - csharp
  name: Count
  nameWithType: Vector<T>.Count
  fullName: Vector<T>.Count
  type: Property
  assemblies:
  - System.Numerics.Vectors
  - netstandard
  namespace: System.Numerics
  summary: Returns the number of elements stored in the vector.
  syntax:
    content: public static int Count { get; }
    return:
      type: System.Int32
      description: The number of elements stored in the vector.
  overload: System.Numerics.Vector`1.Count*
  exceptions:
  - type: System.NotSupportedException
    commentId: T:System.NotSupportedException
    description: Access to the property getter via reflection is not supported.
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Numerics/Vector`1.xml
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Numerics.Vector`1.Equals(System.Numerics.Vector{`0})
  commentId: M:System.Numerics.Vector`1.Equals(System.Numerics.Vector{`0})
  id: Equals(System.Numerics.Vector{`0})
  parent: System.Numerics.Vector`1
  langs:
  - csharp
  name: Equals(Vector<T>)
  nameWithType: Vector<T>.Equals(Vector<T>)
  fullName: Vector<T>.Equals(Vector<T>)
  type: Method
  assemblies:
  - System.Numerics.Vectors
  - netstandard
  namespace: System.Numerics
  summary: Returns a value that indicates whether this instance is equal to a specified vector.
  remarks: Two vectors are equal if they are of the same type, have the same number of values, and each value in the current instance is equal to the corresponding value in `other`.
  syntax:
    content: public bool Equals (System.Numerics.Vector<T> other);
    parameters:
    - id: other
      type: System.Numerics.Vector`1
      description: The vector to compare with this instance.
    return:
      type: System.Boolean
      description: '`true` if the current instance and <code>other</code> are equal; otherwise, `false`.'
  overload: System.Numerics.Vector`1.Equals*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Numerics/Vector`1.xml
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Numerics.Vector`1.Equals(System.Object)
  commentId: M:System.Numerics.Vector`1.Equals(System.Object)
  id: Equals(System.Object)
  parent: System.Numerics.Vector`1
  langs:
  - csharp
  name: Equals(Object)
  nameWithType: Vector<T>.Equals(Object)
  fullName: Vector<T>.Equals(Object)
  type: Method
  assemblies:
  - System.Numerics.Vectors
  - netstandard
  namespace: System.Numerics
  summary: Returns a value that indicates whether this instance is equal to a specified object.
  remarks: Two vectors are equal if they are of the same type, have the same number of values, and each value in the current instance is equal to the corresponding value in `other`.
  syntax:
    content: public override bool Equals (object obj);
    parameters:
    - id: obj
      type: System.Object
      description: The object to compare with this instance.
    return:
      type: System.Boolean
      description: '`true` if the current instance and <code>obj</code> are equal; otherwise, `false`. The method returns `false` if <code>obj</code> is null, or if <code>obj</code> is a vector of a different type than the current instance.'
  overload: System.Numerics.Vector`1.Equals*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Numerics/Vector`1.xml
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Numerics.Vector`1.GetHashCode
  commentId: M:System.Numerics.Vector`1.GetHashCode
  id: GetHashCode
  parent: System.Numerics.Vector`1
  langs:
  - csharp
  name: GetHashCode()
  nameWithType: Vector<T>.GetHashCode()
  fullName: Vector<T>.GetHashCode()
  type: Method
  assemblies:
  - System.Numerics.Vectors
  - netstandard
  namespace: System.Numerics
  summary: Returns the hash code for this instance.
  syntax:
    content: public override int GetHashCode ();
    parameters: []
    return:
      type: System.Int32
      description: The hash code.
  overload: System.Numerics.Vector`1.GetHashCode*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Numerics/Vector`1.xml
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Numerics.Vector`1.Item(System.Int32)
  commentId: P:System.Numerics.Vector`1.Item(System.Int32)
  id: Item(System.Int32)
  parent: System.Numerics.Vector`1
  langs:
  - csharp
  name: Item(Int32)
  nameWithType: Vector<T>.Item(Int32)
  fullName: Vector<T>.Item(Int32)
  type: Property
  assemblies:
  - System.Numerics.Vectors
  - netstandard
  namespace: System.Numerics
  summary: Gets the element at a specified index.
  syntax:
    content: public T this[int index] { get; }
    parameters:
    - id: index
      type: System.Int32
      description: The index of the element to return.
    return:
      type: T
      description: The element at index <code>index</code>.
  overload: System.Numerics.Vector`1.Item*
  exceptions:
  - type: System.IndexOutOfRangeException
    commentId: T:System.IndexOutOfRangeException
    description: "<code>index</code> is less than zero.  \n  \n -or-  \n  \n <code>index</code> is greater than or equal to <xref href=\"System.Numerics.Vector`1.Count\"></xref>."
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Numerics/Vector`1.xml
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Numerics.Vector`1.One
  commentId: P:System.Numerics.Vector`1.One
  id: One
  parent: System.Numerics.Vector`1
  langs:
  - csharp
  name: One
  nameWithType: Vector<T>.One
  fullName: Vector<T>.One
  type: Property
  assemblies:
  - System.Numerics.Vectors
  - netstandard
  namespace: System.Numerics
  summary: Returns a vector containing all ones.
  syntax:
    content: public static System.Numerics.Vector<T> One { get; }
    return:
      type: System.Numerics.Vector`1
      description: A vector containing all ones.
  overload: System.Numerics.Vector`1.One*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Numerics/Vector`1.xml
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Numerics.Vector`1.op_Addition(System.Numerics.Vector{`0},System.Numerics.Vector{`0})
  commentId: M:System.Numerics.Vector`1.op_Addition(System.Numerics.Vector{`0},System.Numerics.Vector{`0})
  id: op_Addition(System.Numerics.Vector{`0},System.Numerics.Vector{`0})
  parent: System.Numerics.Vector`1
  langs:
  - csharp
  name: op_Addition(Vector<T>, Vector<T>)
  nameWithType: Vector<T>.op_Addition(Vector<T>, Vector<T>)
  fullName: Vector<T>.op_Addition(Vector<T>, Vector<T>)
  type: Operator
  assemblies:
  - System.Numerics.Vectors
  - netstandard
  namespace: System.Numerics
  summary: Adds two vectors together.
  remarks: The <xref:System.Numerics.Vector%601.op_Addition%2A> method defines the addition operation for <xref:System.Numerics.Vector%601> objects.
  syntax:
    content: public static System.Numerics.Vector<T> op_Addition (System.Numerics.Vector<T> left, System.Numerics.Vector<T> right);
    parameters:
    - id: left
      type: System.Numerics.Vector`1
      description: The first vector to add.
    - id: right
      type: System.Numerics.Vector`1
      description: The second vector to add.
    return:
      type: System.Numerics.Vector`1
      description: The summed vector.
  overload: System.Numerics.Vector`1.op_Addition*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Numerics/Vector`1.xml
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Numerics.Vector`1.op_BitwiseAnd(System.Numerics.Vector{`0},System.Numerics.Vector{`0})
  commentId: M:System.Numerics.Vector`1.op_BitwiseAnd(System.Numerics.Vector{`0},System.Numerics.Vector{`0})
  id: op_BitwiseAnd(System.Numerics.Vector{`0},System.Numerics.Vector{`0})
  parent: System.Numerics.Vector`1
  langs:
  - csharp
  name: op_BitwiseAnd(Vector<T>, Vector<T>)
  nameWithType: Vector<T>.op_BitwiseAnd(Vector<T>, Vector<T>)
  fullName: Vector<T>.op_BitwiseAnd(Vector<T>, Vector<T>)
  type: Operator
  assemblies:
  - System.Numerics.Vectors
  - netstandard
  namespace: System.Numerics
  summary: Returns a new vector by performing a bitwise `And` operation on each of the elements in two vectors.
  remarks: The <xref:System.Numerics.Vector%601.op_BitwiseAnd%2A> method defines the bitwise `And` operation for <xref:System.Numerics.Vector%601> objects.
  syntax:
    content: public static System.Numerics.Vector<T> op_BitwiseAnd (System.Numerics.Vector<T> left, System.Numerics.Vector<T> right);
    parameters:
    - id: left
      type: System.Numerics.Vector`1
      description: The first vector.
    - id: right
      type: System.Numerics.Vector`1
      description: The second vector.
    return:
      type: System.Numerics.Vector`1
      description: The vector that results from the bitwise `And` of <code>left</code> and <code>right</code>.
  overload: System.Numerics.Vector`1.op_BitwiseAnd*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Numerics/Vector`1.xml
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Numerics.Vector`1.op_BitwiseOr(System.Numerics.Vector{`0},System.Numerics.Vector{`0})
  commentId: M:System.Numerics.Vector`1.op_BitwiseOr(System.Numerics.Vector{`0},System.Numerics.Vector{`0})
  id: op_BitwiseOr(System.Numerics.Vector{`0},System.Numerics.Vector{`0})
  parent: System.Numerics.Vector`1
  langs:
  - csharp
  name: op_BitwiseOr(Vector<T>, Vector<T>)
  nameWithType: Vector<T>.op_BitwiseOr(Vector<T>, Vector<T>)
  fullName: Vector<T>.op_BitwiseOr(Vector<T>, Vector<T>)
  type: Operator
  assemblies:
  - System.Numerics.Vectors
  - netstandard
  namespace: System.Numerics
  summary: Returns a new vector by performing a bitwise `Or` operation on each of the elements in two vectors.
  remarks: The <xref:System.Numerics.Vector%601.op_BitwiseOr%2A> method defines the bitwise `Or` operation for <xref:System.Numerics.Vector%601> objects.
  syntax:
    content: public static System.Numerics.Vector<T> op_BitwiseOr (System.Numerics.Vector<T> left, System.Numerics.Vector<T> right);
    parameters:
    - id: left
      type: System.Numerics.Vector`1
      description: The first vector.
    - id: right
      type: System.Numerics.Vector`1
      description: The second vector.
    return:
      type: System.Numerics.Vector`1
      description: The vector that results from the bitwise `Or` of the elements in <code>left</code> and <code>right</code>.
  overload: System.Numerics.Vector`1.op_BitwiseOr*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Numerics/Vector`1.xml
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Numerics.Vector`1.op_Division(System.Numerics.Vector{`0},System.Numerics.Vector{`0})
  commentId: M:System.Numerics.Vector`1.op_Division(System.Numerics.Vector{`0},System.Numerics.Vector{`0})
  id: op_Division(System.Numerics.Vector{`0},System.Numerics.Vector{`0})
  parent: System.Numerics.Vector`1
  langs:
  - csharp
  name: op_Division(Vector<T>, Vector<T>)
  nameWithType: Vector<T>.op_Division(Vector<T>, Vector<T>)
  fullName: Vector<T>.op_Division(Vector<T>, Vector<T>)
  type: Operator
  assemblies:
  - System.Numerics.Vectors
  - netstandard
  namespace: System.Numerics
  summary: Divides the first vector by the second.
  remarks: The <xref:System.Numerics.Vector%601.op_Division%2A> method defines the division operation for <xref:System.Numerics.Vector%601> objects.
  syntax:
    content: public static System.Numerics.Vector<T> op_Division (System.Numerics.Vector<T> left, System.Numerics.Vector<T> right);
    parameters:
    - id: left
      type: System.Numerics.Vector`1
      description: The first vector.
    - id: right
      type: System.Numerics.Vector`1
      description: The second vector.
    return:
      type: System.Numerics.Vector`1
      description: The vector that results from dividing <code>left</code> by <code>right</code>.
  overload: System.Numerics.Vector`1.op_Division*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Numerics/Vector`1.xml
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Numerics.Vector`1.op_Equality(System.Numerics.Vector{`0},System.Numerics.Vector{`0})
  commentId: M:System.Numerics.Vector`1.op_Equality(System.Numerics.Vector{`0},System.Numerics.Vector{`0})
  id: op_Equality(System.Numerics.Vector{`0},System.Numerics.Vector{`0})
  parent: System.Numerics.Vector`1
  langs:
  - csharp
  name: op_Equality(Vector<T>, Vector<T>)
  nameWithType: Vector<T>.op_Equality(Vector<T>, Vector<T>)
  fullName: Vector<T>.op_Equality(Vector<T>, Vector<T>)
  type: Operator
  assemblies:
  - System.Numerics.Vectors
  - netstandard
  namespace: System.Numerics
  summary: Returns a value that indicates whether each pair of elements in two specified vectors are equal.
  remarks: Two vectors are equal if they are of the same type, have the same number of values, and each value in `left` is equal to the corresponding value in `right`.
  syntax:
    content: public static bool op_Equality (System.Numerics.Vector<T> left, System.Numerics.Vector<T> right);
    parameters:
    - id: left
      type: System.Numerics.Vector`1
      description: The first vector to compare.
    - id: right
      type: System.Numerics.Vector`1
      description: The second vector to compare.
    return:
      type: System.Boolean
      description: '`true` if <code>left</code> and <code>right</code> are equal; otherwise, `false`.'
  overload: System.Numerics.Vector`1.op_Equality*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Numerics/Vector`1.xml
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Numerics.Vector`1.op_ExclusiveOr(System.Numerics.Vector{`0},System.Numerics.Vector{`0})
  commentId: M:System.Numerics.Vector`1.op_ExclusiveOr(System.Numerics.Vector{`0},System.Numerics.Vector{`0})
  id: op_ExclusiveOr(System.Numerics.Vector{`0},System.Numerics.Vector{`0})
  parent: System.Numerics.Vector`1
  langs:
  - csharp
  name: op_ExclusiveOr(Vector<T>, Vector<T>)
  nameWithType: Vector<T>.op_ExclusiveOr(Vector<T>, Vector<T>)
  fullName: Vector<T>.op_ExclusiveOr(Vector<T>, Vector<T>)
  type: Operator
  assemblies:
  - System.Numerics.Vectors
  - netstandard
  namespace: System.Numerics
  summary: Returns a new vector by performing a bitwise `XOr` operation on each of the elements in two vectors.
  remarks: The <xref:System.Numerics.Vector%601.op_ExclusiveOr%2A> method defines the bitwise `XOr` operation for <xref:System.Numerics.Vector%601> objects.
  syntax:
    content: public static System.Numerics.Vector<T> op_ExclusiveOr (System.Numerics.Vector<T> left, System.Numerics.Vector<T> right);
    parameters:
    - id: left
      type: System.Numerics.Vector`1
      description: The first vector.
    - id: right
      type: System.Numerics.Vector`1
      description: The second vector.
    return:
      type: System.Numerics.Vector`1
      description: The vector that results from the bitwise `XOr` of the elements in <code>left</code> and <code>right</code>.
  overload: System.Numerics.Vector`1.op_ExclusiveOr*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Numerics/Vector`1.xml
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Numerics.Vector`1.op_Explicit(System.Numerics.Vector{T} to System.Numerics.Vector{System.UInt64})
  commentId: M:System.Numerics.Vector`1.op_Explicit(System.Numerics.Vector{`0})~System.Numerics.Vector{System.UInt64}
  id: op_Explicit(System.Numerics.Vector{T} to System.Numerics.Vector{System.UInt64})
  parent: System.Numerics.Vector`1
  langs:
  - csharp
  name: op_Explicit(Vector<T> to Vector<UInt64>)
  nameWithType: Vector<T>.op_Explicit(Vector<T> to Vector<UInt64>)
  fullName: Vector<T>.op_Explicit(Vector<T> to Vector<UInt64>)
  type: Operator
  assemblies:
  - System.Numerics.Vectors
  - netstandard
  namespace: System.Numerics
  summary: Reinterprets the bits of the specified vector into a vector of type <xref href="System.UInt64"></xref>.
  remarks: The <xref:System.Numerics.Vector%601.op_Explicit%2A> operator defines a narrowing conversion; it requires a casting operator (in C#) or a conversion method (in Visual Basic).
  syntax:
    content: >-
      [System.CLSCompliant(false)]

      public static System.Numerics.Vector<ulong> op_Explicit (System.Numerics.Vector<T> value);
    parameters:
    - id: value
      type: System.Numerics.Vector`1
      description: The vector to reinterpret.
    return:
      type: System.Numerics.Vector{System.UInt64}
      description: The reinterpreted vector.
  overload: System.Numerics.Vector`1.op_Explicit*
  exceptions: []
  attributes:
  - type: System.CLSCompliantAttribute
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Numerics/Vector`1.xml
- uid: System.Numerics.Vector`1.op_Explicit(System.Numerics.Vector{T} to System.Numerics.Vector{System.UInt32})
  commentId: M:System.Numerics.Vector`1.op_Explicit(System.Numerics.Vector{`0})~System.Numerics.Vector{System.UInt32}
  id: op_Explicit(System.Numerics.Vector{T} to System.Numerics.Vector{System.UInt32})
  parent: System.Numerics.Vector`1
  langs:
  - csharp
  name: op_Explicit(Vector<T> to Vector<UInt32>)
  nameWithType: Vector<T>.op_Explicit(Vector<T> to Vector<UInt32>)
  fullName: Vector<T>.op_Explicit(Vector<T> to Vector<UInt32>)
  type: Operator
  assemblies:
  - System.Numerics.Vectors
  - netstandard
  namespace: System.Numerics
  summary: Reinterprets the bits of the specified vector into a vector of type <xref href="System.UInt32"></xref>.
  remarks: The <xref:System.Numerics.Vector%601.op_Explicit%2A> operator defines a narrowing conversion; it requires a casting operator (in C#) or a conversion method (in Visual Basic).
  syntax:
    content: >-
      [System.CLSCompliant(false)]

      public static System.Numerics.Vector<uint> op_Explicit (System.Numerics.Vector<T> value);
    parameters:
    - id: value
      type: System.Numerics.Vector`1
      description: The vector to reinterpret.
    return:
      type: System.Numerics.Vector{System.UInt32}
      description: The reinterpreted vector.
  overload: System.Numerics.Vector`1.op_Explicit*
  exceptions: []
  attributes:
  - type: System.CLSCompliantAttribute
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Numerics/Vector`1.xml
- uid: System.Numerics.Vector`1.op_Explicit(System.Numerics.Vector{T} to System.Numerics.Vector{System.UInt16})
  commentId: M:System.Numerics.Vector`1.op_Explicit(System.Numerics.Vector{`0})~System.Numerics.Vector{System.UInt16}
  id: op_Explicit(System.Numerics.Vector{T} to System.Numerics.Vector{System.UInt16})
  parent: System.Numerics.Vector`1
  langs:
  - csharp
  name: op_Explicit(Vector<T> to Vector<UInt16>)
  nameWithType: Vector<T>.op_Explicit(Vector<T> to Vector<UInt16>)
  fullName: Vector<T>.op_Explicit(Vector<T> to Vector<UInt16>)
  type: Operator
  assemblies:
  - System.Numerics.Vectors
  - netstandard
  namespace: System.Numerics
  summary: Reinterprets the bits of the specified vector into a vector of type <xref href="System.UInt16"></xref>.
  remarks: The <xref:System.Numerics.Vector%601.op_Explicit%2A> operator defines a narrowing conversion; it requires a casting operator (in C#) or a conversion method (in Visual Basic).
  syntax:
    content: >-
      [System.CLSCompliant(false)]

      public static System.Numerics.Vector<ushort> op_Explicit (System.Numerics.Vector<T> value);
    parameters:
    - id: value
      type: System.Numerics.Vector`1
      description: The vector to reinterpret.
    return:
      type: System.Numerics.Vector{System.UInt16}
      description: The reinterpreted vector.
  overload: System.Numerics.Vector`1.op_Explicit*
  exceptions: []
  attributes:
  - type: System.CLSCompliantAttribute
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Numerics/Vector`1.xml
- uid: System.Numerics.Vector`1.op_Explicit(System.Numerics.Vector{T} to System.Numerics.Vector{System.Single})
  commentId: M:System.Numerics.Vector`1.op_Explicit(System.Numerics.Vector{`0})~System.Numerics.Vector{System.Single}
  id: op_Explicit(System.Numerics.Vector{T} to System.Numerics.Vector{System.Single})
  parent: System.Numerics.Vector`1
  langs:
  - csharp
  name: op_Explicit(Vector<T> to Vector<Single>)
  nameWithType: Vector<T>.op_Explicit(Vector<T> to Vector<Single>)
  fullName: Vector<T>.op_Explicit(Vector<T> to Vector<Single>)
  type: Operator
  assemblies:
  - System.Numerics.Vectors
  - netstandard
  namespace: System.Numerics
  summary: Reinterprets the bits of the specified vector into a vector of type <xref href="System.Single"></xref>.
  remarks: The <xref:System.Numerics.Vector%601.op_Explicit%2A> operator defines a narrowing conversion; it requires a casting operator (in C#) or a conversion method (in Visual Basic).
  syntax:
    content: public static System.Numerics.Vector<float> op_Explicit (System.Numerics.Vector<T> value);
    parameters:
    - id: value
      type: System.Numerics.Vector`1
      description: The vector to reinterpret.
    return:
      type: System.Numerics.Vector{System.Single}
      description: The reinterpreted vector.
  overload: System.Numerics.Vector`1.op_Explicit*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Numerics/Vector`1.xml
- uid: System.Numerics.Vector`1.op_Explicit(System.Numerics.Vector{T} to System.Numerics.Vector{System.SByte})
  commentId: M:System.Numerics.Vector`1.op_Explicit(System.Numerics.Vector{`0})~System.Numerics.Vector{System.SByte}
  id: op_Explicit(System.Numerics.Vector{T} to System.Numerics.Vector{System.SByte})
  parent: System.Numerics.Vector`1
  langs:
  - csharp
  name: op_Explicit(Vector<T> to Vector<SByte>)
  nameWithType: Vector<T>.op_Explicit(Vector<T> to Vector<SByte>)
  fullName: Vector<T>.op_Explicit(Vector<T> to Vector<SByte>)
  type: Operator
  assemblies:
  - System.Numerics.Vectors
  - netstandard
  namespace: System.Numerics
  summary: Reinterprets the bits of the specified vector into a vector of type <xref href="System.SByte"></xref>.
  remarks: The <xref:System.Numerics.Vector%601.op_Explicit%2A> operator defines a narrowing conversion; it requires a casting operator (in C#) or a conversion method (in Visual Basic).
  syntax:
    content: >-
      [System.CLSCompliant(false)]

      public static System.Numerics.Vector<sbyte> op_Explicit (System.Numerics.Vector<T> value);
    parameters:
    - id: value
      type: System.Numerics.Vector`1
      description: The vector to reinterpret.
    return:
      type: System.Numerics.Vector{System.SByte}
      description: The reinterpreted vector.
  overload: System.Numerics.Vector`1.op_Explicit*
  exceptions: []
  attributes:
  - type: System.CLSCompliantAttribute
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Numerics/Vector`1.xml
- uid: System.Numerics.Vector`1.op_Explicit(System.Numerics.Vector{T} to System.Numerics.Vector{System.Double})
  commentId: M:System.Numerics.Vector`1.op_Explicit(System.Numerics.Vector{`0})~System.Numerics.Vector{System.Double}
  id: op_Explicit(System.Numerics.Vector{T} to System.Numerics.Vector{System.Double})
  parent: System.Numerics.Vector`1
  langs:
  - csharp
  name: op_Explicit(Vector<T> to Vector<Double>)
  nameWithType: Vector<T>.op_Explicit(Vector<T> to Vector<Double>)
  fullName: Vector<T>.op_Explicit(Vector<T> to Vector<Double>)
  type: Operator
  assemblies:
  - System.Numerics.Vectors
  - netstandard
  namespace: System.Numerics
  summary: Reinterprets the bits of the specified vector into a vector of type <xref href="System.Double"></xref>.
  remarks: The <xref:System.Numerics.Vector%601.op_Explicit%2A> operator defines a narrowing conversion; it requires a casting operator (in C#) or a conversion method (in Visual Basic).
  syntax:
    content: public static System.Numerics.Vector<double> op_Explicit (System.Numerics.Vector<T> value);
    parameters:
    - id: value
      type: System.Numerics.Vector`1
      description: The vector to reinterpret.
    return:
      type: System.Numerics.Vector{System.Double}
      description: The reinterpreted vector.
  overload: System.Numerics.Vector`1.op_Explicit*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Numerics/Vector`1.xml
- uid: System.Numerics.Vector`1.op_Explicit(System.Numerics.Vector{T} to System.Numerics.Vector{System.Int32})
  commentId: M:System.Numerics.Vector`1.op_Explicit(System.Numerics.Vector{`0})~System.Numerics.Vector{System.Int32}
  id: op_Explicit(System.Numerics.Vector{T} to System.Numerics.Vector{System.Int32})
  parent: System.Numerics.Vector`1
  langs:
  - csharp
  name: op_Explicit(Vector<T> to Vector<Int32>)
  nameWithType: Vector<T>.op_Explicit(Vector<T> to Vector<Int32>)
  fullName: Vector<T>.op_Explicit(Vector<T> to Vector<Int32>)
  type: Operator
  assemblies:
  - System.Numerics.Vectors
  - netstandard
  namespace: System.Numerics
  summary: Reinterprets the bits of the specified vector into a vector of type <xref href="System.Int32"></xref>.
  remarks: The <xref:System.Numerics.Vector%601.op_Explicit%2A> operator defines a narrowing conversion; it requires a casting operator (in C#) or a conversion method (in Visual Basic).
  syntax:
    content: public static System.Numerics.Vector<int> op_Explicit (System.Numerics.Vector<T> value);
    parameters:
    - id: value
      type: System.Numerics.Vector`1
      description: The vector to reinterpret.
    return:
      type: System.Numerics.Vector{System.Int32}
      description: The reinterpreted vector.
  overload: System.Numerics.Vector`1.op_Explicit*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Numerics/Vector`1.xml
- uid: System.Numerics.Vector`1.op_Explicit(System.Numerics.Vector{T} to System.Numerics.Vector{System.Int16})
  commentId: M:System.Numerics.Vector`1.op_Explicit(System.Numerics.Vector{`0})~System.Numerics.Vector{System.Int16}
  id: op_Explicit(System.Numerics.Vector{T} to System.Numerics.Vector{System.Int16})
  parent: System.Numerics.Vector`1
  langs:
  - csharp
  name: op_Explicit(Vector<T> to Vector<Int16>)
  nameWithType: Vector<T>.op_Explicit(Vector<T> to Vector<Int16>)
  fullName: Vector<T>.op_Explicit(Vector<T> to Vector<Int16>)
  type: Operator
  assemblies:
  - System.Numerics.Vectors
  - netstandard
  namespace: System.Numerics
  summary: Reinterprets the bits of the specified vector into a vector of type <xref href="System.Int16"></xref>.
  remarks: The <xref:System.Numerics.Vector%601.op_Explicit%2A> operator defines a narrowing conversion; it requires a casting operator (in C#) or a conversion method (in Visual Basic).
  syntax:
    content: public static System.Numerics.Vector<short> op_Explicit (System.Numerics.Vector<T> value);
    parameters:
    - id: value
      type: System.Numerics.Vector`1
      description: The vector to reinterpret.
    return:
      type: System.Numerics.Vector{System.Int16}
      description: The reinterpreted vector.
  overload: System.Numerics.Vector`1.op_Explicit*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Numerics/Vector`1.xml
- uid: System.Numerics.Vector`1.op_Explicit(System.Numerics.Vector{T} to System.Numerics.Vector{System.Byte})
  commentId: M:System.Numerics.Vector`1.op_Explicit(System.Numerics.Vector{`0})~System.Numerics.Vector{System.Byte}
  id: op_Explicit(System.Numerics.Vector{T} to System.Numerics.Vector{System.Byte})
  parent: System.Numerics.Vector`1
  langs:
  - csharp
  name: op_Explicit(Vector<T> to Vector<Byte>)
  nameWithType: Vector<T>.op_Explicit(Vector<T> to Vector<Byte>)
  fullName: Vector<T>.op_Explicit(Vector<T> to Vector<Byte>)
  type: Operator
  assemblies:
  - System.Numerics.Vectors
  - netstandard
  namespace: System.Numerics
  summary: Reinterprets the bits of the specified vector into a vector of type <xref href="System.Byte"></xref>.
  remarks: The <xref:System.Numerics.Vector%601.op_Explicit%2A> operator defines a narrowing conversion; it requires a casting operator (in C#) or a conversion method (in Visual Basic).
  syntax:
    content: public static System.Numerics.Vector<byte> op_Explicit (System.Numerics.Vector<T> value);
    parameters:
    - id: value
      type: System.Numerics.Vector`1
      description: The vector to reinterpret.
    return:
      type: System.Numerics.Vector{System.Byte}
      description: The reinterpreted vector.
  overload: System.Numerics.Vector`1.op_Explicit*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Numerics/Vector`1.xml
- uid: System.Numerics.Vector`1.op_Explicit(System.Numerics.Vector{T} to System.Numerics.Vector{System.Int64})
  commentId: M:System.Numerics.Vector`1.op_Explicit(System.Numerics.Vector{`0})~System.Numerics.Vector{System.Int64}
  id: op_Explicit(System.Numerics.Vector{T} to System.Numerics.Vector{System.Int64})
  parent: System.Numerics.Vector`1
  langs:
  - csharp
  name: op_Explicit(Vector<T> to Vector<Int64>)
  nameWithType: Vector<T>.op_Explicit(Vector<T> to Vector<Int64>)
  fullName: Vector<T>.op_Explicit(Vector<T> to Vector<Int64>)
  type: Operator
  assemblies:
  - System.Numerics.Vectors
  - netstandard
  namespace: System.Numerics
  summary: Reinterprets the bits of the specified vector into a vector of type <xref href="System.Int64"></xref>.
  remarks: The <xref:System.Numerics.Vector%601.op_Explicit%2A> operator defines a narrowing conversion; it requires a casting operator (in C#) or a conversion method (in Visual Basic).
  syntax:
    content: public static System.Numerics.Vector<long> op_Explicit (System.Numerics.Vector<T> value);
    parameters:
    - id: value
      type: System.Numerics.Vector`1
      description: The vector to reinterpret.
    return:
      type: System.Numerics.Vector{System.Int64}
      description: The reinterpreted vector.
  overload: System.Numerics.Vector`1.op_Explicit*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Numerics/Vector`1.xml
- uid: System.Numerics.Vector`1.op_Inequality(System.Numerics.Vector{`0},System.Numerics.Vector{`0})
  commentId: M:System.Numerics.Vector`1.op_Inequality(System.Numerics.Vector{`0},System.Numerics.Vector{`0})
  id: op_Inequality(System.Numerics.Vector{`0},System.Numerics.Vector{`0})
  parent: System.Numerics.Vector`1
  langs:
  - csharp
  name: op_Inequality(Vector<T>, Vector<T>)
  nameWithType: Vector<T>.op_Inequality(Vector<T>, Vector<T>)
  fullName: Vector<T>.op_Inequality(Vector<T>, Vector<T>)
  type: Operator
  assemblies:
  - System.Numerics.Vectors
  - netstandard
  namespace: System.Numerics
  summary: Returns a value that indicates whether any single pair of elements in the specified vectors is equal.
  syntax:
    content: public static bool op_Inequality (System.Numerics.Vector<T> left, System.Numerics.Vector<T> right);
    parameters:
    - id: left
      type: System.Numerics.Vector`1
      description: The first vector to compare.
    - id: right
      type: System.Numerics.Vector`1
      description: The second vector to compare.
    return:
      type: System.Boolean
      description: '`true` if any element pairs in left and right are equal. `false` if no element pairs are equal.'
  overload: System.Numerics.Vector`1.op_Inequality*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Numerics/Vector`1.xml
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Numerics.Vector`1.op_Multiply(System.Numerics.Vector{`0},System.Numerics.Vector{`0})
  commentId: M:System.Numerics.Vector`1.op_Multiply(System.Numerics.Vector{`0},System.Numerics.Vector{`0})
  id: op_Multiply(System.Numerics.Vector{`0},System.Numerics.Vector{`0})
  parent: System.Numerics.Vector`1
  langs:
  - csharp
  name: op_Multiply(Vector<T>, Vector<T>)
  nameWithType: Vector<T>.op_Multiply(Vector<T>, Vector<T>)
  fullName: Vector<T>.op_Multiply(Vector<T>, Vector<T>)
  type: Operator
  assemblies:
  - System.Numerics.Vectors
  - netstandard
  namespace: System.Numerics
  summary: Multiplies two vectors together.
  remarks: The <xref:System.Numerics.Vector%601.op_Multiply%2A> method defines the multiplication operation for <xref:System.Numerics.Vector%601> objects.
  syntax:
    content: public static System.Numerics.Vector<T> op_Multiply (System.Numerics.Vector<T> left, System.Numerics.Vector<T> right);
    parameters:
    - id: left
      type: System.Numerics.Vector`1
      description: The first vector.
    - id: right
      type: System.Numerics.Vector`1
      description: The second vector.
    return:
      type: System.Numerics.Vector`1
      description: The product vector.
  overload: System.Numerics.Vector`1.op_Multiply*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Numerics/Vector`1.xml
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Numerics.Vector`1.op_Multiply(System.Numerics.Vector{`0},`0)
  commentId: M:System.Numerics.Vector`1.op_Multiply(System.Numerics.Vector{`0},`0)
  id: op_Multiply(System.Numerics.Vector{`0},`0)
  parent: System.Numerics.Vector`1
  langs:
  - csharp
  name: op_Multiply(Vector<T>, T)
  nameWithType: Vector<T>.op_Multiply(Vector<T>, T)
  fullName: Vector<T>.op_Multiply(Vector<T>, T)
  type: Operator
  assemblies:
  - System.Numerics.Vectors
  - netstandard
  namespace: System.Numerics
  summary: Multiplies a vector by a specified scalar value.
  remarks: The <xref:System.Numerics.Vector%601.op_Multiply%2A> method defines the multiplication operation for <xref:System.Numerics.Vector%601> objects.
  syntax:
    content: public static System.Numerics.Vector<T> op_Multiply (System.Numerics.Vector<T> value, T factor);
    parameters:
    - id: value
      type: System.Numerics.Vector`1
      description: The source vector.
    - id: factor
      type: T
      description: A scalar value.
    return:
      type: System.Numerics.Vector`1
      description: The scaled vector.
  overload: System.Numerics.Vector`1.op_Multiply*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Numerics/Vector`1.xml
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Numerics.Vector`1.op_Multiply(`0,System.Numerics.Vector{`0})
  commentId: M:System.Numerics.Vector`1.op_Multiply(`0,System.Numerics.Vector{`0})
  id: op_Multiply(`0,System.Numerics.Vector{`0})
  parent: System.Numerics.Vector`1
  langs:
  - csharp
  name: op_Multiply(T, Vector<T>)
  nameWithType: Vector<T>.op_Multiply(T, Vector<T>)
  fullName: Vector<T>.op_Multiply(T, Vector<T>)
  type: Operator
  assemblies:
  - System.Numerics.Vectors
  - netstandard
  namespace: System.Numerics
  summary: Multiplies a vector by the given scalar.
  remarks: The <xref:System.Numerics.Vector%601.op_Multiply%2A> method defines the multiplication operation for <xref:System.Numerics.Vector%601> objects.
  syntax:
    content: public static System.Numerics.Vector<T> op_Multiply (T factor, System.Numerics.Vector<T> value);
    parameters:
    - id: factor
      type: T
      description: The scalar value.
    - id: value
      type: System.Numerics.Vector`1
      description: The source vector.
    return:
      type: System.Numerics.Vector`1
      description: The scaled vector.
  overload: System.Numerics.Vector`1.op_Multiply*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Numerics/Vector`1.xml
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Numerics.Vector`1.op_OnesComplement(System.Numerics.Vector{`0})
  commentId: M:System.Numerics.Vector`1.op_OnesComplement(System.Numerics.Vector{`0})
  id: op_OnesComplement(System.Numerics.Vector{`0})
  parent: System.Numerics.Vector`1
  langs:
  - csharp
  name: op_OnesComplement(Vector<T>)
  nameWithType: Vector<T>.op_OnesComplement(Vector<T>)
  fullName: Vector<T>.op_OnesComplement(Vector<T>)
  type: Operator
  assemblies:
  - System.Numerics.Vectors
  - netstandard
  namespace: System.Numerics
  summary: Returns a new vector whose elements are obtained by taking the one's complement of a specified vector's elements.
  syntax:
    content: public static System.Numerics.Vector<T> op_OnesComplement (System.Numerics.Vector<T> value);
    parameters:
    - id: value
      type: System.Numerics.Vector`1
      description: The source vector.
    return:
      type: System.Numerics.Vector`1
      description: The one's complement vector.
  overload: System.Numerics.Vector`1.op_OnesComplement*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Numerics/Vector`1.xml
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Numerics.Vector`1.op_Subtraction(System.Numerics.Vector{`0},System.Numerics.Vector{`0})
  commentId: M:System.Numerics.Vector`1.op_Subtraction(System.Numerics.Vector{`0},System.Numerics.Vector{`0})
  id: op_Subtraction(System.Numerics.Vector{`0},System.Numerics.Vector{`0})
  parent: System.Numerics.Vector`1
  langs:
  - csharp
  name: op_Subtraction(Vector<T>, Vector<T>)
  nameWithType: Vector<T>.op_Subtraction(Vector<T>, Vector<T>)
  fullName: Vector<T>.op_Subtraction(Vector<T>, Vector<T>)
  type: Operator
  assemblies:
  - System.Numerics.Vectors
  - netstandard
  namespace: System.Numerics
  summary: Subtracts the second vector from the first.
  remarks: The <xref:System.Numerics.Vector%601.op_Subtraction%2A> method defines the subtraction operation for <xref:System.Numerics.Vector%601> objects.
  syntax:
    content: public static System.Numerics.Vector<T> op_Subtraction (System.Numerics.Vector<T> left, System.Numerics.Vector<T> right);
    parameters:
    - id: left
      type: System.Numerics.Vector`1
      description: The first vector.
    - id: right
      type: System.Numerics.Vector`1
      description: The second vector.
    return:
      type: System.Numerics.Vector`1
      description: The vector that results from subtracting <code>right</code> from <code>left</code>.
  overload: System.Numerics.Vector`1.op_Subtraction*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Numerics/Vector`1.xml
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Numerics.Vector`1.op_UnaryNegation(System.Numerics.Vector{`0})
  commentId: M:System.Numerics.Vector`1.op_UnaryNegation(System.Numerics.Vector{`0})
  id: op_UnaryNegation(System.Numerics.Vector{`0})
  parent: System.Numerics.Vector`1
  langs:
  - csharp
  name: op_UnaryNegation(Vector<T>)
  nameWithType: Vector<T>.op_UnaryNegation(Vector<T>)
  fullName: Vector<T>.op_UnaryNegation(Vector<T>)
  type: Operator
  assemblies:
  - System.Numerics.Vectors
  - netstandard
  namespace: System.Numerics
  summary: Negates a given vector.
  remarks: The <xref:System.Numerics.Vector%601.op_UnaryNegation%2A> method defines the unary negation operation for <xref:System.Numerics.Vector%601> objects.
  syntax:
    content: public static System.Numerics.Vector<T> op_UnaryNegation (System.Numerics.Vector<T> value);
    parameters:
    - id: value
      type: System.Numerics.Vector`1
      description: The vector to negate.
    return:
      type: System.Numerics.Vector`1
      description: The negated vector.
  overload: System.Numerics.Vector`1.op_UnaryNegation*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Numerics/Vector`1.xml
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Numerics.Vector`1.ToString(System.String,System.IFormatProvider)
  commentId: M:System.Numerics.Vector`1.ToString(System.String,System.IFormatProvider)
  id: ToString(System.String,System.IFormatProvider)
  parent: System.Numerics.Vector`1
  langs:
  - csharp
  name: ToString(String, IFormatProvider)
  nameWithType: Vector<T>.ToString(String, IFormatProvider)
  fullName: Vector<T>.ToString(String, IFormatProvider)
  type: Method
  assemblies:
  - System.Numerics.Vectors
  - netstandard
  namespace: System.Numerics
  summary: Returns the string representation of this vector using the specified format string to format individual elements and the specified format provider to define culture-specific formatting.
  remarks: This method returns a string in which each element of the vector is formatted using `format` and `formatProvider`, and the format provider's <xref:System.Globalization.NumberFormatInfo.NumberGroupSeparator%2A?displayProperty=fullName> property followed by a space is used to separate each element.
  syntax:
    content: public string ToString (string format, IFormatProvider formatProvider);
    parameters:
    - id: format
      type: System.String
      description: A  or  that defines the format of individual elements.
    - id: formatProvider
      type: System.IFormatProvider
      description: A format provider that supplies culture-specific formatting information.
    return:
      type: System.String
      description: The string representation of the current instance.
  overload: System.Numerics.Vector`1.ToString*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Numerics/Vector`1.xml
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Numerics.Vector`1.ToString
  commentId: M:System.Numerics.Vector`1.ToString
  id: ToString
  parent: System.Numerics.Vector`1
  langs:
  - csharp
  name: ToString()
  nameWithType: Vector<T>.ToString()
  fullName: Vector<T>.ToString()
  type: Method
  assemblies:
  - System.Numerics.Vectors
  - netstandard
  namespace: System.Numerics
  summary: Returns the string representation of this vector using default formatting.
  remarks: This method returns a string in which each element of the vector is formatted using the "G" (general) format string and the formatting conventions of the current thread culture. The current culture's <xref:System.Globalization.NumberFormatInfo.NumberGroupSeparator%2A?displayProperty=fullName> property followed by a space is used to separate each element.
  syntax:
    content: public override string ToString ();
    parameters: []
    return:
      type: System.String
      description: The string representation of this vector.
  overload: System.Numerics.Vector`1.ToString*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Numerics/Vector`1.xml
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Numerics.Vector`1.ToString(System.String)
  commentId: M:System.Numerics.Vector`1.ToString(System.String)
  id: ToString(System.String)
  parent: System.Numerics.Vector`1
  langs:
  - csharp
  name: ToString(String)
  nameWithType: Vector<T>.ToString(String)
  fullName: Vector<T>.ToString(String)
  type: Method
  assemblies:
  - System.Numerics.Vectors
  - netstandard
  namespace: System.Numerics
  summary: Returns the string representation of this vector using the specified format string to format individual elements.
  remarks: This method returns a string in which each element of the vector is formatted using `format` and the current culture's formatting conventions. The current culture's <xref:System.Globalization.NumberFormatInfo.NumberGroupSeparator%2A?displayProperty=fullName> property followed by a space is used to separate each element.
  syntax:
    content: public string ToString (string format);
    parameters:
    - id: format
      type: System.String
      description: A  or  that defines the format of individual elements.
    return:
      type: System.String
      description: The string representation of the current instance.
  overload: System.Numerics.Vector`1.ToString*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Numerics/Vector`1.xml
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
- uid: System.Numerics.Vector`1.Zero
  commentId: P:System.Numerics.Vector`1.Zero
  id: Zero
  parent: System.Numerics.Vector`1
  langs:
  - csharp
  name: Zero
  nameWithType: Vector<T>.Zero
  fullName: Vector<T>.Zero
  type: Property
  assemblies:
  - System.Numerics.Vectors
  - netstandard
  namespace: System.Numerics
  summary: Returns a vector containing all zeroes.
  syntax:
    content: public static System.Numerics.Vector<T> Zero { get; }
    return:
      type: System.Numerics.Vector`1
      description: A vector containing all zeroes.
  overload: System.Numerics.Vector`1.Zero*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Numerics/Vector`1.xml
  author: rpetrusha
  ms.author: ronpet
  manager: wpickett
references:
- uid: System.ValueType
  parent: System
  isExternal: false
  name: ValueType
  nameWithType: ValueType
  fullName: System.ValueType
- uid: System.ArgumentNullException
  parent: System
  isExternal: false
  name: ArgumentNullException
  nameWithType: ArgumentNullException
  fullName: System.ArgumentNullException
- uid: System.IndexOutOfRangeException
  parent: System
  isExternal: false
  name: IndexOutOfRangeException
  nameWithType: IndexOutOfRangeException
  fullName: System.IndexOutOfRangeException
- uid: System.ArgumentException
  parent: System
  isExternal: false
  name: ArgumentException
  nameWithType: ArgumentException
  fullName: System.ArgumentException
- uid: System.ArgumentOutOfRangeException
  parent: System
  isExternal: false
  name: ArgumentOutOfRangeException
  nameWithType: ArgumentOutOfRangeException
  fullName: System.ArgumentOutOfRangeException
- uid: System.NotSupportedException
  parent: System
  isExternal: false
  name: NotSupportedException
  nameWithType: NotSupportedException
  fullName: System.NotSupportedException
- uid: System.Numerics.Vector`1.#ctor(`0)
  parent: System.Numerics.Vector`1
  isExternal: false
  name: Vector<T>(T)
  nameWithType: Vector<T>.Vector<T>(T)
  fullName: Vector<T>.Vector<T>(T)
- uid: T
  isExternal: true
  name: T
  nameWithType: T
  fullName: T
- uid: System.Numerics.Vector`1.#ctor(`0[])
  parent: System.Numerics.Vector`1
  isExternal: false
  name: Vector<T>(T[])
  nameWithType: Vector<T>.Vector<T>(T[])
  fullName: Vector<T>.Vector<T>(T[])
- uid: T[]
  isExternal: true
  name: T[]
  nameWithType: T[]
  fullName: T[]
  spec.csharp:
  - uid: T
    name: T
    nameWithType: T
    fullName: T
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Numerics.Vector`1.#ctor(`0[],System.Int32)
  parent: System.Numerics.Vector`1
  isExternal: false
  name: Vector<T>(T[], Int32)
  nameWithType: Vector<T>.Vector<T>(T[], Int32)
  fullName: Vector<T>.Vector<T>(T[], Int32)
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Numerics.Vector`1.CopyTo(`0[])
  parent: System.Numerics.Vector`1
  isExternal: false
  name: CopyTo(T[])
  nameWithType: Vector<T>.CopyTo(T[])
  fullName: Vector<T>.CopyTo(T[])
- uid: System.Numerics.Vector`1.CopyTo(`0[],System.Int32)
  parent: System.Numerics.Vector`1
  isExternal: false
  name: CopyTo(T[], Int32)
  nameWithType: Vector<T>.CopyTo(T[], Int32)
  fullName: Vector<T>.CopyTo(T[], Int32)
- uid: System.Numerics.Vector`1.Count
  parent: System.Numerics.Vector`1
  isExternal: false
  name: Count
  nameWithType: Vector<T>.Count
  fullName: Vector<T>.Count
- uid: System.Numerics.Vector`1.Equals(System.Numerics.Vector{`0})
  parent: System.Numerics.Vector`1
  isExternal: false
  name: Equals(Vector<T>)
  nameWithType: Vector<T>.Equals(Vector<T>)
  fullName: Vector<T>.Equals(Vector<T>)
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Numerics.Vector`1
  parent: System.Numerics
  isExternal: false
  name: Vector<T>
  nameWithType: Vector<T>
  fullName: System.Numerics.Vector<T>
- uid: System.Numerics.Vector`1.Equals(System.Object)
  parent: System.Numerics.Vector`1
  isExternal: false
  name: Equals(Object)
  nameWithType: Vector<T>.Equals(Object)
  fullName: Vector<T>.Equals(Object)
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Numerics.Vector`1.GetHashCode
  parent: System.Numerics.Vector`1
  isExternal: false
  name: GetHashCode()
  nameWithType: Vector<T>.GetHashCode()
  fullName: Vector<T>.GetHashCode()
- uid: System.Numerics.Vector`1.Item(System.Int32)
  parent: System.Numerics.Vector`1
  isExternal: false
  name: Item(Int32)
  nameWithType: Vector<T>.Item(Int32)
  fullName: Vector<T>.Item(Int32)
- uid: System.Numerics.Vector`1.One
  parent: System.Numerics.Vector`1
  isExternal: false
  name: One
  nameWithType: Vector<T>.One
  fullName: Vector<T>.One
- uid: System.Numerics.Vector`1.op_Addition(System.Numerics.Vector{`0},System.Numerics.Vector{`0})
  parent: System.Numerics.Vector`1
  isExternal: false
  name: op_Addition(Vector<T>, Vector<T>)
  nameWithType: Vector<T>.op_Addition(Vector<T>, Vector<T>)
  fullName: Vector<T>.op_Addition(Vector<T>, Vector<T>)
- uid: System.Numerics.Vector`1.op_BitwiseAnd(System.Numerics.Vector{`0},System.Numerics.Vector{`0})
  parent: System.Numerics.Vector`1
  isExternal: false
  name: op_BitwiseAnd(Vector<T>, Vector<T>)
  nameWithType: Vector<T>.op_BitwiseAnd(Vector<T>, Vector<T>)
  fullName: Vector<T>.op_BitwiseAnd(Vector<T>, Vector<T>)
- uid: System.Numerics.Vector`1.op_BitwiseOr(System.Numerics.Vector{`0},System.Numerics.Vector{`0})
  parent: System.Numerics.Vector`1
  isExternal: false
  name: op_BitwiseOr(Vector<T>, Vector<T>)
  nameWithType: Vector<T>.op_BitwiseOr(Vector<T>, Vector<T>)
  fullName: Vector<T>.op_BitwiseOr(Vector<T>, Vector<T>)
- uid: System.Numerics.Vector`1.op_Division(System.Numerics.Vector{`0},System.Numerics.Vector{`0})
  parent: System.Numerics.Vector`1
  isExternal: false
  name: op_Division(Vector<T>, Vector<T>)
  nameWithType: Vector<T>.op_Division(Vector<T>, Vector<T>)
  fullName: Vector<T>.op_Division(Vector<T>, Vector<T>)
- uid: System.Numerics.Vector`1.op_Equality(System.Numerics.Vector{`0},System.Numerics.Vector{`0})
  parent: System.Numerics.Vector`1
  isExternal: false
  name: op_Equality(Vector<T>, Vector<T>)
  nameWithType: Vector<T>.op_Equality(Vector<T>, Vector<T>)
  fullName: Vector<T>.op_Equality(Vector<T>, Vector<T>)
- uid: System.Numerics.Vector`1.op_ExclusiveOr(System.Numerics.Vector{`0},System.Numerics.Vector{`0})
  parent: System.Numerics.Vector`1
  isExternal: false
  name: op_ExclusiveOr(Vector<T>, Vector<T>)
  nameWithType: Vector<T>.op_ExclusiveOr(Vector<T>, Vector<T>)
  fullName: Vector<T>.op_ExclusiveOr(Vector<T>, Vector<T>)
- uid: System.Numerics.Vector`1.op_Explicit(System.Numerics.Vector{T} to System.Numerics.Vector{System.UInt64})
  parent: System.Numerics.Vector`1
  isExternal: false
  name: op_Explicit(Vector<T> to Vector<UInt64>)
  nameWithType: Vector<T>.op_Explicit(Vector<T> to Vector<UInt64>)
  fullName: Vector<T>.op_Explicit(Vector<T> to Vector<UInt64>)
- uid: System.UInt64
  name: UInt64
  nameWithType: UInt64
  fullName: System.UInt64
- uid: System.Numerics.Vector{System.UInt64}
  parent: System.Numerics
  isExternal: false
  name: Vector<UInt64>
  nameWithType: Vector<UInt64>
  fullName: System.Numerics.Vector<System.UInt64>
  spec.csharp:
  - uid: System.Numerics.Vector`1
    name: Vector
    nameWithType: Vector
    fullName: System.Numerics.Vector
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.UInt64
    name: UInt64
    nameWithType: UInt64
    fullName: System.UInt64
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Numerics.Vector`1.op_Explicit(System.Numerics.Vector{T} to System.Numerics.Vector{System.UInt32})
  parent: System.Numerics.Vector`1
  isExternal: false
  name: op_Explicit(Vector<T> to Vector<UInt32>)
  nameWithType: Vector<T>.op_Explicit(Vector<T> to Vector<UInt32>)
  fullName: Vector<T>.op_Explicit(Vector<T> to Vector<UInt32>)
- uid: System.UInt32
  name: UInt32
  nameWithType: UInt32
  fullName: System.UInt32
- uid: System.Numerics.Vector{System.UInt32}
  parent: System.Numerics
  isExternal: false
  name: Vector<UInt32>
  nameWithType: Vector<UInt32>
  fullName: System.Numerics.Vector<System.UInt32>
  spec.csharp:
  - uid: System.Numerics.Vector`1
    name: Vector
    nameWithType: Vector
    fullName: System.Numerics.Vector
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.UInt32
    name: UInt32
    nameWithType: UInt32
    fullName: System.UInt32
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Numerics.Vector`1.op_Explicit(System.Numerics.Vector{T} to System.Numerics.Vector{System.UInt16})
  parent: System.Numerics.Vector`1
  isExternal: false
  name: op_Explicit(Vector<T> to Vector<UInt16>)
  nameWithType: Vector<T>.op_Explicit(Vector<T> to Vector<UInt16>)
  fullName: Vector<T>.op_Explicit(Vector<T> to Vector<UInt16>)
- uid: System.UInt16
  name: UInt16
  nameWithType: UInt16
  fullName: System.UInt16
- uid: System.Numerics.Vector{System.UInt16}
  parent: System.Numerics
  isExternal: false
  name: Vector<UInt16>
  nameWithType: Vector<UInt16>
  fullName: System.Numerics.Vector<System.UInt16>
  spec.csharp:
  - uid: System.Numerics.Vector`1
    name: Vector
    nameWithType: Vector
    fullName: System.Numerics.Vector
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.UInt16
    name: UInt16
    nameWithType: UInt16
    fullName: System.UInt16
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Numerics.Vector`1.op_Explicit(System.Numerics.Vector{T} to System.Numerics.Vector{System.Single})
  parent: System.Numerics.Vector`1
  isExternal: false
  name: op_Explicit(Vector<T> to Vector<Single>)
  nameWithType: Vector<T>.op_Explicit(Vector<T> to Vector<Single>)
  fullName: Vector<T>.op_Explicit(Vector<T> to Vector<Single>)
- uid: System.Single
  name: Single
  nameWithType: Single
  fullName: System.Single
- uid: System.Numerics.Vector{System.Single}
  parent: System.Numerics
  isExternal: false
  name: Vector<Single>
  nameWithType: Vector<Single>
  fullName: System.Numerics.Vector<System.Single>
  spec.csharp:
  - uid: System.Numerics.Vector`1
    name: Vector
    nameWithType: Vector
    fullName: System.Numerics.Vector
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Single
    name: Single
    nameWithType: Single
    fullName: System.Single
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Numerics.Vector`1.op_Explicit(System.Numerics.Vector{T} to System.Numerics.Vector{System.SByte})
  parent: System.Numerics.Vector`1
  isExternal: false
  name: op_Explicit(Vector<T> to Vector<SByte>)
  nameWithType: Vector<T>.op_Explicit(Vector<T> to Vector<SByte>)
  fullName: Vector<T>.op_Explicit(Vector<T> to Vector<SByte>)
- uid: System.SByte
  name: SByte
  nameWithType: SByte
  fullName: System.SByte
- uid: System.Numerics.Vector{System.SByte}
  parent: System.Numerics
  isExternal: false
  name: Vector<SByte>
  nameWithType: Vector<SByte>
  fullName: System.Numerics.Vector<System.SByte>
  spec.csharp:
  - uid: System.Numerics.Vector`1
    name: Vector
    nameWithType: Vector
    fullName: System.Numerics.Vector
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.SByte
    name: SByte
    nameWithType: SByte
    fullName: System.SByte
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Numerics.Vector`1.op_Explicit(System.Numerics.Vector{T} to System.Numerics.Vector{System.Double})
  parent: System.Numerics.Vector`1
  isExternal: false
  name: op_Explicit(Vector<T> to Vector<Double>)
  nameWithType: Vector<T>.op_Explicit(Vector<T> to Vector<Double>)
  fullName: Vector<T>.op_Explicit(Vector<T> to Vector<Double>)
- uid: System.Double
  name: Double
  nameWithType: Double
  fullName: System.Double
- uid: System.Numerics.Vector{System.Double}
  parent: System.Numerics
  isExternal: false
  name: Vector<Double>
  nameWithType: Vector<Double>
  fullName: System.Numerics.Vector<System.Double>
  spec.csharp:
  - uid: System.Numerics.Vector`1
    name: Vector
    nameWithType: Vector
    fullName: System.Numerics.Vector
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Double
    name: Double
    nameWithType: Double
    fullName: System.Double
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Numerics.Vector`1.op_Explicit(System.Numerics.Vector{T} to System.Numerics.Vector{System.Int32})
  parent: System.Numerics.Vector`1
  isExternal: false
  name: op_Explicit(Vector<T> to Vector<Int32>)
  nameWithType: Vector<T>.op_Explicit(Vector<T> to Vector<Int32>)
  fullName: Vector<T>.op_Explicit(Vector<T> to Vector<Int32>)
- uid: System.Numerics.Vector{System.Int32}
  parent: System.Numerics
  isExternal: false
  name: Vector<Int32>
  nameWithType: Vector<Int32>
  fullName: System.Numerics.Vector<System.Int32>
  spec.csharp:
  - uid: System.Numerics.Vector`1
    name: Vector
    nameWithType: Vector
    fullName: System.Numerics.Vector
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Numerics.Vector`1.op_Explicit(System.Numerics.Vector{T} to System.Numerics.Vector{System.Int16})
  parent: System.Numerics.Vector`1
  isExternal: false
  name: op_Explicit(Vector<T> to Vector<Int16>)
  nameWithType: Vector<T>.op_Explicit(Vector<T> to Vector<Int16>)
  fullName: Vector<T>.op_Explicit(Vector<T> to Vector<Int16>)
- uid: System.Int16
  name: Int16
  nameWithType: Int16
  fullName: System.Int16
- uid: System.Numerics.Vector{System.Int16}
  parent: System.Numerics
  isExternal: false
  name: Vector<Int16>
  nameWithType: Vector<Int16>
  fullName: System.Numerics.Vector<System.Int16>
  spec.csharp:
  - uid: System.Numerics.Vector`1
    name: Vector
    nameWithType: Vector
    fullName: System.Numerics.Vector
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Int16
    name: Int16
    nameWithType: Int16
    fullName: System.Int16
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Numerics.Vector`1.op_Explicit(System.Numerics.Vector{T} to System.Numerics.Vector{System.Byte})
  parent: System.Numerics.Vector`1
  isExternal: false
  name: op_Explicit(Vector<T> to Vector<Byte>)
  nameWithType: Vector<T>.op_Explicit(Vector<T> to Vector<Byte>)
  fullName: Vector<T>.op_Explicit(Vector<T> to Vector<Byte>)
- uid: System.Byte
  name: Byte
  nameWithType: Byte
  fullName: System.Byte
- uid: System.Numerics.Vector{System.Byte}
  parent: System.Numerics
  isExternal: false
  name: Vector<Byte>
  nameWithType: Vector<Byte>
  fullName: System.Numerics.Vector<System.Byte>
  spec.csharp:
  - uid: System.Numerics.Vector`1
    name: Vector
    nameWithType: Vector
    fullName: System.Numerics.Vector
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Numerics.Vector`1.op_Explicit(System.Numerics.Vector{T} to System.Numerics.Vector{System.Int64})
  parent: System.Numerics.Vector`1
  isExternal: false
  name: op_Explicit(Vector<T> to Vector<Int64>)
  nameWithType: Vector<T>.op_Explicit(Vector<T> to Vector<Int64>)
  fullName: Vector<T>.op_Explicit(Vector<T> to Vector<Int64>)
- uid: System.Int64
  name: Int64
  nameWithType: Int64
  fullName: System.Int64
- uid: System.Numerics.Vector{System.Int64}
  parent: System.Numerics
  isExternal: false
  name: Vector<Int64>
  nameWithType: Vector<Int64>
  fullName: System.Numerics.Vector<System.Int64>
  spec.csharp:
  - uid: System.Numerics.Vector`1
    name: Vector
    nameWithType: Vector
    fullName: System.Numerics.Vector
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Int64
    name: Int64
    nameWithType: Int64
    fullName: System.Int64
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Numerics.Vector`1.op_Inequality(System.Numerics.Vector{`0},System.Numerics.Vector{`0})
  parent: System.Numerics.Vector`1
  isExternal: false
  name: op_Inequality(Vector<T>, Vector<T>)
  nameWithType: Vector<T>.op_Inequality(Vector<T>, Vector<T>)
  fullName: Vector<T>.op_Inequality(Vector<T>, Vector<T>)
- uid: System.Numerics.Vector`1.op_Multiply(System.Numerics.Vector{`0},System.Numerics.Vector{`0})
  parent: System.Numerics.Vector`1
  isExternal: false
  name: op_Multiply(Vector<T>, Vector<T>)
  nameWithType: Vector<T>.op_Multiply(Vector<T>, Vector<T>)
  fullName: Vector<T>.op_Multiply(Vector<T>, Vector<T>)
- uid: System.Numerics.Vector`1.op_Multiply(System.Numerics.Vector{`0},`0)
  parent: System.Numerics.Vector`1
  isExternal: false
  name: op_Multiply(Vector<T>, T)
  nameWithType: Vector<T>.op_Multiply(Vector<T>, T)
  fullName: Vector<T>.op_Multiply(Vector<T>, T)
- uid: System.Numerics.Vector`1.op_Multiply(`0,System.Numerics.Vector{`0})
  parent: System.Numerics.Vector`1
  isExternal: false
  name: op_Multiply(T, Vector<T>)
  nameWithType: Vector<T>.op_Multiply(T, Vector<T>)
  fullName: Vector<T>.op_Multiply(T, Vector<T>)
- uid: System.Numerics.Vector`1.op_OnesComplement(System.Numerics.Vector{`0})
  parent: System.Numerics.Vector`1
  isExternal: false
  name: op_OnesComplement(Vector<T>)
  nameWithType: Vector<T>.op_OnesComplement(Vector<T>)
  fullName: Vector<T>.op_OnesComplement(Vector<T>)
- uid: System.Numerics.Vector`1.op_Subtraction(System.Numerics.Vector{`0},System.Numerics.Vector{`0})
  parent: System.Numerics.Vector`1
  isExternal: false
  name: op_Subtraction(Vector<T>, Vector<T>)
  nameWithType: Vector<T>.op_Subtraction(Vector<T>, Vector<T>)
  fullName: Vector<T>.op_Subtraction(Vector<T>, Vector<T>)
- uid: System.Numerics.Vector`1.op_UnaryNegation(System.Numerics.Vector{`0})
  parent: System.Numerics.Vector`1
  isExternal: false
  name: op_UnaryNegation(Vector<T>)
  nameWithType: Vector<T>.op_UnaryNegation(Vector<T>)
  fullName: Vector<T>.op_UnaryNegation(Vector<T>)
- uid: System.Numerics.Vector`1.ToString(System.String,System.IFormatProvider)
  parent: System.Numerics.Vector`1
  isExternal: false
  name: ToString(String, IFormatProvider)
  nameWithType: Vector<T>.ToString(String, IFormatProvider)
  fullName: Vector<T>.ToString(String, IFormatProvider)
- uid: System.String
  parent: System
  isExternal: false
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.IFormatProvider
  parent: System
  isExternal: false
  name: IFormatProvider
  nameWithType: IFormatProvider
  fullName: System.IFormatProvider
- uid: System.Numerics.Vector`1.ToString
  parent: System.Numerics.Vector`1
  isExternal: false
  name: ToString()
  nameWithType: Vector<T>.ToString()
  fullName: Vector<T>.ToString()
- uid: System.Numerics.Vector`1.ToString(System.String)
  parent: System.Numerics.Vector`1
  isExternal: false
  name: ToString(String)
  nameWithType: Vector<T>.ToString(String)
  fullName: Vector<T>.ToString(String)
- uid: System.Numerics.Vector`1.Zero
  parent: System.Numerics.Vector`1
  isExternal: false
  name: Zero
  nameWithType: Vector<T>.Zero
  fullName: Vector<T>.Zero
- uid: System.Numerics.Vector`1.#ctor*
  parent: System.Numerics.Vector`1
  isExternal: false
  name: Vector<T>
  nameWithType: Vector<T>.Vector<T>
  fullName: Vector<T>.Vector<T>
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Numerics/Vector`1.xml
- uid: System.Numerics.Vector`1.CopyTo*
  parent: System.Numerics.Vector`1
  isExternal: false
  name: CopyTo
  nameWithType: Vector<T>.CopyTo
  fullName: Vector<T>.CopyTo
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Numerics/Vector`1.xml
- uid: System.Numerics.Vector`1.Count*
  parent: System.Numerics.Vector`1
  isExternal: false
  name: Count
  nameWithType: Vector<T>.Count
  fullName: Vector<T>.Count
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Numerics/Vector`1.xml
- uid: System.Numerics.Vector`1.Equals*
  parent: System.Numerics.Vector`1
  isExternal: false
  name: Equals
  nameWithType: Vector<T>.Equals
  fullName: Vector<T>.Equals
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Numerics/Vector`1.xml
- uid: System.Numerics.Vector`1.GetHashCode*
  parent: System.Numerics.Vector`1
  isExternal: false
  name: GetHashCode
  nameWithType: Vector<T>.GetHashCode
  fullName: Vector<T>.GetHashCode
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Numerics/Vector`1.xml
- uid: System.Numerics.Vector`1.Item*
  parent: System.Numerics.Vector`1
  isExternal: false
  name: Item
  nameWithType: Vector<T>.Item
  fullName: Vector<T>.Item
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Numerics/Vector`1.xml
- uid: System.Numerics.Vector`1.One*
  parent: System.Numerics.Vector`1
  isExternal: false
  name: One
  nameWithType: Vector<T>.One
  fullName: Vector<T>.One
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Numerics/Vector`1.xml
- uid: System.Numerics.Vector`1.op_Addition*
  parent: System.Numerics.Vector`1
  isExternal: false
  name: op_Addition
  nameWithType: Vector<T>.op_Addition
  fullName: Vector<T>.op_Addition
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Numerics/Vector`1.xml
- uid: System.Numerics.Vector`1.op_BitwiseAnd*
  parent: System.Numerics.Vector`1
  isExternal: false
  name: op_BitwiseAnd
  nameWithType: Vector<T>.op_BitwiseAnd
  fullName: Vector<T>.op_BitwiseAnd
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Numerics/Vector`1.xml
- uid: System.Numerics.Vector`1.op_BitwiseOr*
  parent: System.Numerics.Vector`1
  isExternal: false
  name: op_BitwiseOr
  nameWithType: Vector<T>.op_BitwiseOr
  fullName: Vector<T>.op_BitwiseOr
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Numerics/Vector`1.xml
- uid: System.Numerics.Vector`1.op_Division*
  parent: System.Numerics.Vector`1
  isExternal: false
  name: op_Division
  nameWithType: Vector<T>.op_Division
  fullName: Vector<T>.op_Division
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Numerics/Vector`1.xml
- uid: System.Numerics.Vector`1.op_Equality*
  parent: System.Numerics.Vector`1
  isExternal: false
  name: op_Equality
  nameWithType: Vector<T>.op_Equality
  fullName: Vector<T>.op_Equality
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Numerics/Vector`1.xml
- uid: System.Numerics.Vector`1.op_ExclusiveOr*
  parent: System.Numerics.Vector`1
  isExternal: false
  name: op_ExclusiveOr
  nameWithType: Vector<T>.op_ExclusiveOr
  fullName: Vector<T>.op_ExclusiveOr
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Numerics/Vector`1.xml
- uid: System.Numerics.Vector`1.op_Explicit*
  parent: System.Numerics.Vector`1
  isExternal: false
  name: op_Explicit
  nameWithType: Vector<T>.op_Explicit
  fullName: Vector<T>.op_Explicit
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Numerics/Vector`1.xml
- uid: System.Numerics.Vector`1.op_Inequality*
  parent: System.Numerics.Vector`1
  isExternal: false
  name: op_Inequality
  nameWithType: Vector<T>.op_Inequality
  fullName: Vector<T>.op_Inequality
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Numerics/Vector`1.xml
- uid: System.Numerics.Vector`1.op_Multiply*
  parent: System.Numerics.Vector`1
  isExternal: false
  name: op_Multiply
  nameWithType: Vector<T>.op_Multiply
  fullName: Vector<T>.op_Multiply
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Numerics/Vector`1.xml
- uid: System.Numerics.Vector`1.op_OnesComplement*
  parent: System.Numerics.Vector`1
  isExternal: false
  name: op_OnesComplement
  nameWithType: Vector<T>.op_OnesComplement
  fullName: Vector<T>.op_OnesComplement
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Numerics/Vector`1.xml
- uid: System.Numerics.Vector`1.op_Subtraction*
  parent: System.Numerics.Vector`1
  isExternal: false
  name: op_Subtraction
  nameWithType: Vector<T>.op_Subtraction
  fullName: Vector<T>.op_Subtraction
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Numerics/Vector`1.xml
- uid: System.Numerics.Vector`1.op_UnaryNegation*
  parent: System.Numerics.Vector`1
  isExternal: false
  name: op_UnaryNegation
  nameWithType: Vector<T>.op_UnaryNegation
  fullName: Vector<T>.op_UnaryNegation
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Numerics/Vector`1.xml
- uid: System.Numerics.Vector`1.ToString*
  parent: System.Numerics.Vector`1
  isExternal: false
  name: ToString
  nameWithType: Vector<T>.ToString
  fullName: Vector<T>.ToString
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Numerics/Vector`1.xml
- uid: System.Numerics.Vector`1.Zero*
  parent: System.Numerics.Vector`1
  isExternal: false
  name: Zero
  nameWithType: Vector<T>.Zero
  fullName: Vector<T>.Zero
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  - xamarinandroid-7.1
  - xamarinios-10.8
  - xamarinmac-3.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Numerics/Vector`1.xml
- uid: System.IEquatable`1
  name: IEquatable<T>
  nameWithType: IEquatable<T>
  fullName: System.IEquatable<T>
- uid: System.IEquatable{System.Numerics.Vector{T}}
  parent: System
  isExternal: false
  name: IEquatable<Vector<T>>
  nameWithType: IEquatable<Vector<T>>
  fullName: System.IEquatable<System.Numerics.Vector<T>>
  spec.csharp:
  - uid: System.IEquatable`1
    name: IEquatable
    nameWithType: IEquatable
    fullName: System.IEquatable
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Numerics.Vector`1
    name: Vector
    nameWithType: Vector
    fullName: System.Numerics.Vector
  - name: <
    nameWithType: <
    fullName: <
  - uid: T
    name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.IFormattable
  parent: System
  isExternal: false
  name: IFormattable
  nameWithType: IFormattable
  fullName: System.IFormattable

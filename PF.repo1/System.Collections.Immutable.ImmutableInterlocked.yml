### YamlMime:ManagedReference
items:
- uid: System.Collections.Immutable.ImmutableInterlocked
  commentId: T:System.Collections.Immutable.ImmutableInterlocked
  id: ImmutableInterlocked
  children:
  - System.Collections.Immutable.ImmutableInterlocked.AddOrUpdate``2(System.Collections.Immutable.ImmutableDictionary{``0,``1}@,``0,System.Func{``0,``1},System.Func{``0,``1,``1})
  - System.Collections.Immutable.ImmutableInterlocked.AddOrUpdate``2(System.Collections.Immutable.ImmutableDictionary{``0,``1}@,``0,``1,System.Func{``0,``1,``1})
  - System.Collections.Immutable.ImmutableInterlocked.Enqueue``1(System.Collections.Immutable.ImmutableQueue{``0}@,``0)
  - System.Collections.Immutable.ImmutableInterlocked.GetOrAdd``3(System.Collections.Immutable.ImmutableDictionary{``0,``1}@,``0,System.Func{``0,``2,``1},``2)
  - System.Collections.Immutable.ImmutableInterlocked.GetOrAdd``2(System.Collections.Immutable.ImmutableDictionary{``0,``1}@,``0,System.Func{``0,``1})
  - System.Collections.Immutable.ImmutableInterlocked.GetOrAdd``2(System.Collections.Immutable.ImmutableDictionary{``0,``1}@,``0,``1)
  - System.Collections.Immutable.ImmutableInterlocked.InterlockedCompareExchange``1(System.Collections.Immutable.ImmutableArray{``0}@,System.Collections.Immutable.ImmutableArray{``0},System.Collections.Immutable.ImmutableArray{``0})
  - System.Collections.Immutable.ImmutableInterlocked.InterlockedExchange``1(System.Collections.Immutable.ImmutableArray{``0}@,System.Collections.Immutable.ImmutableArray{``0})
  - System.Collections.Immutable.ImmutableInterlocked.InterlockedInitialize``1(System.Collections.Immutable.ImmutableArray{``0}@,System.Collections.Immutable.ImmutableArray{``0})
  - System.Collections.Immutable.ImmutableInterlocked.Push``1(System.Collections.Immutable.ImmutableStack{``0}@,``0)
  - System.Collections.Immutable.ImmutableInterlocked.TryAdd``2(System.Collections.Immutable.ImmutableDictionary{``0,``1}@,``0,``1)
  - System.Collections.Immutable.ImmutableInterlocked.TryDequeue``1(System.Collections.Immutable.ImmutableQueue{``0}@,``0@)
  - System.Collections.Immutable.ImmutableInterlocked.TryPop``1(System.Collections.Immutable.ImmutableStack{``0}@,``0@)
  - System.Collections.Immutable.ImmutableInterlocked.TryRemove``2(System.Collections.Immutable.ImmutableDictionary{``0,``1}@,``0,``1@)
  - System.Collections.Immutable.ImmutableInterlocked.TryUpdate``2(System.Collections.Immutable.ImmutableDictionary{``0,``1}@,``0,``1,``1)
  - System.Collections.Immutable.ImmutableInterlocked.Update``2(``0@,System.Func{``0,``1,``0},``1)
  - System.Collections.Immutable.ImmutableInterlocked.Update``1(``0@,System.Func{``0,``0})
  langs:
  - csharp
  name: ImmutableInterlocked
  nameWithType: ImmutableInterlocked
  fullName: System.Collections.Immutable.ImmutableInterlocked
  type: Class
  assemblies:
  - System.Collections.Immutable
  namespace: System.Collections.Immutable
  summary: "Contains interlocked exchange mechanisms for immutable collections.  \n  \n [!INCLUDE[immutable_nuget_short](~/includes/immutable-nuget-short-md.md)]"
  syntax:
    content: public static class ImmutableInterlocked
  inheritance:
  - System.Object
  implements: []
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Immutable/ImmutableInterlocked.xml
  author: mairaw
  ms.author: mairaw
  manager: wpickett
- uid: System.Collections.Immutable.ImmutableInterlocked.AddOrUpdate``2(System.Collections.Immutable.ImmutableDictionary{``0,``1}@,``0,System.Func{``0,``1},System.Func{``0,``1,``1})
  commentId: M:System.Collections.Immutable.ImmutableInterlocked.AddOrUpdate``2(System.Collections.Immutable.ImmutableDictionary{``0,``1}@,``0,System.Func{``0,``1},System.Func{``0,``1,``1})
  id: AddOrUpdate``2(System.Collections.Immutable.ImmutableDictionary{``0,``1}@,``0,System.Func{``0,``1},System.Func{``0,``1,``1})
  parent: System.Collections.Immutable.ImmutableInterlocked
  langs:
  - csharp
  name: AddOrUpdate<TKey,TValue>(ImmutableDictionary<TKey,TValue>, TKey, Func<TKey,TValue>, Func<TKey,TValue,TValue>)
  nameWithType: ImmutableInterlocked.AddOrUpdate<TKey,TValue>(ImmutableDictionary<TKey,TValue>, TKey, Func<TKey,TValue>, Func<TKey,TValue,TValue>)
  fullName: ImmutableInterlocked.AddOrUpdate<TKey,TValue>(ImmutableDictionary<TKey,TValue>, TKey, Func<TKey,TValue>, Func<TKey,TValue,TValue>)
  type: Method
  assemblies:
  - System.Collections.Immutable
  namespace: System.Collections.Immutable
  summary: Obtains the value from a dictionary after having added it or updated an existing entry.
  syntax:
    content: public static TValue AddOrUpdate<TKey,TValue> (ref System.Collections.Immutable.ImmutableDictionary<TKey,TValue> location, TKey key, Func<TKey,TValue> addValueFactory, Func<TKey,TValue,TValue> updateValueFactory);
    parameters:
    - id: location
      type: System.Collections.Immutable.ImmutableDictionary`2
      description: The variable or field to atomically update if the specified  is not in the dictionary.
    - id: key
      type: TKey
      description: The key for the value to add or update.
    - id: addValueFactory
      type: System.Func{TKey,TValue}
      description: The function that receives the key and returns a new value to add to the dictionary when no value previously exists.
    - id: updateValueFactory
      type: System.Func{TKey,TValue,TValue}
      description: The function that receives the key and prior value and returns the new value with which to update the dictionary.
    typeParameters:
    - id: TKey
      description: ''
    - id: TValue
      description: ''
    return:
      type: TValue
      description: The added or updated value.
  overload: System.Collections.Immutable.ImmutableInterlocked.AddOrUpdate``2*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Immutable/ImmutableInterlocked.xml
  author: mairaw
  ms.author: mairaw
  manager: wpickett
- uid: System.Collections.Immutable.ImmutableInterlocked.AddOrUpdate``2(System.Collections.Immutable.ImmutableDictionary{``0,``1}@,``0,``1,System.Func{``0,``1,``1})
  commentId: M:System.Collections.Immutable.ImmutableInterlocked.AddOrUpdate``2(System.Collections.Immutable.ImmutableDictionary{``0,``1}@,``0,``1,System.Func{``0,``1,``1})
  id: AddOrUpdate``2(System.Collections.Immutable.ImmutableDictionary{``0,``1}@,``0,``1,System.Func{``0,``1,``1})
  parent: System.Collections.Immutable.ImmutableInterlocked
  langs:
  - csharp
  name: AddOrUpdate<TKey,TValue>(ImmutableDictionary<TKey,TValue>, TKey, TValue, Func<TKey,TValue,TValue>)
  nameWithType: ImmutableInterlocked.AddOrUpdate<TKey,TValue>(ImmutableDictionary<TKey,TValue>, TKey, TValue, Func<TKey,TValue,TValue>)
  fullName: ImmutableInterlocked.AddOrUpdate<TKey,TValue>(ImmutableDictionary<TKey,TValue>, TKey, TValue, Func<TKey,TValue,TValue>)
  type: Method
  assemblies:
  - System.Collections.Immutable
  namespace: System.Collections.Immutable
  summary: Obtains the value from a dictionary after having added it or updated an existing entry.
  syntax:
    content: public static TValue AddOrUpdate<TKey,TValue> (ref System.Collections.Immutable.ImmutableDictionary<TKey,TValue> location, TKey key, TValue addValue, Func<TKey,TValue,TValue> updateValueFactory);
    parameters:
    - id: location
      type: System.Collections.Immutable.ImmutableDictionary`2
      description: The variable or field to atomically update if the specified  is not in the dictionary.
    - id: key
      type: TKey
      description: The key for the value to add or update.
    - id: addValue
      type: TValue
      description: The value to use if no previous value exists.
    - id: updateValueFactory
      type: System.Func{TKey,TValue,TValue}
      description: The function that receives the key and prior value and returns the new value with which to update the dictionary.
    typeParameters:
    - id: TKey
      description: ''
    - id: TValue
      description: ''
    return:
      type: TValue
      description: The added or updated value.
  overload: System.Collections.Immutable.ImmutableInterlocked.AddOrUpdate``2*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Immutable/ImmutableInterlocked.xml
  author: mairaw
  ms.author: mairaw
  manager: wpickett
- uid: System.Collections.Immutable.ImmutableInterlocked.Enqueue``1(System.Collections.Immutable.ImmutableQueue{``0}@,``0)
  commentId: M:System.Collections.Immutable.ImmutableInterlocked.Enqueue``1(System.Collections.Immutable.ImmutableQueue{``0}@,``0)
  id: Enqueue``1(System.Collections.Immutable.ImmutableQueue{``0}@,``0)
  parent: System.Collections.Immutable.ImmutableInterlocked
  langs:
  - csharp
  name: Enqueue<T>(ImmutableQueue<T>, T)
  nameWithType: ImmutableInterlocked.Enqueue<T>(ImmutableQueue<T>, T)
  fullName: ImmutableInterlocked.Enqueue<T>(ImmutableQueue<T>, T)
  type: Method
  assemblies:
  - System.Collections.Immutable
  namespace: System.Collections.Immutable
  summary: Atomically enqueues an element to the end of a queue.
  syntax:
    content: public static void Enqueue<T> (ref System.Collections.Immutable.ImmutableQueue<T> location, T value);
    parameters:
    - id: location
      type: System.Collections.Immutable.ImmutableQueue`1
      description: The variable or field to atomically update.
    - id: value
      type: T
      description: The value to enqueue.
    typeParameters:
    - id: T
      description: The type of items contained in the collection
  overload: System.Collections.Immutable.ImmutableInterlocked.Enqueue``1*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Immutable/ImmutableInterlocked.xml
  author: mairaw
  ms.author: mairaw
  manager: wpickett
- uid: System.Collections.Immutable.ImmutableInterlocked.GetOrAdd``3(System.Collections.Immutable.ImmutableDictionary{``0,``1}@,``0,System.Func{``0,``2,``1},``2)
  commentId: M:System.Collections.Immutable.ImmutableInterlocked.GetOrAdd``3(System.Collections.Immutable.ImmutableDictionary{``0,``1}@,``0,System.Func{``0,``2,``1},``2)
  id: GetOrAdd``3(System.Collections.Immutable.ImmutableDictionary{``0,``1}@,``0,System.Func{``0,``2,``1},``2)
  parent: System.Collections.Immutable.ImmutableInterlocked
  langs:
  - csharp
  name: GetOrAdd<TKey,TValue,TArg>(ImmutableDictionary<TKey,TValue>, TKey, Func<TKey,TArg,TValue>, TArg)
  nameWithType: ImmutableInterlocked.GetOrAdd<TKey,TValue,TArg>(ImmutableDictionary<TKey,TValue>, TKey, Func<TKey,TArg,TValue>, TArg)
  fullName: ImmutableInterlocked.GetOrAdd<TKey,TValue,TArg>(ImmutableDictionary<TKey,TValue>, TKey, Func<TKey,TArg,TValue>, TArg)
  type: Method
  assemblies:
  - System.Collections.Immutable
  namespace: System.Collections.Immutable
  summary: Gets the value for the specified key from the dictionary, or if the key was not found, adds a new value to the dictionary.
  syntax:
    content: public static TValue GetOrAdd<TKey,TValue,TArg> (ref System.Collections.Immutable.ImmutableDictionary<TKey,TValue> location, TKey key, Func<TKey,TArg,TValue> valueFactory, TArg factoryArgument);
    parameters:
    - id: location
      type: System.Collections.Immutable.ImmutableDictionary`2
      description: The variable or field to update if the specified is not in the dictionary.
    - id: key
      type: TKey
      description: The key for the value to retrieve or add.
    - id: valueFactory
      type: System.Func{TKey,TArg,TValue}
      description: The function to execute to obtain the value to insert into the dictionary if the key is not found.
    - id: factoryArgument
      type: TArg
      description: The argument to pass to the value factory.
    typeParameters:
    - id: TKey
      description: The type of the keys contained in the collection.
    - id: TValue
      description: The type of the values contained in the collection.
    - id: TArg
      description: ''
    return:
      type: TValue
      description: The value at the specified key or <code>valueFactory</code> if the key was not present.
  overload: System.Collections.Immutable.ImmutableInterlocked.GetOrAdd``3*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Immutable/ImmutableInterlocked.xml
  author: mairaw
  ms.author: mairaw
  manager: wpickett
- uid: System.Collections.Immutable.ImmutableInterlocked.GetOrAdd``2(System.Collections.Immutable.ImmutableDictionary{``0,``1}@,``0,System.Func{``0,``1})
  commentId: M:System.Collections.Immutable.ImmutableInterlocked.GetOrAdd``2(System.Collections.Immutable.ImmutableDictionary{``0,``1}@,``0,System.Func{``0,``1})
  id: GetOrAdd``2(System.Collections.Immutable.ImmutableDictionary{``0,``1}@,``0,System.Func{``0,``1})
  parent: System.Collections.Immutable.ImmutableInterlocked
  langs:
  - csharp
  name: GetOrAdd<TKey,TValue>(ImmutableDictionary<TKey,TValue>, TKey, Func<TKey,TValue>)
  nameWithType: ImmutableInterlocked.GetOrAdd<TKey,TValue>(ImmutableDictionary<TKey,TValue>, TKey, Func<TKey,TValue>)
  fullName: ImmutableInterlocked.GetOrAdd<TKey,TValue>(ImmutableDictionary<TKey,TValue>, TKey, Func<TKey,TValue>)
  type: Method
  assemblies:
  - System.Collections.Immutable
  namespace: System.Collections.Immutable
  summary: Gets the value for the specified key from the dictionary, or if the key was not found, adds a new value to the dictionary.
  syntax:
    content: public static TValue GetOrAdd<TKey,TValue> (ref System.Collections.Immutable.ImmutableDictionary<TKey,TValue> location, TKey key, Func<TKey,TValue> valueFactory);
    parameters:
    - id: location
      type: System.Collections.Immutable.ImmutableDictionary`2
      description: The variable or field to atomically update if the specified  is not in the dictionary.
    - id: key
      type: TKey
      description: The key for the value to retrieve or add.
    - id: valueFactory
      type: System.Func{TKey,TValue}
      description: The function to execute to obtain the value to insert into the dictionary if the key is not found. This delegate will not be invoked more than once.
    typeParameters:
    - id: TKey
      description: The type of the keys contained in the collection.
    - id: TValue
      description: The type of the values contained in the collection.
    return:
      type: TValue
      description: The value at the specified key or <code>valueFactory</code> if the key was not present.
  overload: System.Collections.Immutable.ImmutableInterlocked.GetOrAdd``2*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Immutable/ImmutableInterlocked.xml
  author: mairaw
  ms.author: mairaw
  manager: wpickett
- uid: System.Collections.Immutable.ImmutableInterlocked.GetOrAdd``2(System.Collections.Immutable.ImmutableDictionary{``0,``1}@,``0,``1)
  commentId: M:System.Collections.Immutable.ImmutableInterlocked.GetOrAdd``2(System.Collections.Immutable.ImmutableDictionary{``0,``1}@,``0,``1)
  id: GetOrAdd``2(System.Collections.Immutable.ImmutableDictionary{``0,``1}@,``0,``1)
  parent: System.Collections.Immutable.ImmutableInterlocked
  langs:
  - csharp
  name: GetOrAdd<TKey,TValue>(ImmutableDictionary<TKey,TValue>, TKey, TValue)
  nameWithType: ImmutableInterlocked.GetOrAdd<TKey,TValue>(ImmutableDictionary<TKey,TValue>, TKey, TValue)
  fullName: ImmutableInterlocked.GetOrAdd<TKey,TValue>(ImmutableDictionary<TKey,TValue>, TKey, TValue)
  type: Method
  assemblies:
  - System.Collections.Immutable
  namespace: System.Collections.Immutable
  summary: Gets the value for the specified key from the dictionary, or if the key was not found, adds a new value to the dictionary.
  syntax:
    content: public static TValue GetOrAdd<TKey,TValue> (ref System.Collections.Immutable.ImmutableDictionary<TKey,TValue> location, TKey key, TValue value);
    parameters:
    - id: location
      type: System.Collections.Immutable.ImmutableDictionary`2
      description: The variable or field to atomically update if the specified key is not in the dictionary.
    - id: key
      type: TKey
      description: The key for the value to get or add.
    - id: value
      type: TValue
      description: The value to add to the dictionary the key is not found.
    typeParameters:
    - id: TKey
      description: The type of the keys contained in the collection.
    - id: TValue
      description: The type of the values contained in the collection.
    return:
      type: TValue
      description: The value at the specified key or <code>valueFactory</code> if the key was not present.
  overload: System.Collections.Immutable.ImmutableInterlocked.GetOrAdd``2*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Immutable/ImmutableInterlocked.xml
  author: mairaw
  ms.author: mairaw
  manager: wpickett
- uid: System.Collections.Immutable.ImmutableInterlocked.InterlockedCompareExchange``1(System.Collections.Immutable.ImmutableArray{``0}@,System.Collections.Immutable.ImmutableArray{``0},System.Collections.Immutable.ImmutableArray{``0})
  commentId: M:System.Collections.Immutable.ImmutableInterlocked.InterlockedCompareExchange``1(System.Collections.Immutable.ImmutableArray{``0}@,System.Collections.Immutable.ImmutableArray{``0},System.Collections.Immutable.ImmutableArray{``0})
  id: InterlockedCompareExchange``1(System.Collections.Immutable.ImmutableArray{``0}@,System.Collections.Immutable.ImmutableArray{``0},System.Collections.Immutable.ImmutableArray{``0})
  parent: System.Collections.Immutable.ImmutableInterlocked
  langs:
  - csharp
  name: InterlockedCompareExchange<T>(ImmutableArray<T>, ImmutableArray<T>, ImmutableArray<T>)
  nameWithType: ImmutableInterlocked.InterlockedCompareExchange<T>(ImmutableArray<T>, ImmutableArray<T>, ImmutableArray<T>)
  fullName: ImmutableInterlocked.InterlockedCompareExchange<T>(ImmutableArray<T>, ImmutableArray<T>, ImmutableArray<T>)
  type: Method
  assemblies:
  - System.Collections.Immutable
  namespace: System.Collections.Immutable
  summary: Compares two immutable arrays for equality and, if they are equal, replaces one of the arrays.
  syntax:
    content: public static System.Collections.Immutable.ImmutableArray<T> InterlockedCompareExchange<T> (ref System.Collections.Immutable.ImmutableArray<T> location, System.Collections.Immutable.ImmutableArray<T> value, System.Collections.Immutable.ImmutableArray<T> comparand);
    parameters:
    - id: location
      type: System.Collections.Immutable.ImmutableArray`1
      description: The destination, whose value is compared with <code>comparand</code> and possibly replaced.
    - id: value
      type: System.Collections.Immutable.ImmutableArray`1
      description: The value that replaces the destination value if the comparison results in equality.
    - id: comparand
      type: System.Collections.Immutable.ImmutableArray`1
      description: The value that is compared to the value at <code>location</code>.
    typeParameters:
    - id: T
      description: The type of element stored by the array.
    return:
      type: System.Collections.Immutable.ImmutableArray`1
      description: The original value in <code>location</code>.
  overload: System.Collections.Immutable.ImmutableInterlocked.InterlockedCompareExchange``1*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Immutable/ImmutableInterlocked.xml
  author: mairaw
  ms.author: mairaw
  manager: wpickett
- uid: System.Collections.Immutable.ImmutableInterlocked.InterlockedExchange``1(System.Collections.Immutable.ImmutableArray{``0}@,System.Collections.Immutable.ImmutableArray{``0})
  commentId: M:System.Collections.Immutable.ImmutableInterlocked.InterlockedExchange``1(System.Collections.Immutable.ImmutableArray{``0}@,System.Collections.Immutable.ImmutableArray{``0})
  id: InterlockedExchange``1(System.Collections.Immutable.ImmutableArray{``0}@,System.Collections.Immutable.ImmutableArray{``0})
  parent: System.Collections.Immutable.ImmutableInterlocked
  langs:
  - csharp
  name: InterlockedExchange<T>(ImmutableArray<T>, ImmutableArray<T>)
  nameWithType: ImmutableInterlocked.InterlockedExchange<T>(ImmutableArray<T>, ImmutableArray<T>)
  fullName: ImmutableInterlocked.InterlockedExchange<T>(ImmutableArray<T>, ImmutableArray<T>)
  type: Method
  assemblies:
  - System.Collections.Immutable
  namespace: System.Collections.Immutable
  summary: Sets an array to the specified array and returns a reference to the original array, as an atomic operation.
  syntax:
    content: public static System.Collections.Immutable.ImmutableArray<T> InterlockedExchange<T> (ref System.Collections.Immutable.ImmutableArray<T> location, System.Collections.Immutable.ImmutableArray<T> value);
    parameters:
    - id: location
      type: System.Collections.Immutable.ImmutableArray`1
      description: The array to set to the specified value.
    - id: value
      type: System.Collections.Immutable.ImmutableArray`1
      description: The value to which the <code>location</code> parameter is set.
    typeParameters:
    - id: T
      description: The type of element stored by the array.
    return:
      type: System.Collections.Immutable.ImmutableArray`1
      description: The original value of <code>location</code>.
  overload: System.Collections.Immutable.ImmutableInterlocked.InterlockedExchange``1*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Immutable/ImmutableInterlocked.xml
  author: mairaw
  ms.author: mairaw
  manager: wpickett
- uid: System.Collections.Immutable.ImmutableInterlocked.InterlockedInitialize``1(System.Collections.Immutable.ImmutableArray{``0}@,System.Collections.Immutable.ImmutableArray{``0})
  commentId: M:System.Collections.Immutable.ImmutableInterlocked.InterlockedInitialize``1(System.Collections.Immutable.ImmutableArray{``0}@,System.Collections.Immutable.ImmutableArray{``0})
  id: InterlockedInitialize``1(System.Collections.Immutable.ImmutableArray{``0}@,System.Collections.Immutable.ImmutableArray{``0})
  parent: System.Collections.Immutable.ImmutableInterlocked
  langs:
  - csharp
  name: InterlockedInitialize<T>(ImmutableArray<T>, ImmutableArray<T>)
  nameWithType: ImmutableInterlocked.InterlockedInitialize<T>(ImmutableArray<T>, ImmutableArray<T>)
  fullName: ImmutableInterlocked.InterlockedInitialize<T>(ImmutableArray<T>, ImmutableArray<T>)
  type: Method
  assemblies:
  - System.Collections.Immutable
  namespace: System.Collections.Immutable
  summary: Sets an array to the specified array if the array has not been initialized.
  syntax:
    content: public static bool InterlockedInitialize<T> (ref System.Collections.Immutable.ImmutableArray<T> location, System.Collections.Immutable.ImmutableArray<T> value);
    parameters:
    - id: location
      type: System.Collections.Immutable.ImmutableArray`1
      description: The array to set to the specified value.
    - id: value
      type: System.Collections.Immutable.ImmutableArray`1
      description: The value to which the <code>location</code> parameter is set, if it’s not initialized.
    typeParameters:
    - id: T
      description: The type of element stored by the array.
    return:
      type: System.Boolean
      description: '`true` if the array was assigned the specified value;  otherwise, `false`.'
  overload: System.Collections.Immutable.ImmutableInterlocked.InterlockedInitialize``1*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Immutable/ImmutableInterlocked.xml
  author: mairaw
  ms.author: mairaw
  manager: wpickett
- uid: System.Collections.Immutable.ImmutableInterlocked.Push``1(System.Collections.Immutable.ImmutableStack{``0}@,``0)
  commentId: M:System.Collections.Immutable.ImmutableInterlocked.Push``1(System.Collections.Immutable.ImmutableStack{``0}@,``0)
  id: Push``1(System.Collections.Immutable.ImmutableStack{``0}@,``0)
  parent: System.Collections.Immutable.ImmutableInterlocked
  langs:
  - csharp
  name: Push<T>(ImmutableStack<T>, T)
  nameWithType: ImmutableInterlocked.Push<T>(ImmutableStack<T>, T)
  fullName: ImmutableInterlocked.Push<T>(ImmutableStack<T>, T)
  type: Method
  assemblies:
  - System.Collections.Immutable
  namespace: System.Collections.Immutable
  summary: Pushes a new element onto the stack.
  syntax:
    content: public static void Push<T> (ref System.Collections.Immutable.ImmutableStack<T> location, T value);
    parameters:
    - id: location
      type: System.Collections.Immutable.ImmutableStack`1
      description: The stack to update.
    - id: value
      type: T
      description: The value to push on the stack.
    typeParameters:
    - id: T
      description: The type of items in the stack.
  overload: System.Collections.Immutable.ImmutableInterlocked.Push``1*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Immutable/ImmutableInterlocked.xml
  author: mairaw
  ms.author: mairaw
  manager: wpickett
- uid: System.Collections.Immutable.ImmutableInterlocked.TryAdd``2(System.Collections.Immutable.ImmutableDictionary{``0,``1}@,``0,``1)
  commentId: M:System.Collections.Immutable.ImmutableInterlocked.TryAdd``2(System.Collections.Immutable.ImmutableDictionary{``0,``1}@,``0,``1)
  id: TryAdd``2(System.Collections.Immutable.ImmutableDictionary{``0,``1}@,``0,``1)
  parent: System.Collections.Immutable.ImmutableInterlocked
  langs:
  - csharp
  name: TryAdd<TKey,TValue>(ImmutableDictionary<TKey,TValue>, TKey, TValue)
  nameWithType: ImmutableInterlocked.TryAdd<TKey,TValue>(ImmutableDictionary<TKey,TValue>, TKey, TValue)
  fullName: ImmutableInterlocked.TryAdd<TKey,TValue>(ImmutableDictionary<TKey,TValue>, TKey, TValue)
  type: Method
  assemblies:
  - System.Collections.Immutable
  namespace: System.Collections.Immutable
  summary: Adds the specified key and value to the dictionary if the key is not in the dictionary.
  syntax:
    content: public static bool TryAdd<TKey,TValue> (ref System.Collections.Immutable.ImmutableDictionary<TKey,TValue> location, TKey key, TValue value);
    parameters:
    - id: location
      type: System.Collections.Immutable.ImmutableDictionary`2
      description: The dictionary to update with the specified key and value.
    - id: key
      type: TKey
      description: The key to add, if is not already defined in the dictionary.
    - id: value
      type: TValue
      description: The value to add.
    typeParameters:
    - id: TKey
      description: The type of the keys contained in the collection.
    - id: TValue
      description: The type of the values contained in the collection.
    return:
      type: System.Boolean
      description: '`true` if the key is not in the dictionary; otherwise, `false`.'
  overload: System.Collections.Immutable.ImmutableInterlocked.TryAdd``2*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Immutable/ImmutableInterlocked.xml
  author: mairaw
  ms.author: mairaw
  manager: wpickett
- uid: System.Collections.Immutable.ImmutableInterlocked.TryDequeue``1(System.Collections.Immutable.ImmutableQueue{``0}@,``0@)
  commentId: M:System.Collections.Immutable.ImmutableInterlocked.TryDequeue``1(System.Collections.Immutable.ImmutableQueue{``0}@,``0@)
  id: TryDequeue``1(System.Collections.Immutable.ImmutableQueue{``0}@,``0@)
  parent: System.Collections.Immutable.ImmutableInterlocked
  langs:
  - csharp
  name: TryDequeue<T>(ImmutableQueue<T>, T)
  nameWithType: ImmutableInterlocked.TryDequeue<T>(ImmutableQueue<T>, T)
  fullName: ImmutableInterlocked.TryDequeue<T>(ImmutableQueue<T>, T)
  type: Method
  assemblies:
  - System.Collections.Immutable
  namespace: System.Collections.Immutable
  summary: Atomically removes and returns the specified element at the head of the queue, if the queue is not empty.
  syntax:
    content: public static bool TryDequeue<T> (ref System.Collections.Immutable.ImmutableQueue<T> location, out T value);
    parameters:
    - id: location
      type: System.Collections.Immutable.ImmutableQueue`1
      description: The variable or field to atomically update.
    - id: value
      type: T
      description: Set to the value from the head of the queue, if the queue not empty.
    typeParameters:
    - id: T
      description: The type of items in the queue.
    return:
      type: System.Boolean
      description: '`true` if the queue is not empty and the head element is removed; otherwise, `false`.'
  overload: System.Collections.Immutable.ImmutableInterlocked.TryDequeue``1*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Immutable/ImmutableInterlocked.xml
  author: mairaw
  ms.author: mairaw
  manager: wpickett
- uid: System.Collections.Immutable.ImmutableInterlocked.TryPop``1(System.Collections.Immutable.ImmutableStack{``0}@,``0@)
  commentId: M:System.Collections.Immutable.ImmutableInterlocked.TryPop``1(System.Collections.Immutable.ImmutableStack{``0}@,``0@)
  id: TryPop``1(System.Collections.Immutable.ImmutableStack{``0}@,``0@)
  parent: System.Collections.Immutable.ImmutableInterlocked
  langs:
  - csharp
  name: TryPop<T>(ImmutableStack<T>, T)
  nameWithType: ImmutableInterlocked.TryPop<T>(ImmutableStack<T>, T)
  fullName: ImmutableInterlocked.TryPop<T>(ImmutableStack<T>, T)
  type: Method
  assemblies:
  - System.Collections.Immutable
  namespace: System.Collections.Immutable
  summary: Removes an element from the top of the stack, if there is an element to remove.
  syntax:
    content: public static bool TryPop<T> (ref System.Collections.Immutable.ImmutableStack<T> location, out T value);
    parameters:
    - id: location
      type: System.Collections.Immutable.ImmutableStack`1
      description: The stack to update.
    - id: value
      type: T
      description: Receives the value removed from the stack, if the stack is not empty.
    typeParameters:
    - id: T
      description: The type of items in the stack.
    return:
      type: System.Boolean
      description: '`true` if an element is removed from the stack; otherwise, `false`.'
  overload: System.Collections.Immutable.ImmutableInterlocked.TryPop``1*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Immutable/ImmutableInterlocked.xml
  author: mairaw
  ms.author: mairaw
  manager: wpickett
- uid: System.Collections.Immutable.ImmutableInterlocked.TryRemove``2(System.Collections.Immutable.ImmutableDictionary{``0,``1}@,``0,``1@)
  commentId: M:System.Collections.Immutable.ImmutableInterlocked.TryRemove``2(System.Collections.Immutable.ImmutableDictionary{``0,``1}@,``0,``1@)
  id: TryRemove``2(System.Collections.Immutable.ImmutableDictionary{``0,``1}@,``0,``1@)
  parent: System.Collections.Immutable.ImmutableInterlocked
  langs:
  - csharp
  name: TryRemove<TKey,TValue>(ImmutableDictionary<TKey,TValue>, TKey, TValue)
  nameWithType: ImmutableInterlocked.TryRemove<TKey,TValue>(ImmutableDictionary<TKey,TValue>, TKey, TValue)
  fullName: ImmutableInterlocked.TryRemove<TKey,TValue>(ImmutableDictionary<TKey,TValue>, TKey, TValue)
  type: Method
  assemblies:
  - System.Collections.Immutable
  namespace: System.Collections.Immutable
  summary: Removes the element with the specified key, if the key exists.
  syntax:
    content: public static bool TryRemove<TKey,TValue> (ref System.Collections.Immutable.ImmutableDictionary<TKey,TValue> location, TKey key, out TValue value);
    parameters:
    - id: location
      type: System.Collections.Immutable.ImmutableDictionary`2
      description: The dictionary to update.
    - id: key
      type: TKey
      description: The key to remove.
    - id: value
      type: TValue
      description: Receives the value of the removed item, if the dictionary is not empty.
    typeParameters:
    - id: TKey
      description: The type of the keys contained in the collection.
    - id: TValue
      description: The type of the values contained in the collection.
    return:
      type: System.Boolean
      description: '`true` if the key was found and removed; otherwise, `false`.'
  overload: System.Collections.Immutable.ImmutableInterlocked.TryRemove``2*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Immutable/ImmutableInterlocked.xml
  author: mairaw
  ms.author: mairaw
  manager: wpickett
- uid: System.Collections.Immutable.ImmutableInterlocked.TryUpdate``2(System.Collections.Immutable.ImmutableDictionary{``0,``1}@,``0,``1,``1)
  commentId: M:System.Collections.Immutable.ImmutableInterlocked.TryUpdate``2(System.Collections.Immutable.ImmutableDictionary{``0,``1}@,``0,``1,``1)
  id: TryUpdate``2(System.Collections.Immutable.ImmutableDictionary{``0,``1}@,``0,``1,``1)
  parent: System.Collections.Immutable.ImmutableInterlocked
  langs:
  - csharp
  name: TryUpdate<TKey,TValue>(ImmutableDictionary<TKey,TValue>, TKey, TValue, TValue)
  nameWithType: ImmutableInterlocked.TryUpdate<TKey,TValue>(ImmutableDictionary<TKey,TValue>, TKey, TValue, TValue)
  fullName: ImmutableInterlocked.TryUpdate<TKey,TValue>(ImmutableDictionary<TKey,TValue>, TKey, TValue, TValue)
  type: Method
  assemblies:
  - System.Collections.Immutable
  namespace: System.Collections.Immutable
  summary: Sets the specified key to the specified value if the specified key already is set to a specific value.
  syntax:
    content: public static bool TryUpdate<TKey,TValue> (ref System.Collections.Immutable.ImmutableDictionary<TKey,TValue> location, TKey key, TValue newValue, TValue comparisonValue);
    parameters:
    - id: location
      type: System.Collections.Immutable.ImmutableDictionary`2
      description: The dictionary to update.
    - id: key
      type: TKey
      description: The key to update.
    - id: newValue
      type: TValue
      description: The new value to set.
    - id: comparisonValue
      type: TValue
      description: The current value for <code>key</code> in order for the update to succeed.
    typeParameters:
    - id: TKey
      description: The type of the keys contained in the collection.
    - id: TValue
      description: The type of the values contained in the collection.
    return:
      type: System.Boolean
      description: '`true` if <code>key</code> and <code>comparisonValue</code> are present in the dictionary and comparison was updated to <code>newValue</code>; otherwise, `false`.'
  overload: System.Collections.Immutable.ImmutableInterlocked.TryUpdate``2*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Immutable/ImmutableInterlocked.xml
  author: mairaw
  ms.author: mairaw
  manager: wpickett
- uid: System.Collections.Immutable.ImmutableInterlocked.Update``2(``0@,System.Func{``0,``1,``0},``1)
  commentId: M:System.Collections.Immutable.ImmutableInterlocked.Update``2(``0@,System.Func{``0,``1,``0},``1)
  id: Update``2(``0@,System.Func{``0,``1,``0},``1)
  parent: System.Collections.Immutable.ImmutableInterlocked
  langs:
  - csharp
  name: Update<T,TArg>(T, Func<T,TArg,T>, TArg)
  nameWithType: ImmutableInterlocked.Update<T,TArg>(T, Func<T,TArg,T>, TArg)
  fullName: ImmutableInterlocked.Update<T,TArg>(T, Func<T,TArg,T>, TArg)
  type: Method
  assemblies:
  - System.Collections.Immutable
  namespace: System.Collections.Immutable
  summary: Mutates a value in-place with optimistic locking transaction semantics             via a specified transformation function.             The transformation is retried as many times as necessary to win the optimistic locking race.
  syntax:
    content: 'public static bool Update<T,TArg> (ref T location, Func<T,TArg,T> transformer, TArg transformerArgument) where T : class;'
    parameters:
    - id: location
      type: T
      description: The variable or field to be changed, which may be accessed by multiple threads.
    - id: transformer
      type: System.Func{T,TArg,T}
      description: A function that mutates the value. This function should be side-effect free,              as it may run multiple times when races occur with other threads.
    - id: transformerArgument
      type: TArg
      description: The argument to pass to <code>transformer</code>.
    typeParameters:
    - id: T
      description: The type of data.
    - id: TArg
      description: The type of argument passed to the <code>transformer</code>.
    return:
      type: System.Boolean
      description: <code>true</code> if the location's value is changed by applying the result of the              <code>transformer</code> function;             <code>false</code> if the location's value remained the same because the last              invocation of <code>transformer</code> returned the existing value.
  overload: System.Collections.Immutable.ImmutableInterlocked.Update``2*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Immutable/ImmutableInterlocked.xml
- uid: System.Collections.Immutable.ImmutableInterlocked.Update``1(``0@,System.Func{``0,``0})
  commentId: M:System.Collections.Immutable.ImmutableInterlocked.Update``1(``0@,System.Func{``0,``0})
  id: Update``1(``0@,System.Func{``0,``0})
  parent: System.Collections.Immutable.ImmutableInterlocked
  langs:
  - csharp
  name: Update<T>(T, Func<T,T>)
  nameWithType: ImmutableInterlocked.Update<T>(T, Func<T,T>)
  fullName: ImmutableInterlocked.Update<T>(T, Func<T,T>)
  type: Method
  assemblies:
  - System.Collections.Immutable
  namespace: System.Collections.Immutable
  summary: Mutates a value in-place with optimistic locking transaction semantics             via a specified transformation function.             The transformation is retried as many times as necessary to win the optimistic locking race.
  syntax:
    content: 'public static bool Update<T> (ref T location, Func<T,T> transformer) where T : class;'
    parameters:
    - id: location
      type: T
      description: The variable or field to be changed, which may be accessed by multiple threads.
    - id: transformer
      type: System.Func{T,T}
      description: A function that mutates the value. This function should be side-effect free,              as it may run multiple times when races occur with other threads.
    typeParameters:
    - id: T
      description: The type of data.
    return:
      type: System.Boolean
      description: <code>true</code> if the location's value is changed by applying the result of the              <code>transformer</code> function;             <code>false</code> if the location's value remained the same because the last              invocation of <code>transformer</code> returned the existing value.
  overload: System.Collections.Immutable.ImmutableInterlocked.Update``1*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Immutable/ImmutableInterlocked.xml
references:
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Collections.Immutable.ImmutableInterlocked.AddOrUpdate``2(System.Collections.Immutable.ImmutableDictionary{``0,``1}@,``0,System.Func{``0,``1},System.Func{``0,``1,``1})
  parent: System.Collections.Immutable.ImmutableInterlocked
  isExternal: false
  name: AddOrUpdate<TKey,TValue>(ImmutableDictionary<TKey,TValue>, TKey, Func<TKey,TValue>, Func<TKey,TValue,TValue>)
  nameWithType: ImmutableInterlocked.AddOrUpdate<TKey,TValue>(ImmutableDictionary<TKey,TValue>, TKey, Func<TKey,TValue>, Func<TKey,TValue,TValue>)
  fullName: ImmutableInterlocked.AddOrUpdate<TKey,TValue>(ImmutableDictionary<TKey,TValue>, TKey, Func<TKey,TValue>, Func<TKey,TValue,TValue>)
- uid: TValue
  isExternal: true
  name: TValue
  nameWithType: TValue
  fullName: TValue
- uid: System.Collections.Immutable.ImmutableDictionary`2
  parent: System.Collections.Immutable
  isExternal: false
  name: ImmutableDictionary<TKey,TValue>
  nameWithType: ImmutableDictionary<TKey,TValue>
  fullName: System.Collections.Immutable.ImmutableDictionary<TKey,TValue>
- uid: TKey
  isExternal: true
  name: TKey
  nameWithType: TKey
  fullName: TKey
- uid: System.Func`2
  name: Func<T,TResult>
  nameWithType: Func<T,TResult>
  fullName: System.Func<T,TResult>
- uid: System.Func{TKey,TValue}
  parent: System
  isExternal: false
  name: Func<TKey,TValue>
  nameWithType: Func<TKey,TValue>
  fullName: System.Func<TKey,TValue>
  spec.csharp:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
  - name: <
    nameWithType: <
    fullName: <
  - uid: TKey
    name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ','
    nameWithType: ','
    fullName: ','
  - uid: TValue
    name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Func`3
  name: Func<T1,T2,TResult>
  nameWithType: Func<T1,T2,TResult>
  fullName: System.Func<T1,T2,TResult>
- uid: System.Func{TKey,TValue,TValue}
  parent: System
  isExternal: false
  name: Func<TKey,TValue,TValue>
  nameWithType: Func<TKey,TValue,TValue>
  fullName: System.Func<TKey,TValue,TValue>
  spec.csharp:
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
  - name: <
    nameWithType: <
    fullName: <
  - uid: TKey
    name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ','
    nameWithType: ','
    fullName: ','
  - uid: TValue
    name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: ','
    nameWithType: ','
    fullName: ','
  - uid: TValue
    name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Collections.Immutable.ImmutableInterlocked.AddOrUpdate``2(System.Collections.Immutable.ImmutableDictionary{``0,``1}@,``0,``1,System.Func{``0,``1,``1})
  parent: System.Collections.Immutable.ImmutableInterlocked
  isExternal: false
  name: AddOrUpdate<TKey,TValue>(ImmutableDictionary<TKey,TValue>, TKey, TValue, Func<TKey,TValue,TValue>)
  nameWithType: ImmutableInterlocked.AddOrUpdate<TKey,TValue>(ImmutableDictionary<TKey,TValue>, TKey, TValue, Func<TKey,TValue,TValue>)
  fullName: ImmutableInterlocked.AddOrUpdate<TKey,TValue>(ImmutableDictionary<TKey,TValue>, TKey, TValue, Func<TKey,TValue,TValue>)
- uid: System.Collections.Immutable.ImmutableInterlocked.Enqueue``1(System.Collections.Immutable.ImmutableQueue{``0}@,``0)
  parent: System.Collections.Immutable.ImmutableInterlocked
  isExternal: false
  name: Enqueue<T>(ImmutableQueue<T>, T)
  nameWithType: ImmutableInterlocked.Enqueue<T>(ImmutableQueue<T>, T)
  fullName: ImmutableInterlocked.Enqueue<T>(ImmutableQueue<T>, T)
- uid: System.Collections.Immutable.ImmutableQueue`1
  parent: System.Collections.Immutable
  isExternal: false
  name: ImmutableQueue<T>
  nameWithType: ImmutableQueue<T>
  fullName: System.Collections.Immutable.ImmutableQueue<T>
- uid: T
  isExternal: true
  name: T
  nameWithType: T
  fullName: T
- uid: System.Collections.Immutable.ImmutableInterlocked.GetOrAdd``3(System.Collections.Immutable.ImmutableDictionary{``0,``1}@,``0,System.Func{``0,``2,``1},``2)
  parent: System.Collections.Immutable.ImmutableInterlocked
  isExternal: false
  name: GetOrAdd<TKey,TValue,TArg>(ImmutableDictionary<TKey,TValue>, TKey, Func<TKey,TArg,TValue>, TArg)
  nameWithType: ImmutableInterlocked.GetOrAdd<TKey,TValue,TArg>(ImmutableDictionary<TKey,TValue>, TKey, Func<TKey,TArg,TValue>, TArg)
  fullName: ImmutableInterlocked.GetOrAdd<TKey,TValue,TArg>(ImmutableDictionary<TKey,TValue>, TKey, Func<TKey,TArg,TValue>, TArg)
- uid: TArg
  name: TArg
  nameWithType: TArg
  fullName: TArg
- uid: System.Func{TKey,TArg,TValue}
  parent: System
  isExternal: false
  name: Func<TKey,TArg,TValue>
  nameWithType: Func<TKey,TArg,TValue>
  fullName: System.Func<TKey,TArg,TValue>
  spec.csharp:
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
  - name: <
    nameWithType: <
    fullName: <
  - uid: TKey
    name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ','
    nameWithType: ','
    fullName: ','
  - uid: TArg
    name: TArg
    nameWithType: TArg
    fullName: TArg
  - name: ','
    nameWithType: ','
    fullName: ','
  - uid: TValue
    name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Collections.Immutable.ImmutableInterlocked.GetOrAdd``2(System.Collections.Immutable.ImmutableDictionary{``0,``1}@,``0,System.Func{``0,``1})
  parent: System.Collections.Immutable.ImmutableInterlocked
  isExternal: false
  name: GetOrAdd<TKey,TValue>(ImmutableDictionary<TKey,TValue>, TKey, Func<TKey,TValue>)
  nameWithType: ImmutableInterlocked.GetOrAdd<TKey,TValue>(ImmutableDictionary<TKey,TValue>, TKey, Func<TKey,TValue>)
  fullName: ImmutableInterlocked.GetOrAdd<TKey,TValue>(ImmutableDictionary<TKey,TValue>, TKey, Func<TKey,TValue>)
- uid: System.Collections.Immutable.ImmutableInterlocked.GetOrAdd``2(System.Collections.Immutable.ImmutableDictionary{``0,``1}@,``0,``1)
  parent: System.Collections.Immutable.ImmutableInterlocked
  isExternal: false
  name: GetOrAdd<TKey,TValue>(ImmutableDictionary<TKey,TValue>, TKey, TValue)
  nameWithType: ImmutableInterlocked.GetOrAdd<TKey,TValue>(ImmutableDictionary<TKey,TValue>, TKey, TValue)
  fullName: ImmutableInterlocked.GetOrAdd<TKey,TValue>(ImmutableDictionary<TKey,TValue>, TKey, TValue)
- uid: System.Collections.Immutable.ImmutableInterlocked.InterlockedCompareExchange``1(System.Collections.Immutable.ImmutableArray{``0}@,System.Collections.Immutable.ImmutableArray{``0},System.Collections.Immutable.ImmutableArray{``0})
  parent: System.Collections.Immutable.ImmutableInterlocked
  isExternal: false
  name: InterlockedCompareExchange<T>(ImmutableArray<T>, ImmutableArray<T>, ImmutableArray<T>)
  nameWithType: ImmutableInterlocked.InterlockedCompareExchange<T>(ImmutableArray<T>, ImmutableArray<T>, ImmutableArray<T>)
  fullName: ImmutableInterlocked.InterlockedCompareExchange<T>(ImmutableArray<T>, ImmutableArray<T>, ImmutableArray<T>)
- uid: System.Collections.Immutable.ImmutableArray`1
  parent: System.Collections.Immutable
  isExternal: false
  name: ImmutableArray<T>
  nameWithType: ImmutableArray<T>
  fullName: System.Collections.Immutable.ImmutableArray<T>
- uid: System.Collections.Immutable.ImmutableInterlocked.InterlockedExchange``1(System.Collections.Immutable.ImmutableArray{``0}@,System.Collections.Immutable.ImmutableArray{``0})
  parent: System.Collections.Immutable.ImmutableInterlocked
  isExternal: false
  name: InterlockedExchange<T>(ImmutableArray<T>, ImmutableArray<T>)
  nameWithType: ImmutableInterlocked.InterlockedExchange<T>(ImmutableArray<T>, ImmutableArray<T>)
  fullName: ImmutableInterlocked.InterlockedExchange<T>(ImmutableArray<T>, ImmutableArray<T>)
- uid: System.Collections.Immutable.ImmutableInterlocked.InterlockedInitialize``1(System.Collections.Immutable.ImmutableArray{``0}@,System.Collections.Immutable.ImmutableArray{``0})
  parent: System.Collections.Immutable.ImmutableInterlocked
  isExternal: false
  name: InterlockedInitialize<T>(ImmutableArray<T>, ImmutableArray<T>)
  nameWithType: ImmutableInterlocked.InterlockedInitialize<T>(ImmutableArray<T>, ImmutableArray<T>)
  fullName: ImmutableInterlocked.InterlockedInitialize<T>(ImmutableArray<T>, ImmutableArray<T>)
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Collections.Immutable.ImmutableInterlocked.Push``1(System.Collections.Immutable.ImmutableStack{``0}@,``0)
  parent: System.Collections.Immutable.ImmutableInterlocked
  isExternal: false
  name: Push<T>(ImmutableStack<T>, T)
  nameWithType: ImmutableInterlocked.Push<T>(ImmutableStack<T>, T)
  fullName: ImmutableInterlocked.Push<T>(ImmutableStack<T>, T)
- uid: System.Collections.Immutable.ImmutableStack`1
  parent: System.Collections.Immutable
  isExternal: false
  name: ImmutableStack<T>
  nameWithType: ImmutableStack<T>
  fullName: System.Collections.Immutable.ImmutableStack<T>
- uid: System.Collections.Immutable.ImmutableInterlocked.TryAdd``2(System.Collections.Immutable.ImmutableDictionary{``0,``1}@,``0,``1)
  parent: System.Collections.Immutable.ImmutableInterlocked
  isExternal: false
  name: TryAdd<TKey,TValue>(ImmutableDictionary<TKey,TValue>, TKey, TValue)
  nameWithType: ImmutableInterlocked.TryAdd<TKey,TValue>(ImmutableDictionary<TKey,TValue>, TKey, TValue)
  fullName: ImmutableInterlocked.TryAdd<TKey,TValue>(ImmutableDictionary<TKey,TValue>, TKey, TValue)
- uid: System.Collections.Immutable.ImmutableInterlocked.TryDequeue``1(System.Collections.Immutable.ImmutableQueue{``0}@,``0@)
  parent: System.Collections.Immutable.ImmutableInterlocked
  isExternal: false
  name: TryDequeue<T>(ImmutableQueue<T>, T)
  nameWithType: ImmutableInterlocked.TryDequeue<T>(ImmutableQueue<T>, T)
  fullName: ImmutableInterlocked.TryDequeue<T>(ImmutableQueue<T>, T)
- uid: System.Collections.Immutable.ImmutableInterlocked.TryPop``1(System.Collections.Immutable.ImmutableStack{``0}@,``0@)
  parent: System.Collections.Immutable.ImmutableInterlocked
  isExternal: false
  name: TryPop<T>(ImmutableStack<T>, T)
  nameWithType: ImmutableInterlocked.TryPop<T>(ImmutableStack<T>, T)
  fullName: ImmutableInterlocked.TryPop<T>(ImmutableStack<T>, T)
- uid: System.Collections.Immutable.ImmutableInterlocked.TryRemove``2(System.Collections.Immutable.ImmutableDictionary{``0,``1}@,``0,``1@)
  parent: System.Collections.Immutable.ImmutableInterlocked
  isExternal: false
  name: TryRemove<TKey,TValue>(ImmutableDictionary<TKey,TValue>, TKey, TValue)
  nameWithType: ImmutableInterlocked.TryRemove<TKey,TValue>(ImmutableDictionary<TKey,TValue>, TKey, TValue)
  fullName: ImmutableInterlocked.TryRemove<TKey,TValue>(ImmutableDictionary<TKey,TValue>, TKey, TValue)
- uid: System.Collections.Immutable.ImmutableInterlocked.TryUpdate``2(System.Collections.Immutable.ImmutableDictionary{``0,``1}@,``0,``1,``1)
  parent: System.Collections.Immutable.ImmutableInterlocked
  isExternal: false
  name: TryUpdate<TKey,TValue>(ImmutableDictionary<TKey,TValue>, TKey, TValue, TValue)
  nameWithType: ImmutableInterlocked.TryUpdate<TKey,TValue>(ImmutableDictionary<TKey,TValue>, TKey, TValue, TValue)
  fullName: ImmutableInterlocked.TryUpdate<TKey,TValue>(ImmutableDictionary<TKey,TValue>, TKey, TValue, TValue)
- uid: System.Collections.Immutable.ImmutableInterlocked.Update``2(``0@,System.Func{``0,``1,``0},``1)
  parent: System.Collections.Immutable.ImmutableInterlocked
  isExternal: false
  name: Update<T,TArg>(T, Func<T,TArg,T>, TArg)
  nameWithType: ImmutableInterlocked.Update<T,TArg>(T, Func<T,TArg,T>, TArg)
  fullName: ImmutableInterlocked.Update<T,TArg>(T, Func<T,TArg,T>, TArg)
- uid: System.Func{T,TArg,T}
  parent: System
  isExternal: false
  name: Func<T,TArg,T>
  nameWithType: Func<T,TArg,T>
  fullName: System.Func<T,TArg,T>
  spec.csharp:
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
  - name: <
    nameWithType: <
    fullName: <
  - uid: T
    name: T
    nameWithType: T
    fullName: T
  - name: ','
    nameWithType: ','
    fullName: ','
  - uid: TArg
    name: TArg
    nameWithType: TArg
    fullName: TArg
  - name: ','
    nameWithType: ','
    fullName: ','
  - uid: T
    name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Collections.Immutable.ImmutableInterlocked.Update``1(``0@,System.Func{``0,``0})
  parent: System.Collections.Immutable.ImmutableInterlocked
  isExternal: false
  name: Update<T>(T, Func<T,T>)
  nameWithType: ImmutableInterlocked.Update<T>(T, Func<T,T>)
  fullName: ImmutableInterlocked.Update<T>(T, Func<T,T>)
- uid: System.Func{T,T}
  parent: System
  isExternal: false
  name: Func<T,T>
  nameWithType: Func<T,T>
  fullName: System.Func<T,T>
  spec.csharp:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
  - name: <
    nameWithType: <
    fullName: <
  - uid: T
    name: T
    nameWithType: T
    fullName: T
  - name: ','
    nameWithType: ','
    fullName: ','
  - uid: T
    name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Collections.Immutable.ImmutableInterlocked.AddOrUpdate``2*
  parent: System.Collections.Immutable.ImmutableInterlocked
  isExternal: false
  name: AddOrUpdate<TKey,TValue>
  nameWithType: ImmutableInterlocked.AddOrUpdate<TKey,TValue>
  fullName: ImmutableInterlocked.AddOrUpdate<TKey,TValue>
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Immutable/ImmutableInterlocked.xml
- uid: System.Collections.Immutable.ImmutableInterlocked.Enqueue``1*
  parent: System.Collections.Immutable.ImmutableInterlocked
  isExternal: false
  name: Enqueue<T>
  nameWithType: ImmutableInterlocked.Enqueue<T>
  fullName: ImmutableInterlocked.Enqueue<T>
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Immutable/ImmutableInterlocked.xml
- uid: System.Collections.Immutable.ImmutableInterlocked.GetOrAdd``3*
  parent: System.Collections.Immutable.ImmutableInterlocked
  isExternal: false
  name: GetOrAdd<TKey,TValue,TArg>
  nameWithType: ImmutableInterlocked.GetOrAdd<TKey,TValue,TArg>
  fullName: ImmutableInterlocked.GetOrAdd<TKey,TValue,TArg>
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Immutable/ImmutableInterlocked.xml
- uid: System.Collections.Immutable.ImmutableInterlocked.GetOrAdd``2*
  parent: System.Collections.Immutable.ImmutableInterlocked
  isExternal: false
  name: GetOrAdd<TKey,TValue>
  nameWithType: ImmutableInterlocked.GetOrAdd<TKey,TValue>
  fullName: ImmutableInterlocked.GetOrAdd<TKey,TValue>
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Immutable/ImmutableInterlocked.xml
- uid: System.Collections.Immutable.ImmutableInterlocked.InterlockedCompareExchange``1*
  parent: System.Collections.Immutable.ImmutableInterlocked
  isExternal: false
  name: InterlockedCompareExchange<T>
  nameWithType: ImmutableInterlocked.InterlockedCompareExchange<T>
  fullName: ImmutableInterlocked.InterlockedCompareExchange<T>
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Immutable/ImmutableInterlocked.xml
- uid: System.Collections.Immutable.ImmutableInterlocked.InterlockedExchange``1*
  parent: System.Collections.Immutable.ImmutableInterlocked
  isExternal: false
  name: InterlockedExchange<T>
  nameWithType: ImmutableInterlocked.InterlockedExchange<T>
  fullName: ImmutableInterlocked.InterlockedExchange<T>
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Immutable/ImmutableInterlocked.xml
- uid: System.Collections.Immutable.ImmutableInterlocked.InterlockedInitialize``1*
  parent: System.Collections.Immutable.ImmutableInterlocked
  isExternal: false
  name: InterlockedInitialize<T>
  nameWithType: ImmutableInterlocked.InterlockedInitialize<T>
  fullName: ImmutableInterlocked.InterlockedInitialize<T>
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Immutable/ImmutableInterlocked.xml
- uid: System.Collections.Immutable.ImmutableInterlocked.Push``1*
  parent: System.Collections.Immutable.ImmutableInterlocked
  isExternal: false
  name: Push<T>
  nameWithType: ImmutableInterlocked.Push<T>
  fullName: ImmutableInterlocked.Push<T>
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Immutable/ImmutableInterlocked.xml
- uid: System.Collections.Immutable.ImmutableInterlocked.TryAdd``2*
  parent: System.Collections.Immutable.ImmutableInterlocked
  isExternal: false
  name: TryAdd<TKey,TValue>
  nameWithType: ImmutableInterlocked.TryAdd<TKey,TValue>
  fullName: ImmutableInterlocked.TryAdd<TKey,TValue>
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Immutable/ImmutableInterlocked.xml
- uid: System.Collections.Immutable.ImmutableInterlocked.TryDequeue``1*
  parent: System.Collections.Immutable.ImmutableInterlocked
  isExternal: false
  name: TryDequeue<T>
  nameWithType: ImmutableInterlocked.TryDequeue<T>
  fullName: ImmutableInterlocked.TryDequeue<T>
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Immutable/ImmutableInterlocked.xml
- uid: System.Collections.Immutable.ImmutableInterlocked.TryPop``1*
  parent: System.Collections.Immutable.ImmutableInterlocked
  isExternal: false
  name: TryPop<T>
  nameWithType: ImmutableInterlocked.TryPop<T>
  fullName: ImmutableInterlocked.TryPop<T>
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Immutable/ImmutableInterlocked.xml
- uid: System.Collections.Immutable.ImmutableInterlocked.TryRemove``2*
  parent: System.Collections.Immutable.ImmutableInterlocked
  isExternal: false
  name: TryRemove<TKey,TValue>
  nameWithType: ImmutableInterlocked.TryRemove<TKey,TValue>
  fullName: ImmutableInterlocked.TryRemove<TKey,TValue>
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Immutable/ImmutableInterlocked.xml
- uid: System.Collections.Immutable.ImmutableInterlocked.TryUpdate``2*
  parent: System.Collections.Immutable.ImmutableInterlocked
  isExternal: false
  name: TryUpdate<TKey,TValue>
  nameWithType: ImmutableInterlocked.TryUpdate<TKey,TValue>
  fullName: ImmutableInterlocked.TryUpdate<TKey,TValue>
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Immutable/ImmutableInterlocked.xml
- uid: System.Collections.Immutable.ImmutableInterlocked.Update``2*
  parent: System.Collections.Immutable.ImmutableInterlocked
  isExternal: false
  name: Update<T,TArg>
  nameWithType: ImmutableInterlocked.Update<T,TArg>
  fullName: ImmutableInterlocked.Update<T,TArg>
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Immutable/ImmutableInterlocked.xml
- uid: System.Collections.Immutable.ImmutableInterlocked.Update``1*
  parent: System.Collections.Immutable.ImmutableInterlocked
  isExternal: false
  name: Update<T>
  nameWithType: ImmutableInterlocked.Update<T>
  fullName: ImmutableInterlocked.Update<T>
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Immutable/ImmutableInterlocked.xml
- uid: System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: false
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: Object.Equals(Object)
- uid: System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: false
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: Object.Equals(Object, Object)
- uid: System.Object.GetHashCode
  parent: System.Object
  isExternal: false
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: Object.GetHashCode()
- uid: System.Object.GetType
  parent: System.Object
  isExternal: false
  name: GetType()
  nameWithType: Object.GetType()
  fullName: Object.GetType()
- uid: System.Object.MemberwiseClone
  parent: System.Object
  isExternal: false
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: Object.MemberwiseClone()
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: false
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: Object.ReferenceEquals(Object, Object)
- uid: System.Object.ToString
  parent: System.Object
  isExternal: false
  name: ToString()
  nameWithType: Object.ToString()
  fullName: Object.ToString()

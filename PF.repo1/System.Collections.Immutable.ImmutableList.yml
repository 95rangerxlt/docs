### YamlMime:ManagedReference
items:
- uid: System.Collections.Immutable.ImmutableList
  commentId: T:System.Collections.Immutable.ImmutableList
  id: ImmutableList
  children:
  - System.Collections.Immutable.ImmutableList.Create``1
  - System.Collections.Immutable.ImmutableList.Create``1(``0)
  - System.Collections.Immutable.ImmutableList.Create``1(``0[])
  - System.Collections.Immutable.ImmutableList.CreateBuilder``1
  - System.Collections.Immutable.ImmutableList.CreateRange``1(System.Collections.Generic.IEnumerable{``0})
  - System.Collections.Immutable.ImmutableList.IndexOf``1(System.Collections.Immutable.IImmutableList{``0},``0,System.Int32)
  - System.Collections.Immutable.ImmutableList.IndexOf``1(System.Collections.Immutable.IImmutableList{``0},``0,System.Int32,System.Int32)
  - System.Collections.Immutable.ImmutableList.IndexOf``1(System.Collections.Immutable.IImmutableList{``0},``0)
  - System.Collections.Immutable.ImmutableList.IndexOf``1(System.Collections.Immutable.IImmutableList{``0},``0,System.Collections.Generic.IEqualityComparer{``0})
  - System.Collections.Immutable.ImmutableList.LastIndexOf``1(System.Collections.Immutable.IImmutableList{``0},``0)
  - System.Collections.Immutable.ImmutableList.LastIndexOf``1(System.Collections.Immutable.IImmutableList{``0},``0,System.Collections.Generic.IEqualityComparer{``0})
  - System.Collections.Immutable.ImmutableList.LastIndexOf``1(System.Collections.Immutable.IImmutableList{``0},``0,System.Int32)
  - System.Collections.Immutable.ImmutableList.LastIndexOf``1(System.Collections.Immutable.IImmutableList{``0},``0,System.Int32,System.Int32)
  - System.Collections.Immutable.ImmutableList.Remove``1(System.Collections.Immutable.IImmutableList{``0},``0)
  - System.Collections.Immutable.ImmutableList.RemoveRange``1(System.Collections.Immutable.IImmutableList{``0},System.Collections.Generic.IEnumerable{``0})
  - System.Collections.Immutable.ImmutableList.Replace``1(System.Collections.Immutable.IImmutableList{``0},``0,``0)
  - System.Collections.Immutable.ImmutableList.ToImmutableList``1(System.Collections.Generic.IEnumerable{``0})
  langs:
  - csharp
  name: ImmutableList
  nameWithType: ImmutableList
  fullName: System.Collections.Immutable.ImmutableList
  type: Class
  assemblies:
  - System.Collections.Immutable
  namespace: System.Collections.Immutable
  summary: "Provides a set of initialization methods for instances of the <xref href=\"System.Collections.Immutable.ImmutableList`1\"></xref> class.  \n  \n [!INCLUDE[immutable_nuget_short](~/includes/immutable-nuget-short-md.md)]"
  syntax:
    content: public static class ImmutableList
  inheritance:
  - System.Object
  implements: []
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Immutable/ImmutableList.xml
  author: mairaw
  ms.author: mairaw
  manager: wpickett
- uid: System.Collections.Immutable.ImmutableList.Create``1
  commentId: M:System.Collections.Immutable.ImmutableList.Create``1
  id: Create``1
  parent: System.Collections.Immutable.ImmutableList
  langs:
  - csharp
  name: Create<T>()
  nameWithType: ImmutableList.Create<T>()
  fullName: ImmutableList.Create<T>()
  type: Method
  assemblies:
  - System.Collections.Immutable
  namespace: System.Collections.Immutable
  summary: Creates an empty immutable list.
  syntax:
    content: public static System.Collections.Immutable.ImmutableList<T> Create<T> ();
    parameters: []
    typeParameters:
    - id: T
      description: The type of items to be stored in the .
    return:
      type: System.Collections.Immutable.ImmutableList`1
      description: An empty .
  overload: System.Collections.Immutable.ImmutableList.Create``1*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Immutable/ImmutableList.xml
  author: mairaw
  ms.author: mairaw
  manager: wpickett
- uid: System.Collections.Immutable.ImmutableList.Create``1(``0)
  commentId: M:System.Collections.Immutable.ImmutableList.Create``1(``0)
  id: Create``1(``0)
  parent: System.Collections.Immutable.ImmutableList
  langs:
  - csharp
  name: Create<T>(T)
  nameWithType: ImmutableList.Create<T>(T)
  fullName: ImmutableList.Create<T>(T)
  type: Method
  assemblies:
  - System.Collections.Immutable
  namespace: System.Collections.Immutable
  summary: Creates a new immutable list that contains the specified item.
  syntax:
    content: public static System.Collections.Immutable.ImmutableList<T> Create<T> (T item);
    parameters:
    - id: item
      type: T
      description: The item to prepopulate the list with.
    typeParameters:
    - id: T
      description: The type of items in the .
    return:
      type: System.Collections.Immutable.ImmutableList`1
      description: A new  that contains the specified item.
  overload: System.Collections.Immutable.ImmutableList.Create``1*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Immutable/ImmutableList.xml
  author: mairaw
  ms.author: mairaw
  manager: wpickett
- uid: System.Collections.Immutable.ImmutableList.Create``1(``0[])
  commentId: M:System.Collections.Immutable.ImmutableList.Create``1(``0[])
  id: Create``1(``0[])
  parent: System.Collections.Immutable.ImmutableList
  langs:
  - csharp
  name: Create<T>(T[])
  nameWithType: ImmutableList.Create<T>(T[])
  fullName: ImmutableList.Create<T>(T[])
  type: Method
  assemblies:
  - System.Collections.Immutable
  namespace: System.Collections.Immutable
  summary: Creates a new immutable list that contains the specified array of items.
  syntax:
    content: public static System.Collections.Immutable.ImmutableList<T> Create<T> (T[] items);
    parameters:
    - id: items
      type: T[]
      description: An array that contains the items to prepopulate the list with.
    typeParameters:
    - id: T
      description: The type of items in the .
    return:
      type: System.Collections.Immutable.ImmutableList`1
      description: A new immutable list that contains the specified items.
  overload: System.Collections.Immutable.ImmutableList.Create``1*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Immutable/ImmutableList.xml
  author: mairaw
  ms.author: mairaw
  manager: wpickett
- uid: System.Collections.Immutable.ImmutableList.CreateBuilder``1
  commentId: M:System.Collections.Immutable.ImmutableList.CreateBuilder``1
  id: CreateBuilder``1
  parent: System.Collections.Immutable.ImmutableList
  langs:
  - csharp
  name: CreateBuilder<T>()
  nameWithType: ImmutableList.CreateBuilder<T>()
  fullName: ImmutableList.CreateBuilder<T>()
  type: Method
  assemblies:
  - System.Collections.Immutable
  namespace: System.Collections.Immutable
  summary: Creates a new immutable list builder.
  syntax:
    content: public static System.Collections.Immutable.ImmutableList<T>.Builder CreateBuilder<T> ();
    parameters: []
    typeParameters:
    - id: T
      description: The type of items stored by the collection.
    return:
      type: System.Collections.Immutable.ImmutableList{T}
      description: The immutable collection builder.
  overload: System.Collections.Immutable.ImmutableList.CreateBuilder``1*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Immutable/ImmutableList.xml
  author: mairaw
  ms.author: mairaw
  manager: wpickett
- uid: System.Collections.Immutable.ImmutableList.CreateRange``1(System.Collections.Generic.IEnumerable{``0})
  commentId: M:System.Collections.Immutable.ImmutableList.CreateRange``1(System.Collections.Generic.IEnumerable{``0})
  id: CreateRange``1(System.Collections.Generic.IEnumerable{``0})
  parent: System.Collections.Immutable.ImmutableList
  langs:
  - csharp
  name: CreateRange<T>(IEnumerable<T>)
  nameWithType: ImmutableList.CreateRange<T>(IEnumerable<T>)
  fullName: ImmutableList.CreateRange<T>(IEnumerable<T>)
  type: Method
  assemblies:
  - System.Collections.Immutable
  namespace: System.Collections.Immutable
  summary: Creates a new immutable list that contains the specified items.
  syntax:
    content: public static System.Collections.Immutable.ImmutableList<T> CreateRange<T> (System.Collections.Generic.IEnumerable<T> items);
    parameters:
    - id: items
      type: System.Collections.Generic.IEnumerable`1
      description: The items to add to the list.
    typeParameters:
    - id: T
      description: The type of items in the .
    return:
      type: System.Collections.Immutable.ImmutableList`1
      description: Returns an immutable list that contains the specified items.
  overload: System.Collections.Immutable.ImmutableList.CreateRange``1*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Immutable/ImmutableList.xml
  author: mairaw
  ms.author: mairaw
  manager: wpickett
- uid: System.Collections.Immutable.ImmutableList.IndexOf``1(System.Collections.Immutable.IImmutableList{``0},``0,System.Int32)
  commentId: M:System.Collections.Immutable.ImmutableList.IndexOf``1(System.Collections.Immutable.IImmutableList{``0},``0,System.Int32)
  id: IndexOf``1(System.Collections.Immutable.IImmutableList{``0},``0,System.Int32)
  parent: System.Collections.Immutable.ImmutableList
  langs:
  - csharp
  name: IndexOf<T>(IImmutableList<T>, T, Int32)
  nameWithType: ImmutableList.IndexOf<T>(IImmutableList<T>, T, Int32)
  fullName: ImmutableList.IndexOf<T>(IImmutableList<T>, T, Int32)
  type: Method
  assemblies:
  - System.Collections.Immutable
  namespace: System.Collections.Immutable
  summary: Searches for the specified object and returns the zero-based index of the first occurrence within the range of elements in the immutable list that extends from the specified index to the last element.
  syntax:
    content: public static int IndexOf<T> (this System.Collections.Immutable.IImmutableList<T> list, T item, int startIndex);
    parameters:
    - id: list
      type: System.Collections.Immutable.IImmutableList`1
      description: The list to search.
    - id: item
      type: T
      description: The object to locate in the Immutable list. The value can be null for reference types.
    - id: startIndex
      type: System.Int32
      description: The zero-based starting index of the search. 0 (zero) is valid in an empty list.
    typeParameters:
    - id: T
      description: The type of items in the list.
    return:
      type: System.Int32
      description: The zero-based index of the first occurrence of item within the range of elements in the Immutable list that extends from index to the last element, if found; otherwise, –1.
  overload: System.Collections.Immutable.ImmutableList.IndexOf``1*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Immutable/ImmutableList.xml
  author: mairaw
  ms.author: mairaw
  manager: wpickett
- uid: System.Collections.Immutable.ImmutableList.IndexOf``1(System.Collections.Immutable.IImmutableList{``0},``0,System.Int32,System.Int32)
  commentId: M:System.Collections.Immutable.ImmutableList.IndexOf``1(System.Collections.Immutable.IImmutableList{``0},``0,System.Int32,System.Int32)
  id: IndexOf``1(System.Collections.Immutable.IImmutableList{``0},``0,System.Int32,System.Int32)
  parent: System.Collections.Immutable.ImmutableList
  langs:
  - csharp
  name: IndexOf<T>(IImmutableList<T>, T, Int32, Int32)
  nameWithType: ImmutableList.IndexOf<T>(IImmutableList<T>, T, Int32, Int32)
  fullName: ImmutableList.IndexOf<T>(IImmutableList<T>, T, Int32, Int32)
  type: Method
  assemblies:
  - System.Collections.Immutable
  namespace: System.Collections.Immutable
  summary: Searches for the specified object and returns the zero-based index of the first occurrence within the range of elements in the immutable list that extends from the specified index to the last element.
  syntax:
    content: public static int IndexOf<T> (this System.Collections.Immutable.IImmutableList<T> list, T item, int startIndex, int count);
    parameters:
    - id: list
      type: System.Collections.Immutable.IImmutableList`1
      description: The list to search.
    - id: item
      type: T
      description: The object to locate in the Immutable list. The value can be null for reference types.
    - id: startIndex
      type: System.Int32
      description: The zero-based starting index of the search. 0 (zero) is valid in an empty list.
    - id: count
      type: System.Int32
      description: The number of elements in the section to search.
    typeParameters:
    - id: T
      description: The type of items in the list.
    return:
      type: System.Int32
      description: The zero-based index of the first occurrence of item within the range of elements in the Immutable list that extends from index to the last element, if found; otherwise, –1.
  overload: System.Collections.Immutable.ImmutableList.IndexOf``1*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Immutable/ImmutableList.xml
  author: mairaw
  ms.author: mairaw
  manager: wpickett
- uid: System.Collections.Immutable.ImmutableList.IndexOf``1(System.Collections.Immutable.IImmutableList{``0},``0)
  commentId: M:System.Collections.Immutable.ImmutableList.IndexOf``1(System.Collections.Immutable.IImmutableList{``0},``0)
  id: IndexOf``1(System.Collections.Immutable.IImmutableList{``0},``0)
  parent: System.Collections.Immutable.ImmutableList
  langs:
  - csharp
  name: IndexOf<T>(IImmutableList<T>, T)
  nameWithType: ImmutableList.IndexOf<T>(IImmutableList<T>, T)
  fullName: ImmutableList.IndexOf<T>(IImmutableList<T>, T)
  type: Method
  assemblies:
  - System.Collections.Immutable
  namespace: System.Collections.Immutable
  summary: Searches for the specified object and returns the zero-based index of the first occurrence within the list.
  syntax:
    content: public static int IndexOf<T> (this System.Collections.Immutable.IImmutableList<T> list, T item);
    parameters:
    - id: list
      type: System.Collections.Immutable.IImmutableList`1
      description: The list to search.
    - id: item
      type: T
      description: The object to locate in the list. The value can be null for reference types.
    typeParameters:
    - id: T
      description: The type of items in the list.
    return:
      type: System.Int32
      description: The zero-based index of the first occurrence of item within the range of elements in the list that extends from index to the last element, if found; otherwise, –1.
  overload: System.Collections.Immutable.ImmutableList.IndexOf``1*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Immutable/ImmutableList.xml
  author: mairaw
  ms.author: mairaw
  manager: wpickett
- uid: System.Collections.Immutable.ImmutableList.IndexOf``1(System.Collections.Immutable.IImmutableList{``0},``0,System.Collections.Generic.IEqualityComparer{``0})
  commentId: M:System.Collections.Immutable.ImmutableList.IndexOf``1(System.Collections.Immutable.IImmutableList{``0},``0,System.Collections.Generic.IEqualityComparer{``0})
  id: IndexOf``1(System.Collections.Immutable.IImmutableList{``0},``0,System.Collections.Generic.IEqualityComparer{``0})
  parent: System.Collections.Immutable.ImmutableList
  langs:
  - csharp
  name: IndexOf<T>(IImmutableList<T>, T, IEqualityComparer<T>)
  nameWithType: ImmutableList.IndexOf<T>(IImmutableList<T>, T, IEqualityComparer<T>)
  fullName: ImmutableList.IndexOf<T>(IImmutableList<T>, T, IEqualityComparer<T>)
  type: Method
  assemblies:
  - System.Collections.Immutable
  namespace: System.Collections.Immutable
  summary: Searches for the specified object and returns the zero-based index of the first occurrence within the list.
  syntax:
    content: public static int IndexOf<T> (this System.Collections.Immutable.IImmutableList<T> list, T item, System.Collections.Generic.IEqualityComparer<T> equalityComparer);
    parameters:
    - id: list
      type: System.Collections.Immutable.IImmutableList`1
      description: The list to search.
    - id: item
      type: T
      description: The object to locate in the Immutable list. The value can be null for reference types.
    - id: equalityComparer
      type: System.Collections.Generic.IEqualityComparer`1
      description: The equality comparer to use in the search.
    typeParameters:
    - id: T
      description: The type of items in the list.
    return:
      type: System.Int32
      description: The zero-based index of the first occurrence of item within the range of elements in the immutable list that extends from index to the last element, if found; otherwise, –1.
  overload: System.Collections.Immutable.ImmutableList.IndexOf``1*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Immutable/ImmutableList.xml
  author: mairaw
  ms.author: mairaw
  manager: wpickett
- uid: System.Collections.Immutable.ImmutableList.LastIndexOf``1(System.Collections.Immutable.IImmutableList{``0},``0)
  commentId: M:System.Collections.Immutable.ImmutableList.LastIndexOf``1(System.Collections.Immutable.IImmutableList{``0},``0)
  id: LastIndexOf``1(System.Collections.Immutable.IImmutableList{``0},``0)
  parent: System.Collections.Immutable.ImmutableList
  langs:
  - csharp
  name: LastIndexOf<T>(IImmutableList<T>, T)
  nameWithType: ImmutableList.LastIndexOf<T>(IImmutableList<T>, T)
  fullName: ImmutableList.LastIndexOf<T>(IImmutableList<T>, T)
  type: Method
  assemblies:
  - System.Collections.Immutable
  namespace: System.Collections.Immutable
  summary: Searches for the specified object and returns the zero-based index of the last occurrence within the entire immutable list.
  syntax:
    content: public static int LastIndexOf<T> (this System.Collections.Immutable.IImmutableList<T> list, T item);
    parameters:
    - id: list
      type: System.Collections.Immutable.IImmutableList`1
      description: The list to search.
    - id: item
      type: T
      description: The object to locate in the Immutable list. The value can be null for reference types.
    typeParameters:
    - id: T
      description: The type of items in the list.
    return:
      type: System.Int32
      description: The zero-based index of the last occurrence of item within the entire the Immutable list, if found; otherwise, –1.
  overload: System.Collections.Immutable.ImmutableList.LastIndexOf``1*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Immutable/ImmutableList.xml
  author: mairaw
  ms.author: mairaw
  manager: wpickett
- uid: System.Collections.Immutable.ImmutableList.LastIndexOf``1(System.Collections.Immutable.IImmutableList{``0},``0,System.Collections.Generic.IEqualityComparer{``0})
  commentId: M:System.Collections.Immutable.ImmutableList.LastIndexOf``1(System.Collections.Immutable.IImmutableList{``0},``0,System.Collections.Generic.IEqualityComparer{``0})
  id: LastIndexOf``1(System.Collections.Immutable.IImmutableList{``0},``0,System.Collections.Generic.IEqualityComparer{``0})
  parent: System.Collections.Immutable.ImmutableList
  langs:
  - csharp
  name: LastIndexOf<T>(IImmutableList<T>, T, IEqualityComparer<T>)
  nameWithType: ImmutableList.LastIndexOf<T>(IImmutableList<T>, T, IEqualityComparer<T>)
  fullName: ImmutableList.LastIndexOf<T>(IImmutableList<T>, T, IEqualityComparer<T>)
  type: Method
  assemblies:
  - System.Collections.Immutable
  namespace: System.Collections.Immutable
  summary: Searches for the specified object and returns the zero-based index of the last occurrence within the entire immutable list.
  syntax:
    content: public static int LastIndexOf<T> (this System.Collections.Immutable.IImmutableList<T> list, T item, System.Collections.Generic.IEqualityComparer<T> equalityComparer);
    parameters:
    - id: list
      type: System.Collections.Immutable.IImmutableList`1
      description: The list to search.
    - id: item
      type: T
      description: The object to locate in the Immutable list. The value can be null for reference types.
    - id: equalityComparer
      type: System.Collections.Generic.IEqualityComparer`1
      description: The equality comparer to use in the search.
    typeParameters:
    - id: T
      description: The type of items in the list.
    return:
      type: System.Int32
      description: The zero-based index of the last occurrence of item within the entire the Immutable list, if found; otherwise, –1.
  overload: System.Collections.Immutable.ImmutableList.LastIndexOf``1*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Immutable/ImmutableList.xml
  author: mairaw
  ms.author: mairaw
  manager: wpickett
- uid: System.Collections.Immutable.ImmutableList.LastIndexOf``1(System.Collections.Immutable.IImmutableList{``0},``0,System.Int32)
  commentId: M:System.Collections.Immutable.ImmutableList.LastIndexOf``1(System.Collections.Immutable.IImmutableList{``0},``0,System.Int32)
  id: LastIndexOf``1(System.Collections.Immutable.IImmutableList{``0},``0,System.Int32)
  parent: System.Collections.Immutable.ImmutableList
  langs:
  - csharp
  name: LastIndexOf<T>(IImmutableList<T>, T, Int32)
  nameWithType: ImmutableList.LastIndexOf<T>(IImmutableList<T>, T, Int32)
  fullName: ImmutableList.LastIndexOf<T>(IImmutableList<T>, T, Int32)
  type: Method
  assemblies:
  - System.Collections.Immutable
  namespace: System.Collections.Immutable
  summary: Searches for the specified object and returns the zero-based index of the last occurrence within the range of elements in the immutable list that extends from the first element to the specified index.
  syntax:
    content: public static int LastIndexOf<T> (this System.Collections.Immutable.IImmutableList<T> list, T item, int startIndex);
    parameters:
    - id: list
      type: System.Collections.Immutable.IImmutableList`1
      description: The list to search.
    - id: item
      type: T
      description: The object to locate in the Immutable list. The value can be null for reference types.
    - id: startIndex
      type: System.Int32
      description: The zero-based starting index of the backward search.
    typeParameters:
    - id: T
      description: The type of items in the list.
    return:
      type: System.Int32
      description: The zero-based index of the last occurrence of item within the range of elements in the Immutable list that extends from the first element to index, if found; otherwise, –1.
  overload: System.Collections.Immutable.ImmutableList.LastIndexOf``1*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Immutable/ImmutableList.xml
  author: mairaw
  ms.author: mairaw
  manager: wpickett
- uid: System.Collections.Immutable.ImmutableList.LastIndexOf``1(System.Collections.Immutable.IImmutableList{``0},``0,System.Int32,System.Int32)
  commentId: M:System.Collections.Immutable.ImmutableList.LastIndexOf``1(System.Collections.Immutable.IImmutableList{``0},``0,System.Int32,System.Int32)
  id: LastIndexOf``1(System.Collections.Immutable.IImmutableList{``0},``0,System.Int32,System.Int32)
  parent: System.Collections.Immutable.ImmutableList
  langs:
  - csharp
  name: LastIndexOf<T>(IImmutableList<T>, T, Int32, Int32)
  nameWithType: ImmutableList.LastIndexOf<T>(IImmutableList<T>, T, Int32, Int32)
  fullName: ImmutableList.LastIndexOf<T>(IImmutableList<T>, T, Int32, Int32)
  type: Method
  assemblies:
  - System.Collections.Immutable
  namespace: System.Collections.Immutable
  summary: Searches for the specified object and returns the zero-based index of the last occurrence within the range of elements in the immutable list that extends from the first element to the specified index.
  syntax:
    content: public static int LastIndexOf<T> (this System.Collections.Immutable.IImmutableList<T> list, T item, int startIndex, int count);
    parameters:
    - id: list
      type: System.Collections.Immutable.IImmutableList`1
      description: The list to search.
    - id: item
      type: T
      description: The object to locate in the Immutable list. The value can be null for reference types.
    - id: startIndex
      type: System.Int32
      description: The zero-based starting index of the backward search.
    - id: count
      type: System.Int32
      description: The number of elements in the section to search.
    typeParameters:
    - id: T
      description: The type of items in the list.
    return:
      type: System.Int32
      description: The zero-based index of the last occurrence of item within the range of elements in the Immutable list that extends from the first element to index, if found; otherwise, –1.
  overload: System.Collections.Immutable.ImmutableList.LastIndexOf``1*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Immutable/ImmutableList.xml
  author: mairaw
  ms.author: mairaw
  manager: wpickett
- uid: System.Collections.Immutable.ImmutableList.Remove``1(System.Collections.Immutable.IImmutableList{``0},``0)
  commentId: M:System.Collections.Immutable.ImmutableList.Remove``1(System.Collections.Immutable.IImmutableList{``0},``0)
  id: Remove``1(System.Collections.Immutable.IImmutableList{``0},``0)
  parent: System.Collections.Immutable.ImmutableList
  langs:
  - csharp
  name: Remove<T>(IImmutableList<T>, T)
  nameWithType: ImmutableList.Remove<T>(IImmutableList<T>, T)
  fullName: ImmutableList.Remove<T>(IImmutableList<T>, T)
  type: Method
  assemblies:
  - System.Collections.Immutable
  namespace: System.Collections.Immutable
  summary: Removes the specified value from this list.
  syntax:
    content: public static System.Collections.Immutable.IImmutableList<T> Remove<T> (this System.Collections.Immutable.IImmutableList<T> list, T value);
    parameters:
    - id: list
      type: System.Collections.Immutable.IImmutableList`1
      description: The list to search.
    - id: value
      type: T
      description: The value to remove.
    typeParameters:
    - id: T
      description: The type of items in the list.
    return:
      type: System.Collections.Immutable.IImmutableList`1
      description: A new immutable list with the element removed, or this list if the element is not in this list.
  overload: System.Collections.Immutable.ImmutableList.Remove``1*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Immutable/ImmutableList.xml
  author: mairaw
  ms.author: mairaw
  manager: wpickett
- uid: System.Collections.Immutable.ImmutableList.RemoveRange``1(System.Collections.Immutable.IImmutableList{``0},System.Collections.Generic.IEnumerable{``0})
  commentId: M:System.Collections.Immutable.ImmutableList.RemoveRange``1(System.Collections.Immutable.IImmutableList{``0},System.Collections.Generic.IEnumerable{``0})
  id: RemoveRange``1(System.Collections.Immutable.IImmutableList{``0},System.Collections.Generic.IEnumerable{``0})
  parent: System.Collections.Immutable.ImmutableList
  langs:
  - csharp
  name: RemoveRange<T>(IImmutableList<T>, IEnumerable<T>)
  nameWithType: ImmutableList.RemoveRange<T>(IImmutableList<T>, IEnumerable<T>)
  fullName: ImmutableList.RemoveRange<T>(IImmutableList<T>, IEnumerable<T>)
  type: Method
  assemblies:
  - System.Collections.Immutable
  namespace: System.Collections.Immutable
  summary: Removes the specified values from this list.
  syntax:
    content: public static System.Collections.Immutable.IImmutableList<T> RemoveRange<T> (this System.Collections.Immutable.IImmutableList<T> list, System.Collections.Generic.IEnumerable<T> items);
    parameters:
    - id: list
      type: System.Collections.Immutable.IImmutableList`1
      description: The list to search.
    - id: items
      type: System.Collections.Generic.IEnumerable`1
      description: The items to remove if matches are found in this list.
    typeParameters:
    - id: T
      description: The type of items in the list.
    return:
      type: System.Collections.Immutable.IImmutableList`1
      description: A new immutable list with the elements removed.
  overload: System.Collections.Immutable.ImmutableList.RemoveRange``1*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Immutable/ImmutableList.xml
  author: mairaw
  ms.author: mairaw
  manager: wpickett
- uid: System.Collections.Immutable.ImmutableList.Replace``1(System.Collections.Immutable.IImmutableList{``0},``0,``0)
  commentId: M:System.Collections.Immutable.ImmutableList.Replace``1(System.Collections.Immutable.IImmutableList{``0},``0,``0)
  id: Replace``1(System.Collections.Immutable.IImmutableList{``0},``0,``0)
  parent: System.Collections.Immutable.ImmutableList
  langs:
  - csharp
  name: Replace<T>(IImmutableList<T>, T, T)
  nameWithType: ImmutableList.Replace<T>(IImmutableList<T>, T, T)
  fullName: ImmutableList.Replace<T>(IImmutableList<T>, T, T)
  type: Method
  assemblies:
  - System.Collections.Immutable
  namespace: System.Collections.Immutable
  summary: Replaces the first equal element in the list with the specified element.
  syntax:
    content: public static System.Collections.Immutable.IImmutableList<T> Replace<T> (this System.Collections.Immutable.IImmutableList<T> list, T oldValue, T newValue);
    parameters:
    - id: list
      type: System.Collections.Immutable.IImmutableList`1
      description: The list to search.
    - id: oldValue
      type: T
      description: The element to replace.
    - id: newValue
      type: T
      description: The element to replace the old element with.
    typeParameters:
    - id: T
      description: The type of items in the list.
    return:
      type: System.Collections.Immutable.IImmutableList`1
      description: The new list -- even if the value being replaced is equal to the new value for that position.
  overload: System.Collections.Immutable.ImmutableList.Replace``1*
  exceptions:
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: Thrown when the old value does not exist in the list.
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Immutable/ImmutableList.xml
  author: mairaw
  ms.author: mairaw
  manager: wpickett
- uid: System.Collections.Immutable.ImmutableList.ToImmutableList``1(System.Collections.Generic.IEnumerable{``0})
  commentId: M:System.Collections.Immutable.ImmutableList.ToImmutableList``1(System.Collections.Generic.IEnumerable{``0})
  id: ToImmutableList``1(System.Collections.Generic.IEnumerable{``0})
  parent: System.Collections.Immutable.ImmutableList
  langs:
  - csharp
  name: ToImmutableList<TSource>(IEnumerable<TSource>)
  nameWithType: ImmutableList.ToImmutableList<TSource>(IEnumerable<TSource>)
  fullName: ImmutableList.ToImmutableList<TSource>(IEnumerable<TSource>)
  type: Method
  assemblies:
  - System.Collections.Immutable
  namespace: System.Collections.Immutable
  summary: Enumerates a sequence and produces an immutable list of its contents.
  syntax:
    content: public static System.Collections.Immutable.ImmutableList<TSource> ToImmutableList<TSource> (this System.Collections.Generic.IEnumerable<TSource> source);
    parameters:
    - id: source
      type: System.Collections.Generic.IEnumerable{TSource}
      description: The sequence to enumerate.
    typeParameters:
    - id: TSource
      description: The type of the elements in the sequence.
    return:
      type: System.Collections.Immutable.ImmutableList{TSource}
      description: An immutable list that contains the items in the specified sequence.
  overload: System.Collections.Immutable.ImmutableList.ToImmutableList``1*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Immutable/ImmutableList.xml
  author: mairaw
  ms.author: mairaw
  manager: wpickett
references:
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.ArgumentException
  parent: System
  isExternal: false
  name: ArgumentException
  nameWithType: ArgumentException
  fullName: System.ArgumentException
- uid: System.Collections.Immutable.ImmutableList.Create``1
  parent: System.Collections.Immutable.ImmutableList
  isExternal: false
  name: Create<T>()
  nameWithType: ImmutableList.Create<T>()
  fullName: ImmutableList.Create<T>()
- uid: System.Collections.Immutable.ImmutableList`1
  parent: System.Collections.Immutable
  isExternal: false
  name: ImmutableList<T>
  nameWithType: ImmutableList<T>
  fullName: System.Collections.Immutable.ImmutableList<T>
- uid: System.Collections.Immutable.ImmutableList.Create``1(``0)
  parent: System.Collections.Immutable.ImmutableList
  isExternal: false
  name: Create<T>(T)
  nameWithType: ImmutableList.Create<T>(T)
  fullName: ImmutableList.Create<T>(T)
- uid: T
  isExternal: true
  name: T
  nameWithType: T
  fullName: T
- uid: System.Collections.Immutable.ImmutableList.Create``1(``0[])
  parent: System.Collections.Immutable.ImmutableList
  isExternal: false
  name: Create<T>(T[])
  nameWithType: ImmutableList.Create<T>(T[])
  fullName: ImmutableList.Create<T>(T[])
- uid: T[]
  isExternal: true
  name: T[]
  nameWithType: T[]
  fullName: T[]
  spec.csharp:
  - uid: T
    name: T
    nameWithType: T
    fullName: T
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Collections.Immutable.ImmutableList.CreateBuilder``1
  parent: System.Collections.Immutable.ImmutableList
  isExternal: false
  name: CreateBuilder<T>()
  nameWithType: ImmutableList.CreateBuilder<T>()
  fullName: ImmutableList.CreateBuilder<T>()
- uid: System.Collections.Immutable.ImmutableList{T}
  parent: System.Collections.Immutable
  isExternal: false
  name: ImmutableList<T>
  nameWithType: ImmutableList<T>
  fullName: System.Collections.Immutable.ImmutableList<T>+Builder
  spec.csharp:
  - uid: System.Collections.Immutable.ImmutableList`1
    name: ImmutableList
    nameWithType: ImmutableList
    fullName: System.Collections.Immutable.ImmutableList
  - name: <
    nameWithType: <
    fullName: <
  - uid: T
    name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Collections.Immutable.ImmutableList.CreateRange``1(System.Collections.Generic.IEnumerable{``0})
  parent: System.Collections.Immutable.ImmutableList
  isExternal: false
  name: CreateRange<T>(IEnumerable<T>)
  nameWithType: ImmutableList.CreateRange<T>(IEnumerable<T>)
  fullName: ImmutableList.CreateRange<T>(IEnumerable<T>)
- uid: System.Collections.Generic.IEnumerable`1
  parent: System.Collections.Generic
  isExternal: false
  name: IEnumerable<T>
  nameWithType: IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
- uid: System.Collections.Immutable.ImmutableList.IndexOf``1(System.Collections.Immutable.IImmutableList{``0},``0,System.Int32)
  parent: System.Collections.Immutable.ImmutableList
  isExternal: false
  name: IndexOf<T>(IImmutableList<T>, T, Int32)
  nameWithType: ImmutableList.IndexOf<T>(IImmutableList<T>, T, Int32)
  fullName: ImmutableList.IndexOf<T>(IImmutableList<T>, T, Int32)
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Collections.Immutable.IImmutableList`1
  parent: System.Collections.Immutable
  isExternal: false
  name: IImmutableList<T>
  nameWithType: IImmutableList<T>
  fullName: System.Collections.Immutable.IImmutableList<T>
- uid: System.Collections.Immutable.ImmutableList.IndexOf``1(System.Collections.Immutable.IImmutableList{``0},``0,System.Int32,System.Int32)
  parent: System.Collections.Immutable.ImmutableList
  isExternal: false
  name: IndexOf<T>(IImmutableList<T>, T, Int32, Int32)
  nameWithType: ImmutableList.IndexOf<T>(IImmutableList<T>, T, Int32, Int32)
  fullName: ImmutableList.IndexOf<T>(IImmutableList<T>, T, Int32, Int32)
- uid: System.Collections.Immutable.ImmutableList.IndexOf``1(System.Collections.Immutable.IImmutableList{``0},``0)
  parent: System.Collections.Immutable.ImmutableList
  isExternal: false
  name: IndexOf<T>(IImmutableList<T>, T)
  nameWithType: ImmutableList.IndexOf<T>(IImmutableList<T>, T)
  fullName: ImmutableList.IndexOf<T>(IImmutableList<T>, T)
- uid: System.Collections.Immutable.ImmutableList.IndexOf``1(System.Collections.Immutable.IImmutableList{``0},``0,System.Collections.Generic.IEqualityComparer{``0})
  parent: System.Collections.Immutable.ImmutableList
  isExternal: false
  name: IndexOf<T>(IImmutableList<T>, T, IEqualityComparer<T>)
  nameWithType: ImmutableList.IndexOf<T>(IImmutableList<T>, T, IEqualityComparer<T>)
  fullName: ImmutableList.IndexOf<T>(IImmutableList<T>, T, IEqualityComparer<T>)
- uid: System.Collections.Generic.IEqualityComparer`1
  parent: System.Collections.Generic
  isExternal: false
  name: IEqualityComparer<T>
  nameWithType: IEqualityComparer<T>
  fullName: System.Collections.Generic.IEqualityComparer<T>
- uid: System.Collections.Immutable.ImmutableList.LastIndexOf``1(System.Collections.Immutable.IImmutableList{``0},``0)
  parent: System.Collections.Immutable.ImmutableList
  isExternal: false
  name: LastIndexOf<T>(IImmutableList<T>, T)
  nameWithType: ImmutableList.LastIndexOf<T>(IImmutableList<T>, T)
  fullName: ImmutableList.LastIndexOf<T>(IImmutableList<T>, T)
- uid: System.Collections.Immutable.ImmutableList.LastIndexOf``1(System.Collections.Immutable.IImmutableList{``0},``0,System.Collections.Generic.IEqualityComparer{``0})
  parent: System.Collections.Immutable.ImmutableList
  isExternal: false
  name: LastIndexOf<T>(IImmutableList<T>, T, IEqualityComparer<T>)
  nameWithType: ImmutableList.LastIndexOf<T>(IImmutableList<T>, T, IEqualityComparer<T>)
  fullName: ImmutableList.LastIndexOf<T>(IImmutableList<T>, T, IEqualityComparer<T>)
- uid: System.Collections.Immutable.ImmutableList.LastIndexOf``1(System.Collections.Immutable.IImmutableList{``0},``0,System.Int32)
  parent: System.Collections.Immutable.ImmutableList
  isExternal: false
  name: LastIndexOf<T>(IImmutableList<T>, T, Int32)
  nameWithType: ImmutableList.LastIndexOf<T>(IImmutableList<T>, T, Int32)
  fullName: ImmutableList.LastIndexOf<T>(IImmutableList<T>, T, Int32)
- uid: System.Collections.Immutable.ImmutableList.LastIndexOf``1(System.Collections.Immutable.IImmutableList{``0},``0,System.Int32,System.Int32)
  parent: System.Collections.Immutable.ImmutableList
  isExternal: false
  name: LastIndexOf<T>(IImmutableList<T>, T, Int32, Int32)
  nameWithType: ImmutableList.LastIndexOf<T>(IImmutableList<T>, T, Int32, Int32)
  fullName: ImmutableList.LastIndexOf<T>(IImmutableList<T>, T, Int32, Int32)
- uid: System.Collections.Immutable.ImmutableList.Remove``1(System.Collections.Immutable.IImmutableList{``0},``0)
  parent: System.Collections.Immutable.ImmutableList
  isExternal: false
  name: Remove<T>(IImmutableList<T>, T)
  nameWithType: ImmutableList.Remove<T>(IImmutableList<T>, T)
  fullName: ImmutableList.Remove<T>(IImmutableList<T>, T)
- uid: System.Collections.Immutable.ImmutableList.RemoveRange``1(System.Collections.Immutable.IImmutableList{``0},System.Collections.Generic.IEnumerable{``0})
  parent: System.Collections.Immutable.ImmutableList
  isExternal: false
  name: RemoveRange<T>(IImmutableList<T>, IEnumerable<T>)
  nameWithType: ImmutableList.RemoveRange<T>(IImmutableList<T>, IEnumerable<T>)
  fullName: ImmutableList.RemoveRange<T>(IImmutableList<T>, IEnumerable<T>)
- uid: System.Collections.Immutable.ImmutableList.Replace``1(System.Collections.Immutable.IImmutableList{``0},``0,``0)
  parent: System.Collections.Immutable.ImmutableList
  isExternal: false
  name: Replace<T>(IImmutableList<T>, T, T)
  nameWithType: ImmutableList.Replace<T>(IImmutableList<T>, T, T)
  fullName: ImmutableList.Replace<T>(IImmutableList<T>, T, T)
- uid: System.Collections.Immutable.ImmutableList.ToImmutableList``1(System.Collections.Generic.IEnumerable{``0})
  parent: System.Collections.Immutable.ImmutableList
  isExternal: false
  name: ToImmutableList<TSource>(IEnumerable<TSource>)
  nameWithType: ImmutableList.ToImmutableList<TSource>(IEnumerable<TSource>)
  fullName: ImmutableList.ToImmutableList<TSource>(IEnumerable<TSource>)
- uid: TSource
  name: TSource
  nameWithType: TSource
  fullName: TSource
- uid: System.Collections.Immutable.ImmutableList{TSource}
  parent: System.Collections.Immutable
  isExternal: false
  name: ImmutableList<TSource>
  nameWithType: ImmutableList<TSource>
  fullName: System.Collections.Immutable.ImmutableList<TSource>
  spec.csharp:
  - uid: System.Collections.Immutable.ImmutableList`1
    name: ImmutableList
    nameWithType: ImmutableList
    fullName: System.Collections.Immutable.ImmutableList
  - name: <
    nameWithType: <
    fullName: <
  - uid: TSource
    name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Collections.Generic.IEnumerable{TSource}
  parent: System.Collections.Generic
  isExternal: false
  name: IEnumerable<TSource>
  nameWithType: IEnumerable<TSource>
  fullName: System.Collections.Generic.IEnumerable<TSource>
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
  - name: <
    nameWithType: <
    fullName: <
  - uid: TSource
    name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Collections.Immutable.ImmutableList.Create``1*
  parent: System.Collections.Immutable.ImmutableList
  isExternal: false
  name: Create<T>
  nameWithType: ImmutableList.Create<T>
  fullName: ImmutableList.Create<T>
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Immutable/ImmutableList.xml
- uid: System.Collections.Immutable.ImmutableList.CreateBuilder``1*
  parent: System.Collections.Immutable.ImmutableList
  isExternal: false
  name: CreateBuilder<T>
  nameWithType: ImmutableList.CreateBuilder<T>
  fullName: ImmutableList.CreateBuilder<T>
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Immutable/ImmutableList.xml
- uid: System.Collections.Immutable.ImmutableList.CreateRange``1*
  parent: System.Collections.Immutable.ImmutableList
  isExternal: false
  name: CreateRange<T>
  nameWithType: ImmutableList.CreateRange<T>
  fullName: ImmutableList.CreateRange<T>
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Immutable/ImmutableList.xml
- uid: System.Collections.Immutable.ImmutableList.IndexOf``1*
  parent: System.Collections.Immutable.ImmutableList
  isExternal: false
  name: IndexOf<T>
  nameWithType: ImmutableList.IndexOf<T>
  fullName: ImmutableList.IndexOf<T>
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Immutable/ImmutableList.xml
- uid: System.Collections.Immutable.ImmutableList.LastIndexOf``1*
  parent: System.Collections.Immutable.ImmutableList
  isExternal: false
  name: LastIndexOf<T>
  nameWithType: ImmutableList.LastIndexOf<T>
  fullName: ImmutableList.LastIndexOf<T>
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Immutable/ImmutableList.xml
- uid: System.Collections.Immutable.ImmutableList.Remove``1*
  parent: System.Collections.Immutable.ImmutableList
  isExternal: false
  name: Remove<T>
  nameWithType: ImmutableList.Remove<T>
  fullName: ImmutableList.Remove<T>
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Immutable/ImmutableList.xml
- uid: System.Collections.Immutable.ImmutableList.RemoveRange``1*
  parent: System.Collections.Immutable.ImmutableList
  isExternal: false
  name: RemoveRange<T>
  nameWithType: ImmutableList.RemoveRange<T>
  fullName: ImmutableList.RemoveRange<T>
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Immutable/ImmutableList.xml
- uid: System.Collections.Immutable.ImmutableList.Replace``1*
  parent: System.Collections.Immutable.ImmutableList
  isExternal: false
  name: Replace<T>
  nameWithType: ImmutableList.Replace<T>
  fullName: ImmutableList.Replace<T>
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Immutable/ImmutableList.xml
- uid: System.Collections.Immutable.ImmutableList.ToImmutableList``1*
  parent: System.Collections.Immutable.ImmutableList
  isExternal: false
  name: ToImmutableList<TSource>
  nameWithType: ImmutableList.ToImmutableList<TSource>
  fullName: ImmutableList.ToImmutableList<TSource>
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Immutable/ImmutableList.xml
- uid: System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: false
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: Object.Equals(Object)
- uid: System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: false
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: Object.Equals(Object, Object)
- uid: System.Object.GetHashCode
  parent: System.Object
  isExternal: false
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: Object.GetHashCode()
- uid: System.Object.GetType
  parent: System.Object
  isExternal: false
  name: GetType()
  nameWithType: Object.GetType()
  fullName: Object.GetType()
- uid: System.Object.MemberwiseClone
  parent: System.Object
  isExternal: false
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: Object.MemberwiseClone()
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: false
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: Object.ReferenceEquals(Object, Object)
- uid: System.Object.ToString
  parent: System.Object
  isExternal: false
  name: ToString()
  nameWithType: Object.ToString()
  fullName: Object.ToString()

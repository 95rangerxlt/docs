### YamlMime:ManagedReference
items:
- uid: System.Buffers.ArrayPool`1
  commentId: T:System.Buffers.ArrayPool`1
  id: ArrayPool`1
  children:
  - System.Buffers.ArrayPool`1.#ctor
  - System.Buffers.ArrayPool`1.Create
  - System.Buffers.ArrayPool`1.Create(System.Int32,System.Int32)
  - System.Buffers.ArrayPool`1.Rent(System.Int32)
  - System.Buffers.ArrayPool`1.Return(`0[],System.Boolean)
  - System.Buffers.ArrayPool`1.Shared
  langs:
  - csharp
  name: ArrayPool<T>
  nameWithType: ArrayPool<T>
  fullName: System.Buffers.ArrayPool<T>
  type: Class
  assemblies:
  - System.Buffers
  namespace: System.Buffers
  summary: Provides a resource pool that enables reusing instances of type <xref href="T[]"></xref>.
  remarks: Using the <see cref="T:System.Buffers.ArrayPool{T}"/> class to rent and return buffers (using the <see cref="M:System.Buffers.ArrayPool`1.Rent(System.Int32)"/> and <see cref="M:System.Buffers.ArrayPool`1.Return(`0[],System.Boolean)"/> methods) can improve performance in situations where arrays are created and destroyed frequently, resulting in significant memory pressure on the garbage collector.
  syntax:
    content: public abstract class ArrayPool<T>
    typeParameters:
    - id: T
      description: The type of the objects that are in the resource pool.
  inheritance:
  - System.Object
  implements: []
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Buffers/ArrayPool`1.xml
- uid: System.Buffers.ArrayPool`1.#ctor
  commentId: M:System.Buffers.ArrayPool`1.#ctor
  id: '#ctor'
  parent: System.Buffers.ArrayPool`1
  langs:
  - csharp
  name: ArrayPool<T>()
  nameWithType: ArrayPool<T>.ArrayPool<T>()
  fullName: ArrayPool<T>.ArrayPool<T>()
  type: Constructor
  assemblies:
  - System.Buffers
  namespace: System.Buffers
  summary: Initializes a new instance of the <xref href="ArrayPool{T}"></xref> class.
  remarks: Note that this constructor is protected; it can only be called by classes derived from the <see cref="ArrayPool{T}"/> class.
  syntax:
    content: protected ArrayPool ();
    parameters: []
  overload: System.Buffers.ArrayPool`1.#ctor*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Buffers/ArrayPool`1.xml
- uid: System.Buffers.ArrayPool`1.Create
  commentId: M:System.Buffers.ArrayPool`1.Create
  id: Create
  parent: System.Buffers.ArrayPool`1
  langs:
  - csharp
  name: Create()
  nameWithType: ArrayPool<T>.Create()
  fullName: ArrayPool<T>.Create()
  type: Method
  assemblies:
  - System.Buffers
  namespace: System.Buffers
  summary: Creates a new instance of the <xref href="ArrayPool{T}"></xref> class.
  syntax:
    content: public static System.Buffers.ArrayPool<T> Create ();
    parameters: []
    return:
      type: System.Buffers.ArrayPool`1
      description: A new instance of the <xref href="ArrayPool{T}"></xref> class.
  overload: System.Buffers.ArrayPool`1.Create*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Buffers/ArrayPool`1.xml
- uid: System.Buffers.ArrayPool`1.Create(System.Int32,System.Int32)
  commentId: M:System.Buffers.ArrayPool`1.Create(System.Int32,System.Int32)
  id: Create(System.Int32,System.Int32)
  parent: System.Buffers.ArrayPool`1
  langs:
  - csharp
  name: Create(Int32, Int32)
  nameWithType: ArrayPool<T>.Create(Int32, Int32)
  fullName: ArrayPool<T>.Create(Int32, Int32)
  type: Method
  assemblies:
  - System.Buffers
  namespace: System.Buffers
  summary: Creates a new instance of the <xref href="ArrayPool{T}"></xref> class using the specifed configuration.
  remarks: The instance of the <see cref="ArrayPool{T}"/> class created by this method will group arrays into buckets, with no more than <paramref name="maxArraysPerBucket"/> in each bucket, and with those arrays not exceeding <paramref name="maxArrayLength"/> in length.
  syntax:
    content: public static System.Buffers.ArrayPool<T> Create (int maxArrayLength, int maxArraysPerBucket);
    parameters:
    - id: maxArrayLength
      type: System.Int32
      description: The maximum length of an array instance that may be stored in the pool.
    - id: maxArraysPerBucket
      type: System.Int32
      description: The maximum number of array instances that may be stored in each bucket in the pool. The pool groups arrays of similar lengths into buckets for faster access.
    return:
      type: System.Buffers.ArrayPool`1
      description: A new instance of the <xref href="ArrayPool{T}"></xref> class with the specified configuration.
  overload: System.Buffers.ArrayPool`1.Create*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Buffers/ArrayPool`1.xml
- uid: System.Buffers.ArrayPool`1.Rent(System.Int32)
  commentId: M:System.Buffers.ArrayPool`1.Rent(System.Int32)
  id: Rent(System.Int32)
  parent: System.Buffers.ArrayPool`1
  langs:
  - csharp
  name: Rent(Int32)
  nameWithType: ArrayPool<T>.Rent(Int32)
  fullName: ArrayPool<T>.Rent(Int32)
  type: Method
  assemblies:
  - System.Buffers
  namespace: System.Buffers
  summary: Retrieves a buffer that is at least the requested length.
  remarks: This buffer is loaned to the caller and should be returned to the same pool using the <see cref="Return"/> method, so that it can be reused in subsequent calls to the <see cref="Rent"/> method. Failure to return a rented buffer is not a fatal error. However, it may lead to decreased application performance, as the pool may need to create a new buffer to replace the lost one.
  syntax:
    content: public abstract T[] Rent (int minimumLength);
    parameters:
    - id: minimumLength
      type: System.Int32
      description: The minimum length of the array.
    return:
      type: T[]
      description: An array of type <xref href="T[]"></xref> that is at least <code>minimumLength</code> in length.
  overload: System.Buffers.ArrayPool`1.Rent*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Buffers/ArrayPool`1.xml
- uid: System.Buffers.ArrayPool`1.Return(`0[],System.Boolean)
  commentId: M:System.Buffers.ArrayPool`1.Return(`0[],System.Boolean)
  id: Return(`0[],System.Boolean)
  parent: System.Buffers.ArrayPool`1
  langs:
  - csharp
  name: Return(T[], Boolean)
  nameWithType: ArrayPool<T>.Return(T[], Boolean)
  fullName: ArrayPool<T>.Return(T[], Boolean)
  type: Method
  assemblies:
  - System.Buffers
  namespace: System.Buffers
  summary: Returns an array to the pool that was previously obtained using the <xref href="Rent"></xref> method on the same <xref href="ArrayPool{T}"></xref> instance.
  remarks: Once a buffer has been returned to the pool, the caller gives up all ownership of the buffer and must not use it. The reference returned from a given call to the <see cref="Rent"/> method must only be returned using the <see cref="Return"/> method once. The default <see cref="ArrayPool{T}"/> may hold onto the returned buffer in order to rent it again, or it may release the returned buffer if it's determined that the pool already has enough buffers stored.
  syntax:
    content: public abstract void Return (T[] array, bool clearArray = false);
    parameters:
    - id: array
      type: T[]
      description: A buffer to return to the pool that was previously obtained using the <xref href="Rent"></xref> method.
    - id: clearArray
      type: System.Boolean
      description: Indicates whether the contents of the buffer should be cleared before reuse. If <code>bufferLength</code> is set to `true`, and if the pool will store the buffer to enable subsequent reuse, the <xref href="Return"></xref> method will clear the <code>array</code> of its contents so that a subsequent caller using the <xref href="Rent"></xref> method will not see the content of the previous caller. If <code>bufferLength</code> is set to `false` or if the pool will release the buffer, the array's contents are left unchanged.
  overload: System.Buffers.ArrayPool`1.Return*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Buffers/ArrayPool`1.xml
- uid: System.Buffers.ArrayPool`1.Shared
  commentId: P:System.Buffers.ArrayPool`1.Shared
  id: Shared
  parent: System.Buffers.ArrayPool`1
  langs:
  - csharp
  name: Shared
  nameWithType: ArrayPool<T>.Shared
  fullName: ArrayPool<T>.Shared
  type: Property
  assemblies:
  - System.Buffers
  namespace: System.Buffers
  summary: Gets a shared <xref href="ArrayPool{T}"></xref> instance.
  remarks: The shared pool provides a default implementation of the <see cref="ArrayPool{T}"/> class that's intended for general applicability. A shared class maintains arrays of multiple sizes, and may hand back a larger array than was actually requested, but it will never hand back a smaller array than was requested. Renting a buffer from a shared class using the <see cref="Rent"/> method will result in an existing buffer being taken from the pool if an appropriate buffer is available or in a new buffer being allocated if one is not available.
  syntax:
    content: public static System.Buffers.ArrayPool<T> Shared { get; }
    return:
      type: System.Buffers.ArrayPool`1
      description: A shared <xref href="ArrayPool{T}"></xref> instance.
  overload: System.Buffers.ArrayPool`1.Shared*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Buffers/ArrayPool`1.xml
references:
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Buffers.ArrayPool`1.#ctor
  parent: System.Buffers.ArrayPool`1
  isExternal: false
  name: ArrayPool<T>()
  nameWithType: ArrayPool<T>.ArrayPool<T>()
  fullName: ArrayPool<T>.ArrayPool<T>()
- uid: System.Buffers.ArrayPool`1.Create
  parent: System.Buffers.ArrayPool`1
  isExternal: false
  name: Create()
  nameWithType: ArrayPool<T>.Create()
  fullName: ArrayPool<T>.Create()
- uid: System.Buffers.ArrayPool`1
  parent: System.Buffers
  isExternal: false
  name: ArrayPool<T>
  nameWithType: ArrayPool<T>
  fullName: System.Buffers.ArrayPool<T>
- uid: System.Buffers.ArrayPool`1.Create(System.Int32,System.Int32)
  parent: System.Buffers.ArrayPool`1
  isExternal: false
  name: Create(Int32, Int32)
  nameWithType: ArrayPool<T>.Create(Int32, Int32)
  fullName: ArrayPool<T>.Create(Int32, Int32)
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Buffers.ArrayPool`1.Rent(System.Int32)
  parent: System.Buffers.ArrayPool`1
  isExternal: false
  name: Rent(Int32)
  nameWithType: ArrayPool<T>.Rent(Int32)
  fullName: ArrayPool<T>.Rent(Int32)
- uid: T
  name: T
  nameWithType: T
  fullName: T
- uid: T[]
  isExternal: true
  name: T[]
  nameWithType: T[]
  fullName: T[]
  spec.csharp:
  - uid: T
    name: T
    nameWithType: T
    fullName: T
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Buffers.ArrayPool`1.Return(`0[],System.Boolean)
  parent: System.Buffers.ArrayPool`1
  isExternal: false
  name: Return(T[], Boolean)
  nameWithType: ArrayPool<T>.Return(T[], Boolean)
  fullName: ArrayPool<T>.Return(T[], Boolean)
- uid: System.Boolean
  parent: System
  isExternal: false
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Buffers.ArrayPool`1.Shared
  parent: System.Buffers.ArrayPool`1
  isExternal: false
  name: Shared
  nameWithType: ArrayPool<T>.Shared
  fullName: ArrayPool<T>.Shared
- uid: System.Buffers.ArrayPool`1.#ctor*
  parent: System.Buffers.ArrayPool`1
  isExternal: false
  name: ArrayPool<T>
  nameWithType: ArrayPool<T>.ArrayPool<T>
  fullName: ArrayPool<T>.ArrayPool<T>
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Buffers/ArrayPool`1.xml
- uid: System.Buffers.ArrayPool`1.Create*
  parent: System.Buffers.ArrayPool`1
  isExternal: false
  name: Create
  nameWithType: ArrayPool<T>.Create
  fullName: ArrayPool<T>.Create
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Buffers/ArrayPool`1.xml
- uid: System.Buffers.ArrayPool`1.Rent*
  parent: System.Buffers.ArrayPool`1
  isExternal: false
  name: Rent
  nameWithType: ArrayPool<T>.Rent
  fullName: ArrayPool<T>.Rent
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Buffers/ArrayPool`1.xml
- uid: System.Buffers.ArrayPool`1.Return*
  parent: System.Buffers.ArrayPool`1
  isExternal: false
  name: Return
  nameWithType: ArrayPool<T>.Return
  fullName: ArrayPool<T>.Return
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Buffers/ArrayPool`1.xml
- uid: System.Buffers.ArrayPool`1.Shared*
  parent: System.Buffers.ArrayPool`1
  isExternal: false
  name: Shared
  nameWithType: ArrayPool<T>.Shared
  fullName: ArrayPool<T>.Shared
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Buffers/ArrayPool`1.xml
- uid: System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: false
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: Object.Equals(Object)
- uid: System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: false
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: Object.Equals(Object, Object)
- uid: System.Object.GetHashCode
  parent: System.Object
  isExternal: false
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: Object.GetHashCode()
- uid: System.Object.GetType
  parent: System.Object
  isExternal: false
  name: GetType()
  nameWithType: Object.GetType()
  fullName: Object.GetType()
- uid: System.Object.MemberwiseClone
  parent: System.Object
  isExternal: false
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: Object.MemberwiseClone()
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: false
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: Object.ReferenceEquals(Object, Object)
- uid: System.Object.ToString
  parent: System.Object
  isExternal: false
  name: ToString()
  nameWithType: Object.ToString()
  fullName: Object.ToString()

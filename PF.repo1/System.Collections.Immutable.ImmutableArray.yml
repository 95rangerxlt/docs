### YamlMime:ManagedReference
items:
- uid: System.Collections.Immutable.ImmutableArray
  commentId: T:System.Collections.Immutable.ImmutableArray
  id: ImmutableArray
  children:
  - System.Collections.Immutable.ImmutableArray.BinarySearch``1(System.Collections.Immutable.ImmutableArray{``0},``0)
  - System.Collections.Immutable.ImmutableArray.BinarySearch``1(System.Collections.Immutable.ImmutableArray{``0},``0,System.Collections.Generic.IComparer{``0})
  - System.Collections.Immutable.ImmutableArray.BinarySearch``1(System.Collections.Immutable.ImmutableArray{``0},System.Int32,System.Int32,``0)
  - System.Collections.Immutable.ImmutableArray.BinarySearch``1(System.Collections.Immutable.ImmutableArray{``0},System.Int32,System.Int32,``0,System.Collections.Generic.IComparer{``0})
  - System.Collections.Immutable.ImmutableArray.Create``1(``0,``0,``0,``0)
  - System.Collections.Immutable.ImmutableArray.Create``1(``0[],System.Int32,System.Int32)
  - System.Collections.Immutable.ImmutableArray.Create``1(System.Collections.Immutable.ImmutableArray{``0},System.Int32,System.Int32)
  - System.Collections.Immutable.ImmutableArray.Create``1(``0,``0,``0)
  - System.Collections.Immutable.ImmutableArray.Create``1(``0[])
  - System.Collections.Immutable.ImmutableArray.Create``1(``0)
  - System.Collections.Immutable.ImmutableArray.Create``1
  - System.Collections.Immutable.ImmutableArray.Create``1(``0,``0)
  - System.Collections.Immutable.ImmutableArray.CreateBuilder``1
  - System.Collections.Immutable.ImmutableArray.CreateBuilder``1(System.Int32)
  - System.Collections.Immutable.ImmutableArray.CreateRange``1(System.Collections.Generic.IEnumerable{``0})
  - System.Collections.Immutable.ImmutableArray.CreateRange``3(System.Collections.Immutable.ImmutableArray{``0},System.Int32,System.Int32,System.Func{``0,``1,``2},``1)
  - System.Collections.Immutable.ImmutableArray.CreateRange``3(System.Collections.Immutable.ImmutableArray{``0},System.Func{``0,``1,``2},``1)
  - System.Collections.Immutable.ImmutableArray.CreateRange``2(System.Collections.Immutable.ImmutableArray{``0},System.Func{``0,``1})
  - System.Collections.Immutable.ImmutableArray.CreateRange``2(System.Collections.Immutable.ImmutableArray{``0},System.Int32,System.Int32,System.Func{``0,``1})
  - System.Collections.Immutable.ImmutableArray.ToImmutableArray``1(System.Collections.Generic.IEnumerable{``0})
  langs:
  - csharp
  name: ImmutableArray
  nameWithType: ImmutableArray
  fullName: System.Collections.Immutable.ImmutableArray
  type: Class
  assemblies:
  - System.Collections.Immutable
  namespace: System.Collections.Immutable
  summary: "Provides methods for creating an array that is immutable; meaning it cannot be changed once it is created.  \n  \n [!INCLUDE[immutable_nuget_short](~/includes/immutable-nuget-short-md.md)]"
  syntax:
    content: public static class ImmutableArray
  inheritance:
  - System.Object
  implements: []
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Immutable/ImmutableArray.xml
  author: mairaw
  ms.author: mairaw
  manager: wpickett
- uid: System.Collections.Immutable.ImmutableArray.BinarySearch``1(System.Collections.Immutable.ImmutableArray{``0},``0)
  commentId: M:System.Collections.Immutable.ImmutableArray.BinarySearch``1(System.Collections.Immutable.ImmutableArray{``0},``0)
  id: BinarySearch``1(System.Collections.Immutable.ImmutableArray{``0},``0)
  parent: System.Collections.Immutable.ImmutableArray
  langs:
  - csharp
  name: BinarySearch<T>(ImmutableArray<T>, T)
  nameWithType: ImmutableArray.BinarySearch<T>(ImmutableArray<T>, T)
  fullName: ImmutableArray.BinarySearch<T>(ImmutableArray<T>, T)
  type: Method
  assemblies:
  - System.Collections.Immutable
  namespace: System.Collections.Immutable
  summary: Searches the sorted immutable array for a specified element using the default comparer and returns the zero-based index of the element, if it’s found.
  syntax:
    content: public static int BinarySearch<T> (this System.Collections.Immutable.ImmutableArray<T> array, T value);
    parameters:
    - id: array
      type: System.Collections.Immutable.ImmutableArray`1
      description: The sorted array to search.
    - id: value
      type: T
      description: The object to search for.
    typeParameters:
    - id: T
      description: The type of element stored in the array.
    return:
      type: System.Int32
      description: The zero-based index of the item in the array, if item is found; otherwise, a negative number that is the bitwise complement of the index of the next element that is larger than <code>value</code> or, if there is no larger element, the bitwise complement of <xref href="System.Collections.Generic.ICollection`1.Count"></xref>.
  overload: System.Collections.Immutable.ImmutableArray.BinarySearch``1*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: <code>value</code> does not implement <xref href="System.IComparable"></xref> or the search encounters an element that does not implement <xref href="System.IComparable"></xref>.
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Immutable/ImmutableArray.xml
  author: mairaw
  ms.author: mairaw
  manager: wpickett
- uid: System.Collections.Immutable.ImmutableArray.BinarySearch``1(System.Collections.Immutable.ImmutableArray{``0},``0,System.Collections.Generic.IComparer{``0})
  commentId: M:System.Collections.Immutable.ImmutableArray.BinarySearch``1(System.Collections.Immutable.ImmutableArray{``0},``0,System.Collections.Generic.IComparer{``0})
  id: BinarySearch``1(System.Collections.Immutable.ImmutableArray{``0},``0,System.Collections.Generic.IComparer{``0})
  parent: System.Collections.Immutable.ImmutableArray
  langs:
  - csharp
  name: BinarySearch<T>(ImmutableArray<T>, T, IComparer<T>)
  nameWithType: ImmutableArray.BinarySearch<T>(ImmutableArray<T>, T, IComparer<T>)
  fullName: ImmutableArray.BinarySearch<T>(ImmutableArray<T>, T, IComparer<T>)
  type: Method
  assemblies:
  - System.Collections.Immutable
  namespace: System.Collections.Immutable
  summary: Searches a sorted immutable array for a specified element and returns the zero-based index of the element, if it’s found.
  syntax:
    content: public static int BinarySearch<T> (this System.Collections.Immutable.ImmutableArray<T> array, T value, System.Collections.Generic.IComparer<T> comparer);
    parameters:
    - id: array
      type: System.Collections.Immutable.ImmutableArray`1
      description: The sorted array to search.
    - id: value
      type: T
      description: The object to search for.
    - id: comparer
      type: System.Collections.Generic.IComparer`1
      description: The comparer implementation to use when comparing elements, or null to use the default comparer.
    typeParameters:
    - id: T
      description: The type of element stored in the array.
    return:
      type: System.Int32
      description: The zero-based index of the item in the array, if item is found; otherwise, a negative number that is the bitwise complement of the index of the next element that is larger than <code>value</code> or, if there is no larger element, the bitwise complement of <xref href="System.Collections.Generic.ICollection`1.Count"></xref>.
  overload: System.Collections.Immutable.ImmutableArray.BinarySearch``1*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: <code>comparer</code> is null and <code>value</code> does not implement <xref href="System.IComparable"></xref> or the search encounters an element that does not implement <xref href="System.IComparable"></xref>.
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Immutable/ImmutableArray.xml
  author: mairaw
  ms.author: mairaw
  manager: wpickett
- uid: System.Collections.Immutable.ImmutableArray.BinarySearch``1(System.Collections.Immutable.ImmutableArray{``0},System.Int32,System.Int32,``0)
  commentId: M:System.Collections.Immutable.ImmutableArray.BinarySearch``1(System.Collections.Immutable.ImmutableArray{``0},System.Int32,System.Int32,``0)
  id: BinarySearch``1(System.Collections.Immutable.ImmutableArray{``0},System.Int32,System.Int32,``0)
  parent: System.Collections.Immutable.ImmutableArray
  langs:
  - csharp
  name: BinarySearch<T>(ImmutableArray<T>, Int32, Int32, T)
  nameWithType: ImmutableArray.BinarySearch<T>(ImmutableArray<T>, Int32, Int32, T)
  fullName: ImmutableArray.BinarySearch<T>(ImmutableArray<T>, Int32, Int32, T)
  type: Method
  assemblies:
  - System.Collections.Immutable
  namespace: System.Collections.Immutable
  summary: Searches a sorted immutable array for a specified element and returns the zero-based index of the element, if it’s found.
  syntax:
    content: public static int BinarySearch<T> (this System.Collections.Immutable.ImmutableArray<T> array, int index, int length, T value);
    parameters:
    - id: array
      type: System.Collections.Immutable.ImmutableArray`1
      description: The sorted array to search.
    - id: index
      type: System.Int32
      description: The starting index of the range to search.
    - id: length
      type: System.Int32
      description: The length of the range to search.
    - id: value
      type: T
      description: The object to search for.
    typeParameters:
    - id: T
      description: The type of element stored in the array.
    return:
      type: System.Int32
      description: The zero-based index of the item in the array, if item is found; otherwise, a negative number that is the bitwise complement of the index of the next element that is larger than <code>value</code> or, if there is no larger element, the bitwise complement of <xref href="System.Collections.Generic.ICollection`1.Count"></xref>.
  overload: System.Collections.Immutable.ImmutableArray.BinarySearch``1*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: <code>value</code> does not implement <xref href="System.IComparable"></xref> or the search encounters an element that does not implement <xref href="System.IComparable"></xref>.
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Immutable/ImmutableArray.xml
  author: mairaw
  ms.author: mairaw
  manager: wpickett
- uid: System.Collections.Immutable.ImmutableArray.BinarySearch``1(System.Collections.Immutable.ImmutableArray{``0},System.Int32,System.Int32,``0,System.Collections.Generic.IComparer{``0})
  commentId: M:System.Collections.Immutable.ImmutableArray.BinarySearch``1(System.Collections.Immutable.ImmutableArray{``0},System.Int32,System.Int32,``0,System.Collections.Generic.IComparer{``0})
  id: BinarySearch``1(System.Collections.Immutable.ImmutableArray{``0},System.Int32,System.Int32,``0,System.Collections.Generic.IComparer{``0})
  parent: System.Collections.Immutable.ImmutableArray
  langs:
  - csharp
  name: BinarySearch<T>(ImmutableArray<T>, Int32, Int32, T, IComparer<T>)
  nameWithType: ImmutableArray.BinarySearch<T>(ImmutableArray<T>, Int32, Int32, T, IComparer<T>)
  fullName: ImmutableArray.BinarySearch<T>(ImmutableArray<T>, Int32, Int32, T, IComparer<T>)
  type: Method
  assemblies:
  - System.Collections.Immutable
  namespace: System.Collections.Immutable
  summary: Searches a sorted immutable array for a specified element and returns the zero-based index of the element.
  syntax:
    content: public static int BinarySearch<T> (this System.Collections.Immutable.ImmutableArray<T> array, int index, int length, T value, System.Collections.Generic.IComparer<T> comparer);
    parameters:
    - id: array
      type: System.Collections.Immutable.ImmutableArray`1
      description: The sorted array to search.
    - id: index
      type: System.Int32
      description: The starting index of the range to search.
    - id: length
      type: System.Int32
      description: The length of the range to search.
    - id: value
      type: T
      description: The object to search for.
    - id: comparer
      type: System.Collections.Generic.IComparer`1
      description: The comparer to use when comparing elements for equality or `null` to use the default comparer.
    typeParameters:
    - id: T
      description: The type of element stored in the array.
    return:
      type: System.Int32
      description: The zero-based index of the item in the array, if item is found; otherwise, a negative number that is the bitwise complement of the index of the next element that is larger than <code>value</code> or, if there is no larger element, the bitwise complement of <xref href="System.Collections.Generic.ICollection`1.Count"></xref>.
  overload: System.Collections.Immutable.ImmutableArray.BinarySearch``1*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: <code>comparer</code> is null and <code>value</code> does not implement <xref href="System.IComparable"></xref> or the search encounters an element that does not implement <xref href="System.IComparable"></xref>.
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Immutable/ImmutableArray.xml
  author: mairaw
  ms.author: mairaw
  manager: wpickett
- uid: System.Collections.Immutable.ImmutableArray.Create``1(``0,``0,``0,``0)
  commentId: M:System.Collections.Immutable.ImmutableArray.Create``1(``0,``0,``0,``0)
  id: Create``1(``0,``0,``0,``0)
  parent: System.Collections.Immutable.ImmutableArray
  langs:
  - csharp
  name: Create<T>(T, T, T, T)
  nameWithType: ImmutableArray.Create<T>(T, T, T, T)
  fullName: ImmutableArray.Create<T>(T, T, T, T)
  type: Method
  assemblies:
  - System.Collections.Immutable
  namespace: System.Collections.Immutable
  summary: Creates an immutable array that contains the specified objects.
  syntax:
    content: public static System.Collections.Immutable.ImmutableArray<T> Create<T> (T item1, T item2, T item3, T item4);
    parameters:
    - id: item1
      type: T
      description: The first object to store in the array.
    - id: item2
      type: T
      description: The second object to store in the array.
    - id: item3
      type: T
      description: The third object to store in the array.
    - id: item4
      type: T
      description: The fourth object to store in the array.
    typeParameters:
    - id: T
      description: The type of elements stored in the array.
    return:
      type: System.Collections.Immutable.ImmutableArray`1
      description: An immutable array that contains the specified objects.
  overload: System.Collections.Immutable.ImmutableArray.Create``1*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Immutable/ImmutableArray.xml
  author: mairaw
  ms.author: mairaw
  manager: wpickett
- uid: System.Collections.Immutable.ImmutableArray.Create``1(``0[],System.Int32,System.Int32)
  commentId: M:System.Collections.Immutable.ImmutableArray.Create``1(``0[],System.Int32,System.Int32)
  id: Create``1(``0[],System.Int32,System.Int32)
  parent: System.Collections.Immutable.ImmutableArray
  langs:
  - csharp
  name: Create<T>(T[], Int32, Int32)
  nameWithType: ImmutableArray.Create<T>(T[], Int32, Int32)
  fullName: ImmutableArray.Create<T>(T[], Int32, Int32)
  type: Method
  assemblies:
  - System.Collections.Immutable
  namespace: System.Collections.Immutable
  summary: Creates an immutable array with specified objects from another array.
  syntax:
    content: public static System.Collections.Immutable.ImmutableArray<T> Create<T> (T[] items, int start, int length);
    parameters:
    - id: items
      type: T[]
      description: The source array of objects.
    - id: start
      type: System.Int32
      description: The index of the first element to copy from <code>items</code>.
    - id: length
      type: System.Int32
      description: The number of elements from <code>items</code> to include in this immutable array.
    typeParameters:
    - id: T
      description: The type of elements stored in the array.
    return:
      type: System.Collections.Immutable.ImmutableArray`1
      description: An immutable array that contains the specified objects from the source array.
  overload: System.Collections.Immutable.ImmutableArray.Create``1*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Immutable/ImmutableArray.xml
  author: mairaw
  ms.author: mairaw
  manager: wpickett
- uid: System.Collections.Immutable.ImmutableArray.Create``1(System.Collections.Immutable.ImmutableArray{``0},System.Int32,System.Int32)
  commentId: M:System.Collections.Immutable.ImmutableArray.Create``1(System.Collections.Immutable.ImmutableArray{``0},System.Int32,System.Int32)
  id: Create``1(System.Collections.Immutable.ImmutableArray{``0},System.Int32,System.Int32)
  parent: System.Collections.Immutable.ImmutableArray
  langs:
  - csharp
  name: Create<T>(ImmutableArray<T>, Int32, Int32)
  nameWithType: ImmutableArray.Create<T>(ImmutableArray<T>, Int32, Int32)
  fullName: ImmutableArray.Create<T>(ImmutableArray<T>, Int32, Int32)
  type: Method
  assemblies:
  - System.Collections.Immutable
  namespace: System.Collections.Immutable
  summary: Creates an immutable array with the specified objects from another immutable array.
  syntax:
    content: public static System.Collections.Immutable.ImmutableArray<T> Create<T> (System.Collections.Immutable.ImmutableArray<T> items, int start, int length);
    parameters:
    - id: items
      type: System.Collections.Immutable.ImmutableArray`1
      description: The source array of objects.
    - id: start
      type: System.Int32
      description: The index of the first element to copy from <code>items</code>.
    - id: length
      type: System.Int32
      description: The number of elements from <code>items</code> to include in this immutable array.
    typeParameters:
    - id: T
      description: The type of elements stored in the array.
    return:
      type: System.Collections.Immutable.ImmutableArray`1
      description: An immutable array that contains the specified objects from the source array.
  overload: System.Collections.Immutable.ImmutableArray.Create``1*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Immutable/ImmutableArray.xml
  author: mairaw
  ms.author: mairaw
  manager: wpickett
- uid: System.Collections.Immutable.ImmutableArray.Create``1(``0,``0,``0)
  commentId: M:System.Collections.Immutable.ImmutableArray.Create``1(``0,``0,``0)
  id: Create``1(``0,``0,``0)
  parent: System.Collections.Immutable.ImmutableArray
  langs:
  - csharp
  name: Create<T>(T, T, T)
  nameWithType: ImmutableArray.Create<T>(T, T, T)
  fullName: ImmutableArray.Create<T>(T, T, T)
  type: Method
  assemblies:
  - System.Collections.Immutable
  namespace: System.Collections.Immutable
  summary: Creates an immutable array that contains the specified objects.
  syntax:
    content: public static System.Collections.Immutable.ImmutableArray<T> Create<T> (T item1, T item2, T item3);
    parameters:
    - id: item1
      type: T
      description: The first object to store in the array.
    - id: item2
      type: T
      description: The second object to store in the array.
    - id: item3
      type: T
      description: The third object to store in the array.
    typeParameters:
    - id: T
      description: The type of elements stored in the array.
    return:
      type: System.Collections.Immutable.ImmutableArray`1
      description: An immutable array that contains the specified objects.
  overload: System.Collections.Immutable.ImmutableArray.Create``1*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Immutable/ImmutableArray.xml
  author: mairaw
  ms.author: mairaw
  manager: wpickett
- uid: System.Collections.Immutable.ImmutableArray.Create``1(``0[])
  commentId: M:System.Collections.Immutable.ImmutableArray.Create``1(``0[])
  id: Create``1(``0[])
  parent: System.Collections.Immutable.ImmutableArray
  langs:
  - csharp
  name: Create<T>(T[])
  nameWithType: ImmutableArray.Create<T>(T[])
  fullName: ImmutableArray.Create<T>(T[])
  type: Method
  assemblies:
  - System.Collections.Immutable
  namespace: System.Collections.Immutable
  summary: Creates an immutable array from the specified array of objects.
  syntax:
    content: public static System.Collections.Immutable.ImmutableArray<T> Create<T> (T[] items);
    parameters:
    - id: items
      type: T[]
      description: The array of objects to populate the array with.
    typeParameters:
    - id: T
      description: The type of elements stored in the array.
    return:
      type: System.Collections.Immutable.ImmutableArray`1
      description: An immutable array that contains the array of items.
  overload: System.Collections.Immutable.ImmutableArray.Create``1*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Immutable/ImmutableArray.xml
  author: mairaw
  ms.author: mairaw
  manager: wpickett
- uid: System.Collections.Immutable.ImmutableArray.Create``1(``0)
  commentId: M:System.Collections.Immutable.ImmutableArray.Create``1(``0)
  id: Create``1(``0)
  parent: System.Collections.Immutable.ImmutableArray
  langs:
  - csharp
  name: Create<T>(T)
  nameWithType: ImmutableArray.Create<T>(T)
  fullName: ImmutableArray.Create<T>(T)
  type: Method
  assemblies:
  - System.Collections.Immutable
  namespace: System.Collections.Immutable
  summary: Creates an immutable array that contains the specified object.
  syntax:
    content: public static System.Collections.Immutable.ImmutableArray<T> Create<T> (T item);
    parameters:
    - id: item
      type: T
      description: The object to store in the array.
    typeParameters:
    - id: T
      description: The type of elements stored in the array.
    return:
      type: System.Collections.Immutable.ImmutableArray`1
      description: Returns an immutable array that contains the specified object.
  overload: System.Collections.Immutable.ImmutableArray.Create``1*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Immutable/ImmutableArray.xml
  author: mairaw
  ms.author: mairaw
  manager: wpickett
- uid: System.Collections.Immutable.ImmutableArray.Create``1
  commentId: M:System.Collections.Immutable.ImmutableArray.Create``1
  id: Create``1
  parent: System.Collections.Immutable.ImmutableArray
  langs:
  - csharp
  name: Create<T>()
  nameWithType: ImmutableArray.Create<T>()
  fullName: ImmutableArray.Create<T>()
  type: Method
  assemblies:
  - System.Collections.Immutable
  namespace: System.Collections.Immutable
  summary: Creates an empty immutable array.
  syntax:
    content: public static System.Collections.Immutable.ImmutableArray<T> Create<T> ();
    parameters: []
    typeParameters:
    - id: T
      description: The type of elements stored in the array.
    return:
      type: System.Collections.Immutable.ImmutableArray`1
      description: An empty immutable array.
  overload: System.Collections.Immutable.ImmutableArray.Create``1*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Immutable/ImmutableArray.xml
  author: mairaw
  ms.author: mairaw
  manager: wpickett
- uid: System.Collections.Immutable.ImmutableArray.Create``1(``0,``0)
  commentId: M:System.Collections.Immutable.ImmutableArray.Create``1(``0,``0)
  id: Create``1(``0,``0)
  parent: System.Collections.Immutable.ImmutableArray
  langs:
  - csharp
  name: Create<T>(T, T)
  nameWithType: ImmutableArray.Create<T>(T, T)
  fullName: ImmutableArray.Create<T>(T, T)
  type: Method
  assemblies:
  - System.Collections.Immutable
  namespace: System.Collections.Immutable
  summary: Creates an immutable array that contains the specified objects.
  syntax:
    content: public static System.Collections.Immutable.ImmutableArray<T> Create<T> (T item1, T item2);
    parameters:
    - id: item1
      type: T
      description: The first object to store in the array.
    - id: item2
      type: T
      description: The second object to store in the array.
    typeParameters:
    - id: T
      description: The type of elements stored in the array.
    return:
      type: System.Collections.Immutable.ImmutableArray`1
      description: Returns an immutable array that contains the specified objects.
  overload: System.Collections.Immutable.ImmutableArray.Create``1*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Immutable/ImmutableArray.xml
  author: mairaw
  ms.author: mairaw
  manager: wpickett
- uid: System.Collections.Immutable.ImmutableArray.CreateBuilder``1
  commentId: M:System.Collections.Immutable.ImmutableArray.CreateBuilder``1
  id: CreateBuilder``1
  parent: System.Collections.Immutable.ImmutableArray
  langs:
  - csharp
  name: CreateBuilder<T>()
  nameWithType: ImmutableArray.CreateBuilder<T>()
  fullName: ImmutableArray.CreateBuilder<T>()
  type: Method
  assemblies:
  - System.Collections.Immutable
  namespace: System.Collections.Immutable
  summary: Creates a mutable array that can be converted to an <xref href="System.Collections.Immutable.ImmutableArray"></xref> without allocating new memory.
  syntax:
    content: public static System.Collections.Immutable.ImmutableArray<T>.Builder CreateBuilder<T> ();
    parameters: []
    typeParameters:
    - id: T
      description: The type of elements stored in the builder.
    return:
      type: System.Collections.Immutable.ImmutableArray{T}
      description: A mutable array of the specified type that can be efficiently converted to an immutable array.
  overload: System.Collections.Immutable.ImmutableArray.CreateBuilder``1*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Immutable/ImmutableArray.xml
  author: mairaw
  ms.author: mairaw
  manager: wpickett
- uid: System.Collections.Immutable.ImmutableArray.CreateBuilder``1(System.Int32)
  commentId: M:System.Collections.Immutable.ImmutableArray.CreateBuilder``1(System.Int32)
  id: CreateBuilder``1(System.Int32)
  parent: System.Collections.Immutable.ImmutableArray
  langs:
  - csharp
  name: CreateBuilder<T>(Int32)
  nameWithType: ImmutableArray.CreateBuilder<T>(Int32)
  fullName: ImmutableArray.CreateBuilder<T>(Int32)
  type: Method
  assemblies:
  - System.Collections.Immutable
  namespace: System.Collections.Immutable
  summary: Creates a mutable array that can be converted to an <xref href="System.Collections.Immutable.ImmutableArray"></xref> without allocating new memory.
  syntax:
    content: public static System.Collections.Immutable.ImmutableArray<T>.Builder CreateBuilder<T> (int initialCapacity);
    parameters:
    - id: initialCapacity
      type: System.Int32
      description: The initial capacity of the builder.
    typeParameters:
    - id: T
      description: The type of elements stored in the builder.
    return:
      type: System.Collections.Immutable.ImmutableArray{T}
      description: A mutable array of the specified type that can be efficiently converted to an immutable array.
  overload: System.Collections.Immutable.ImmutableArray.CreateBuilder``1*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Immutable/ImmutableArray.xml
  author: mairaw
  ms.author: mairaw
  manager: wpickett
- uid: System.Collections.Immutable.ImmutableArray.CreateRange``1(System.Collections.Generic.IEnumerable{``0})
  commentId: M:System.Collections.Immutable.ImmutableArray.CreateRange``1(System.Collections.Generic.IEnumerable{``0})
  id: CreateRange``1(System.Collections.Generic.IEnumerable{``0})
  parent: System.Collections.Immutable.ImmutableArray
  langs:
  - csharp
  name: CreateRange<T>(IEnumerable<T>)
  nameWithType: ImmutableArray.CreateRange<T>(IEnumerable<T>)
  fullName: ImmutableArray.CreateRange<T>(IEnumerable<T>)
  type: Method
  assemblies:
  - System.Collections.Immutable
  namespace: System.Collections.Immutable
  summary: Creates a new <xref href="System.Collections.Immutable.ImmutableArray`1"></xref> populated with the specified items.
  syntax:
    content: public static System.Collections.Immutable.ImmutableArray<T> CreateRange<T> (System.Collections.Generic.IEnumerable<T> items);
    parameters:
    - id: items
      type: System.Collections.Generic.IEnumerable`1
      description: The elements to add to the array.
    typeParameters:
    - id: T
      description: The type of element stored in the array.
    return:
      type: System.Collections.Immutable.ImmutableArray`1
      description: An immutable array that contains the specified items.
  overload: System.Collections.Immutable.ImmutableArray.CreateRange``1*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Immutable/ImmutableArray.xml
  author: mairaw
  ms.author: mairaw
  manager: wpickett
- uid: System.Collections.Immutable.ImmutableArray.CreateRange``3(System.Collections.Immutable.ImmutableArray{``0},System.Int32,System.Int32,System.Func{``0,``1,``2},``1)
  commentId: M:System.Collections.Immutable.ImmutableArray.CreateRange``3(System.Collections.Immutable.ImmutableArray{``0},System.Int32,System.Int32,System.Func{``0,``1,``2},``1)
  id: CreateRange``3(System.Collections.Immutable.ImmutableArray{``0},System.Int32,System.Int32,System.Func{``0,``1,``2},``1)
  parent: System.Collections.Immutable.ImmutableArray
  langs:
  - csharp
  name: CreateRange<TSource,TArg,TResult>(ImmutableArray<TSource>, Int32, Int32, Func<TSource,TArg,TResult>, TArg)
  nameWithType: ImmutableArray.CreateRange<TSource,TArg,TResult>(ImmutableArray<TSource>, Int32, Int32, Func<TSource,TArg,TResult>, TArg)
  fullName: ImmutableArray.CreateRange<TSource,TArg,TResult>(ImmutableArray<TSource>, Int32, Int32, Func<TSource,TArg,TResult>, TArg)
  type: Method
  assemblies:
  - System.Collections.Immutable
  namespace: System.Collections.Immutable
  summary: Initializes a new instance of the <xref href="System.Collections.Immutable.ImmutableArray`1"></xref> struct.
  remarks: This overload allows efficient creation of an <xref:System.Collections.Immutable.ImmutableArray%601> based on a slice of an existing             <xref:System.Collections.Immutable.ImmutableArray%601>, where a mapping function needs to be applied to each element from the source array             included in the resulting array.
  syntax:
    content: public static System.Collections.Immutable.ImmutableArray<TResult> CreateRange<TSource,TArg,TResult> (System.Collections.Immutable.ImmutableArray<TSource> items, int start, int length, Func<TSource,TArg,TResult> selector, TArg arg);
    parameters:
    - id: items
      type: System.Collections.Immutable.ImmutableArray{TSource}
      description: The source array to initialize the resulting array with.
    - id: start
      type: System.Int32
      description: The index of the first element in the source array to include in the resulting array.
    - id: length
      type: System.Int32
      description: The number of elements from the source array to include in the resulting array.
    - id: selector
      type: System.Func{TSource,TArg,TResult}
      description: The function to apply to each element from the source array included in the resulting array.
    - id: arg
      type: TArg
      description: An argument to be passed to the selector mapping function.
    typeParameters:
    - id: TSource
      description: ''
    - id: TArg
      description: ''
    - id: TResult
      description: ''
    return:
      type: System.Collections.Immutable.ImmutableArray{TResult}
      description: ''
  overload: System.Collections.Immutable.ImmutableArray.CreateRange``3*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Immutable/ImmutableArray.xml
- uid: System.Collections.Immutable.ImmutableArray.CreateRange``3(System.Collections.Immutable.ImmutableArray{``0},System.Func{``0,``1,``2},``1)
  commentId: M:System.Collections.Immutable.ImmutableArray.CreateRange``3(System.Collections.Immutable.ImmutableArray{``0},System.Func{``0,``1,``2},``1)
  id: CreateRange``3(System.Collections.Immutable.ImmutableArray{``0},System.Func{``0,``1,``2},``1)
  parent: System.Collections.Immutable.ImmutableArray
  langs:
  - csharp
  name: CreateRange<TSource,TArg,TResult>(ImmutableArray<TSource>, Func<TSource,TArg,TResult>, TArg)
  nameWithType: ImmutableArray.CreateRange<TSource,TArg,TResult>(ImmutableArray<TSource>, Func<TSource,TArg,TResult>, TArg)
  fullName: ImmutableArray.CreateRange<TSource,TArg,TResult>(ImmutableArray<TSource>, Func<TSource,TArg,TResult>, TArg)
  type: Method
  assemblies:
  - System.Collections.Immutable
  namespace: System.Collections.Immutable
  summary: Initializes a new instance of the <xref href="System.Collections.Immutable.ImmutableArray`1"></xref> struct.
  remarks: This overload allows efficient creation of an <xref:System.Collections.Immutable.ImmutableArray%601> based on an existing             <xref:System.Collections.Immutable.ImmutableArray%601>, where a mapping function needs to be applied to each element from             the source array.
  syntax:
    content: public static System.Collections.Immutable.ImmutableArray<TResult> CreateRange<TSource,TArg,TResult> (System.Collections.Immutable.ImmutableArray<TSource> items, Func<TSource,TArg,TResult> selector, TArg arg);
    parameters:
    - id: items
      type: System.Collections.Immutable.ImmutableArray{TSource}
      description: The source array to initialize the resulting array with.
    - id: selector
      type: System.Func{TSource,TArg,TResult}
      description: The function to apply to each element from the source array.
    - id: arg
      type: TArg
      description: An argument to be passed to the selector mapping function.
    typeParameters:
    - id: TSource
      description: ''
    - id: TArg
      description: ''
    - id: TResult
      description: ''
    return:
      type: System.Collections.Immutable.ImmutableArray{TResult}
      description: ''
  overload: System.Collections.Immutable.ImmutableArray.CreateRange``3*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Immutable/ImmutableArray.xml
- uid: System.Collections.Immutable.ImmutableArray.CreateRange``2(System.Collections.Immutable.ImmutableArray{``0},System.Func{``0,``1})
  commentId: M:System.Collections.Immutable.ImmutableArray.CreateRange``2(System.Collections.Immutable.ImmutableArray{``0},System.Func{``0,``1})
  id: CreateRange``2(System.Collections.Immutable.ImmutableArray{``0},System.Func{``0,``1})
  parent: System.Collections.Immutable.ImmutableArray
  langs:
  - csharp
  name: CreateRange<TSource,TResult>(ImmutableArray<TSource>, Func<TSource,TResult>)
  nameWithType: ImmutableArray.CreateRange<TSource,TResult>(ImmutableArray<TSource>, Func<TSource,TResult>)
  fullName: ImmutableArray.CreateRange<TSource,TResult>(ImmutableArray<TSource>, Func<TSource,TResult>)
  type: Method
  assemblies:
  - System.Collections.Immutable
  namespace: System.Collections.Immutable
  summary: Initializes a new instance of the <xref href="System.Collections.Immutable.ImmutableArray`1"></xref> struct.
  remarks: This overload allows efficient creation of an <xref:System.Collections.Immutable.ImmutableArray%601> based on an existing             <xref:System.Collections.Immutable.ImmutableArray%601>, where a mapping function needs to be applied to each element from             the source array.
  syntax:
    content: public static System.Collections.Immutable.ImmutableArray<TResult> CreateRange<TSource,TResult> (System.Collections.Immutable.ImmutableArray<TSource> items, Func<TSource,TResult> selector);
    parameters:
    - id: items
      type: System.Collections.Immutable.ImmutableArray{TSource}
      description: The source array to initialize the resulting array with.
    - id: selector
      type: System.Func{TSource,TResult}
      description: The function to apply to each element from the source array.
    typeParameters:
    - id: TSource
      description: ''
    - id: TResult
      description: ''
    return:
      type: System.Collections.Immutable.ImmutableArray{TResult}
      description: ''
  overload: System.Collections.Immutable.ImmutableArray.CreateRange``2*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Immutable/ImmutableArray.xml
- uid: System.Collections.Immutable.ImmutableArray.CreateRange``2(System.Collections.Immutable.ImmutableArray{``0},System.Int32,System.Int32,System.Func{``0,``1})
  commentId: M:System.Collections.Immutable.ImmutableArray.CreateRange``2(System.Collections.Immutable.ImmutableArray{``0},System.Int32,System.Int32,System.Func{``0,``1})
  id: CreateRange``2(System.Collections.Immutable.ImmutableArray{``0},System.Int32,System.Int32,System.Func{``0,``1})
  parent: System.Collections.Immutable.ImmutableArray
  langs:
  - csharp
  name: CreateRange<TSource,TResult>(ImmutableArray<TSource>, Int32, Int32, Func<TSource,TResult>)
  nameWithType: ImmutableArray.CreateRange<TSource,TResult>(ImmutableArray<TSource>, Int32, Int32, Func<TSource,TResult>)
  fullName: ImmutableArray.CreateRange<TSource,TResult>(ImmutableArray<TSource>, Int32, Int32, Func<TSource,TResult>)
  type: Method
  assemblies:
  - System.Collections.Immutable
  namespace: System.Collections.Immutable
  summary: Initializes a new instance of the <xref href="System.Collections.Immutable.ImmutableArray`1"></xref> struct.
  remarks: This overload allows efficient creation of an <xref:System.Collections.Immutable.ImmutableArray%601> based on a slice of an existing             <xref:System.Collections.Immutable.ImmutableArray%601>, where a mapping function needs to be applied to each element from the source array             included in the resulting array.
  syntax:
    content: public static System.Collections.Immutable.ImmutableArray<TResult> CreateRange<TSource,TResult> (System.Collections.Immutable.ImmutableArray<TSource> items, int start, int length, Func<TSource,TResult> selector);
    parameters:
    - id: items
      type: System.Collections.Immutable.ImmutableArray{TSource}
      description: The source array to initialize the resulting array with.
    - id: start
      type: System.Int32
      description: The index of the first element in the source array to include in the resulting array.
    - id: length
      type: System.Int32
      description: The number of elements from the source array to include in the resulting array.
    - id: selector
      type: System.Func{TSource,TResult}
      description: The function to apply to each element from the source array included in the resulting array.
    typeParameters:
    - id: TSource
      description: ''
    - id: TResult
      description: ''
    return:
      type: System.Collections.Immutable.ImmutableArray{TResult}
      description: ''
  overload: System.Collections.Immutable.ImmutableArray.CreateRange``2*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Immutable/ImmutableArray.xml
- uid: System.Collections.Immutable.ImmutableArray.ToImmutableArray``1(System.Collections.Generic.IEnumerable{``0})
  commentId: M:System.Collections.Immutable.ImmutableArray.ToImmutableArray``1(System.Collections.Generic.IEnumerable{``0})
  id: ToImmutableArray``1(System.Collections.Generic.IEnumerable{``0})
  parent: System.Collections.Immutable.ImmutableArray
  langs:
  - csharp
  name: ToImmutableArray<TSource>(IEnumerable<TSource>)
  nameWithType: ImmutableArray.ToImmutableArray<TSource>(IEnumerable<TSource>)
  fullName: ImmutableArray.ToImmutableArray<TSource>(IEnumerable<TSource>)
  type: Method
  assemblies:
  - System.Collections.Immutable
  namespace: System.Collections.Immutable
  summary: Creates an immutable array from the specified collection.
  syntax:
    content: public static System.Collections.Immutable.ImmutableArray<TSource> ToImmutableArray<TSource> (this System.Collections.Generic.IEnumerable<TSource> items);
    parameters:
    - id: items
      type: System.Collections.Generic.IEnumerable{TSource}
      description: The collection of objects to copy to the immutable array.
    typeParameters:
    - id: TSource
      description: The type of elements contained in <code>items</code>.
    return:
      type: System.Collections.Immutable.ImmutableArray{TSource}
      description: An immutable array that contains the specified collection of objects.
  overload: System.Collections.Immutable.ImmutableArray.ToImmutableArray``1*
  exceptions: []
  version:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Immutable/ImmutableArray.xml
  author: mairaw
  ms.author: mairaw
  manager: wpickett
references:
- uid: System.Object
  parent: System
  isExternal: false
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.InvalidOperationException
  parent: System
  isExternal: false
  name: InvalidOperationException
  nameWithType: InvalidOperationException
  fullName: System.InvalidOperationException
- uid: System.Collections.Immutable.ImmutableArray.BinarySearch``1(System.Collections.Immutable.ImmutableArray{``0},``0)
  parent: System.Collections.Immutable.ImmutableArray
  isExternal: false
  name: BinarySearch<T>(ImmutableArray<T>, T)
  nameWithType: ImmutableArray.BinarySearch<T>(ImmutableArray<T>, T)
  fullName: ImmutableArray.BinarySearch<T>(ImmutableArray<T>, T)
- uid: System.Int32
  parent: System
  isExternal: false
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Collections.Immutable.ImmutableArray`1
  parent: System.Collections.Immutable
  isExternal: false
  name: ImmutableArray<T>
  nameWithType: ImmutableArray<T>
  fullName: System.Collections.Immutable.ImmutableArray<T>
- uid: T
  isExternal: true
  name: T
  nameWithType: T
  fullName: T
- uid: System.Collections.Immutable.ImmutableArray.BinarySearch``1(System.Collections.Immutable.ImmutableArray{``0},``0,System.Collections.Generic.IComparer{``0})
  parent: System.Collections.Immutable.ImmutableArray
  isExternal: false
  name: BinarySearch<T>(ImmutableArray<T>, T, IComparer<T>)
  nameWithType: ImmutableArray.BinarySearch<T>(ImmutableArray<T>, T, IComparer<T>)
  fullName: ImmutableArray.BinarySearch<T>(ImmutableArray<T>, T, IComparer<T>)
- uid: System.Collections.Generic.IComparer`1
  parent: System.Collections.Generic
  isExternal: false
  name: IComparer<T>
  nameWithType: IComparer<T>
  fullName: System.Collections.Generic.IComparer<T>
- uid: System.Collections.Immutable.ImmutableArray.BinarySearch``1(System.Collections.Immutable.ImmutableArray{``0},System.Int32,System.Int32,``0)
  parent: System.Collections.Immutable.ImmutableArray
  isExternal: false
  name: BinarySearch<T>(ImmutableArray<T>, Int32, Int32, T)
  nameWithType: ImmutableArray.BinarySearch<T>(ImmutableArray<T>, Int32, Int32, T)
  fullName: ImmutableArray.BinarySearch<T>(ImmutableArray<T>, Int32, Int32, T)
- uid: System.Collections.Immutable.ImmutableArray.BinarySearch``1(System.Collections.Immutable.ImmutableArray{``0},System.Int32,System.Int32,``0,System.Collections.Generic.IComparer{``0})
  parent: System.Collections.Immutable.ImmutableArray
  isExternal: false
  name: BinarySearch<T>(ImmutableArray<T>, Int32, Int32, T, IComparer<T>)
  nameWithType: ImmutableArray.BinarySearch<T>(ImmutableArray<T>, Int32, Int32, T, IComparer<T>)
  fullName: ImmutableArray.BinarySearch<T>(ImmutableArray<T>, Int32, Int32, T, IComparer<T>)
- uid: System.Collections.Immutable.ImmutableArray.Create``1(``0,``0,``0,``0)
  parent: System.Collections.Immutable.ImmutableArray
  isExternal: false
  name: Create<T>(T, T, T, T)
  nameWithType: ImmutableArray.Create<T>(T, T, T, T)
  fullName: ImmutableArray.Create<T>(T, T, T, T)
- uid: System.Collections.Immutable.ImmutableArray.Create``1(``0[],System.Int32,System.Int32)
  parent: System.Collections.Immutable.ImmutableArray
  isExternal: false
  name: Create<T>(T[], Int32, Int32)
  nameWithType: ImmutableArray.Create<T>(T[], Int32, Int32)
  fullName: ImmutableArray.Create<T>(T[], Int32, Int32)
- uid: T[]
  isExternal: true
  name: T[]
  nameWithType: T[]
  fullName: T[]
  spec.csharp:
  - uid: T
    name: T
    nameWithType: T
    fullName: T
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
- uid: System.Collections.Immutable.ImmutableArray.Create``1(System.Collections.Immutable.ImmutableArray{``0},System.Int32,System.Int32)
  parent: System.Collections.Immutable.ImmutableArray
  isExternal: false
  name: Create<T>(ImmutableArray<T>, Int32, Int32)
  nameWithType: ImmutableArray.Create<T>(ImmutableArray<T>, Int32, Int32)
  fullName: ImmutableArray.Create<T>(ImmutableArray<T>, Int32, Int32)
- uid: System.Collections.Immutable.ImmutableArray.Create``1(``0,``0,``0)
  parent: System.Collections.Immutable.ImmutableArray
  isExternal: false
  name: Create<T>(T, T, T)
  nameWithType: ImmutableArray.Create<T>(T, T, T)
  fullName: ImmutableArray.Create<T>(T, T, T)
- uid: System.Collections.Immutable.ImmutableArray.Create``1(``0[])
  parent: System.Collections.Immutable.ImmutableArray
  isExternal: false
  name: Create<T>(T[])
  nameWithType: ImmutableArray.Create<T>(T[])
  fullName: ImmutableArray.Create<T>(T[])
- uid: System.Collections.Immutable.ImmutableArray.Create``1(``0)
  parent: System.Collections.Immutable.ImmutableArray
  isExternal: false
  name: Create<T>(T)
  nameWithType: ImmutableArray.Create<T>(T)
  fullName: ImmutableArray.Create<T>(T)
- uid: System.Collections.Immutable.ImmutableArray.Create``1
  parent: System.Collections.Immutable.ImmutableArray
  isExternal: false
  name: Create<T>()
  nameWithType: ImmutableArray.Create<T>()
  fullName: ImmutableArray.Create<T>()
- uid: System.Collections.Immutable.ImmutableArray.Create``1(``0,``0)
  parent: System.Collections.Immutable.ImmutableArray
  isExternal: false
  name: Create<T>(T, T)
  nameWithType: ImmutableArray.Create<T>(T, T)
  fullName: ImmutableArray.Create<T>(T, T)
- uid: System.Collections.Immutable.ImmutableArray.CreateBuilder``1
  parent: System.Collections.Immutable.ImmutableArray
  isExternal: false
  name: CreateBuilder<T>()
  nameWithType: ImmutableArray.CreateBuilder<T>()
  fullName: ImmutableArray.CreateBuilder<T>()
- uid: System.Collections.Immutable.ImmutableArray{T}
  parent: System.Collections.Immutable
  isExternal: false
  name: ImmutableArray<T>
  nameWithType: ImmutableArray<T>
  fullName: System.Collections.Immutable.ImmutableArray<T>+Builder
  spec.csharp:
  - uid: System.Collections.Immutable.ImmutableArray`1
    name: ImmutableArray
    nameWithType: ImmutableArray
    fullName: System.Collections.Immutable.ImmutableArray
  - name: <
    nameWithType: <
    fullName: <
  - uid: T
    name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Collections.Immutable.ImmutableArray.CreateBuilder``1(System.Int32)
  parent: System.Collections.Immutable.ImmutableArray
  isExternal: false
  name: CreateBuilder<T>(Int32)
  nameWithType: ImmutableArray.CreateBuilder<T>(Int32)
  fullName: ImmutableArray.CreateBuilder<T>(Int32)
- uid: System.Collections.Immutable.ImmutableArray.CreateRange``1(System.Collections.Generic.IEnumerable{``0})
  parent: System.Collections.Immutable.ImmutableArray
  isExternal: false
  name: CreateRange<T>(IEnumerable<T>)
  nameWithType: ImmutableArray.CreateRange<T>(IEnumerable<T>)
  fullName: ImmutableArray.CreateRange<T>(IEnumerable<T>)
- uid: System.Collections.Generic.IEnumerable`1
  parent: System.Collections.Generic
  isExternal: false
  name: IEnumerable<T>
  nameWithType: IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
- uid: System.Collections.Immutable.ImmutableArray.CreateRange``3(System.Collections.Immutable.ImmutableArray{``0},System.Int32,System.Int32,System.Func{``0,``1,``2},``1)
  parent: System.Collections.Immutable.ImmutableArray
  isExternal: false
  name: CreateRange<TSource,TArg,TResult>(ImmutableArray<TSource>, Int32, Int32, Func<TSource,TArg,TResult>, TArg)
  nameWithType: ImmutableArray.CreateRange<TSource,TArg,TResult>(ImmutableArray<TSource>, Int32, Int32, Func<TSource,TArg,TResult>, TArg)
  fullName: ImmutableArray.CreateRange<TSource,TArg,TResult>(ImmutableArray<TSource>, Int32, Int32, Func<TSource,TArg,TResult>, TArg)
- uid: TResult
  name: TResult
  nameWithType: TResult
  fullName: TResult
- uid: System.Collections.Immutable.ImmutableArray{TResult}
  parent: System.Collections.Immutable
  isExternal: false
  name: ImmutableArray<TResult>
  nameWithType: ImmutableArray<TResult>
  fullName: System.Collections.Immutable.ImmutableArray<TResult>
  spec.csharp:
  - uid: System.Collections.Immutable.ImmutableArray`1
    name: ImmutableArray
    nameWithType: ImmutableArray
    fullName: System.Collections.Immutable.ImmutableArray
  - name: <
    nameWithType: <
    fullName: <
  - uid: TResult
    name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: TSource
  name: TSource
  nameWithType: TSource
  fullName: TSource
- uid: System.Collections.Immutable.ImmutableArray{TSource}
  parent: System.Collections.Immutable
  isExternal: false
  name: ImmutableArray<TSource>
  nameWithType: ImmutableArray<TSource>
  fullName: System.Collections.Immutable.ImmutableArray<TSource>
  spec.csharp:
  - uid: System.Collections.Immutable.ImmutableArray`1
    name: ImmutableArray
    nameWithType: ImmutableArray
    fullName: System.Collections.Immutable.ImmutableArray
  - name: <
    nameWithType: <
    fullName: <
  - uid: TSource
    name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Func`3
  name: Func<T1,T2,TResult>
  nameWithType: Func<T1,T2,TResult>
  fullName: System.Func<T1,T2,TResult>
- uid: TArg
  name: TArg
  nameWithType: TArg
  fullName: TArg
- uid: System.Func{TSource,TArg,TResult}
  parent: System
  isExternal: false
  name: Func<TSource,TArg,TResult>
  nameWithType: Func<TSource,TArg,TResult>
  fullName: System.Func<TSource,TArg,TResult>
  spec.csharp:
  - uid: System.Func`3
    name: Func
    nameWithType: Func
    fullName: System.Func
  - name: <
    nameWithType: <
    fullName: <
  - uid: TSource
    name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ','
    nameWithType: ','
    fullName: ','
  - uid: TArg
    name: TArg
    nameWithType: TArg
    fullName: TArg
  - name: ','
    nameWithType: ','
    fullName: ','
  - uid: TResult
    name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Collections.Immutable.ImmutableArray.CreateRange``3(System.Collections.Immutable.ImmutableArray{``0},System.Func{``0,``1,``2},``1)
  parent: System.Collections.Immutable.ImmutableArray
  isExternal: false
  name: CreateRange<TSource,TArg,TResult>(ImmutableArray<TSource>, Func<TSource,TArg,TResult>, TArg)
  nameWithType: ImmutableArray.CreateRange<TSource,TArg,TResult>(ImmutableArray<TSource>, Func<TSource,TArg,TResult>, TArg)
  fullName: ImmutableArray.CreateRange<TSource,TArg,TResult>(ImmutableArray<TSource>, Func<TSource,TArg,TResult>, TArg)
- uid: System.Collections.Immutable.ImmutableArray.CreateRange``2(System.Collections.Immutable.ImmutableArray{``0},System.Func{``0,``1})
  parent: System.Collections.Immutable.ImmutableArray
  isExternal: false
  name: CreateRange<TSource,TResult>(ImmutableArray<TSource>, Func<TSource,TResult>)
  nameWithType: ImmutableArray.CreateRange<TSource,TResult>(ImmutableArray<TSource>, Func<TSource,TResult>)
  fullName: ImmutableArray.CreateRange<TSource,TResult>(ImmutableArray<TSource>, Func<TSource,TResult>)
- uid: System.Func`2
  name: Func<T,TResult>
  nameWithType: Func<T,TResult>
  fullName: System.Func<T,TResult>
- uid: System.Func{TSource,TResult}
  parent: System
  isExternal: false
  name: Func<TSource,TResult>
  nameWithType: Func<TSource,TResult>
  fullName: System.Func<TSource,TResult>
  spec.csharp:
  - uid: System.Func`2
    name: Func
    nameWithType: Func
    fullName: System.Func
  - name: <
    nameWithType: <
    fullName: <
  - uid: TSource
    name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: ','
    nameWithType: ','
    fullName: ','
  - uid: TResult
    name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Collections.Immutable.ImmutableArray.CreateRange``2(System.Collections.Immutable.ImmutableArray{``0},System.Int32,System.Int32,System.Func{``0,``1})
  parent: System.Collections.Immutable.ImmutableArray
  isExternal: false
  name: CreateRange<TSource,TResult>(ImmutableArray<TSource>, Int32, Int32, Func<TSource,TResult>)
  nameWithType: ImmutableArray.CreateRange<TSource,TResult>(ImmutableArray<TSource>, Int32, Int32, Func<TSource,TResult>)
  fullName: ImmutableArray.CreateRange<TSource,TResult>(ImmutableArray<TSource>, Int32, Int32, Func<TSource,TResult>)
- uid: System.Collections.Immutable.ImmutableArray.ToImmutableArray``1(System.Collections.Generic.IEnumerable{``0})
  parent: System.Collections.Immutable.ImmutableArray
  isExternal: false
  name: ToImmutableArray<TSource>(IEnumerable<TSource>)
  nameWithType: ImmutableArray.ToImmutableArray<TSource>(IEnumerable<TSource>)
  fullName: ImmutableArray.ToImmutableArray<TSource>(IEnumerable<TSource>)
- uid: System.Collections.Generic.IEnumerable{TSource}
  parent: System.Collections.Generic
  isExternal: false
  name: IEnumerable<TSource>
  nameWithType: IEnumerable<TSource>
  fullName: System.Collections.Generic.IEnumerable<TSource>
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
  - name: <
    nameWithType: <
    fullName: <
  - uid: TSource
    name: TSource
    nameWithType: TSource
    fullName: TSource
  - name: '>'
    nameWithType: '>'
    fullName: '>'
- uid: System.Collections.Immutable.ImmutableArray.BinarySearch``1*
  parent: System.Collections.Immutable.ImmutableArray
  isExternal: false
  name: BinarySearch<T>
  nameWithType: ImmutableArray.BinarySearch<T>
  fullName: ImmutableArray.BinarySearch<T>
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Immutable/ImmutableArray.xml
- uid: System.Collections.Immutable.ImmutableArray.Create``1*
  parent: System.Collections.Immutable.ImmutableArray
  isExternal: false
  name: Create<T>
  nameWithType: ImmutableArray.Create<T>
  fullName: ImmutableArray.Create<T>
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Immutable/ImmutableArray.xml
- uid: System.Collections.Immutable.ImmutableArray.CreateBuilder``1*
  parent: System.Collections.Immutable.ImmutableArray
  isExternal: false
  name: CreateBuilder<T>
  nameWithType: ImmutableArray.CreateBuilder<T>
  fullName: ImmutableArray.CreateBuilder<T>
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Immutable/ImmutableArray.xml
- uid: System.Collections.Immutable.ImmutableArray.CreateRange``1*
  parent: System.Collections.Immutable.ImmutableArray
  isExternal: false
  name: CreateRange<T>
  nameWithType: ImmutableArray.CreateRange<T>
  fullName: ImmutableArray.CreateRange<T>
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Immutable/ImmutableArray.xml
- uid: System.Collections.Immutable.ImmutableArray.CreateRange``3*
  parent: System.Collections.Immutable.ImmutableArray
  isExternal: false
  name: CreateRange<TSource,TArg,TResult>
  nameWithType: ImmutableArray.CreateRange<TSource,TArg,TResult>
  fullName: ImmutableArray.CreateRange<TSource,TArg,TResult>
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Immutable/ImmutableArray.xml
- uid: System.Collections.Immutable.ImmutableArray.CreateRange``2*
  parent: System.Collections.Immutable.ImmutableArray
  isExternal: false
  name: CreateRange<TSource,TResult>
  nameWithType: ImmutableArray.CreateRange<TSource,TResult>
  fullName: ImmutableArray.CreateRange<TSource,TResult>
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Immutable/ImmutableArray.xml
- uid: System.Collections.Immutable.ImmutableArray.ToImmutableArray``1*
  parent: System.Collections.Immutable.ImmutableArray
  isExternal: false
  name: ToImmutableArray<TSource>
  nameWithType: ImmutableArray.ToImmutableArray<TSource>
  fullName: ImmutableArray.ToImmutableArray<TSource>
  monikers:
  - netcore-1.0
  - netcore-1.1
  - netcore-2.0
  content_git_url: https://github.com/dotnet/docs/blob/master/xml/System.Collections.Immutable/ImmutableArray.xml
- uid: System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: false
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: Object.Equals(Object)
- uid: System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: false
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: Object.Equals(Object, Object)
- uid: System.Object.GetHashCode
  parent: System.Object
  isExternal: false
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: Object.GetHashCode()
- uid: System.Object.GetType
  parent: System.Object
  isExternal: false
  name: GetType()
  nameWithType: Object.GetType()
  fullName: Object.GetType()
- uid: System.Object.MemberwiseClone
  parent: System.Object
  isExternal: false
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: Object.MemberwiseClone()
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: false
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: Object.ReferenceEquals(Object, Object)
- uid: System.Object.ToString
  parent: System.Object
  isExternal: false
  name: ToString()
  nameWithType: Object.ToString()
  fullName: Object.ToString()
